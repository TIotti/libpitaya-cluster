// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go-server/protos/cluster.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RPCMsg message to be sent using rpc
type RPCMsg struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=Msg" json:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCMsg) Reset()         { *m = RPCMsg{} }
func (m *RPCMsg) String() string { return proto.CompactTextString(m) }
func (*RPCMsg) ProtoMessage()    {}
func (*RPCMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_4511d2cdbc01e3dd, []int{0}
}
func (m *RPCMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCMsg.Unmarshal(m, b)
}
func (m *RPCMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCMsg.Marshal(b, m, deterministic)
}
func (dst *RPCMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCMsg.Merge(dst, src)
}
func (m *RPCMsg) XXX_Size() int {
	return xxx_messageInfo_RPCMsg.Size(m)
}
func (m *RPCMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RPCMsg proto.InternalMessageInfo

func (m *RPCMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// RPCRes is the rpc response
type RPCRes struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=Msg" json:"Msg,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=Code" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCRes) Reset()         { *m = RPCRes{} }
func (m *RPCRes) String() string { return proto.CompactTextString(m) }
func (*RPCRes) ProtoMessage()    {}
func (*RPCRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_4511d2cdbc01e3dd, []int{1}
}
func (m *RPCRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCRes.Unmarshal(m, b)
}
func (m *RPCRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCRes.Marshal(b, m, deterministic)
}
func (dst *RPCRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCRes.Merge(dst, src)
}
func (m *RPCRes) XXX_Size() int {
	return xxx_messageInfo_RPCRes.Size(m)
}
func (m *RPCRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCRes.DiscardUnknown(m)
}

var xxx_messageInfo_RPCRes proto.InternalMessageInfo

func (m *RPCRes) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RPCRes) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*RPCMsg)(nil), "protos.RPCMsg")
	proto.RegisterType((*RPCRes)(nil), "protos.RPCRes")
}

func init() {
	proto.RegisterFile("go-server/protos/cluster.proto", fileDescriptor_cluster_4511d2cdbc01e3dd)
}

var fileDescriptor_cluster_4511d2cdbc01e3dd = []byte{
	// 112 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xd7, 0x2d,
	0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x2f, 0xd6, 0x4f, 0xce, 0x29,
	0x2d, 0x2e, 0x49, 0x2d, 0xd2, 0x03, 0x73, 0x85, 0xd8, 0x20, 0xa2, 0x4a, 0x52, 0x5c, 0x6c, 0x41,
	0x01, 0xce, 0xbe, 0xc5, 0xe9, 0x42, 0x02, 0x5c, 0xcc, 0xbe, 0xc5, 0xe9, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x92, 0x1e, 0x58, 0x2e, 0x28, 0xb5, 0x18, 0x53, 0x4e, 0x48, 0x88,
	0x8b, 0xc5, 0x39, 0x3f, 0x25, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x35, 0x08, 0xcc, 0x4e, 0x82,
	0x98, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xe1, 0x3d, 0x45, 0x7c, 0x00, 0x00, 0x00,
}
