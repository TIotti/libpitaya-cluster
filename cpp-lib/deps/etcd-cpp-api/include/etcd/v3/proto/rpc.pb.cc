// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace etcdserverpb {
constexpr ResponseHeader::ResponseHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cluster_id_(uint64_t{0u})
  , member_id_(uint64_t{0u})
  , revision_(int64_t{0})
  , raft_term_(uint64_t{0u}){}
struct ResponseHeaderDefaultTypeInternal {
  constexpr ResponseHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseHeaderDefaultTypeInternal() {}
  union {
    ResponseHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
constexpr RangeRequest::RangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_end_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limit_(int64_t{0})
  , revision_(int64_t{0})
  , sort_order_(0)

  , sort_target_(0)

  , min_mod_revision_(int64_t{0})
  , max_mod_revision_(int64_t{0})
  , min_create_revision_(int64_t{0})
  , max_create_revision_(int64_t{0})
  , serializable_(false)
  , keys_only_(false)
  , count_only_(false){}
struct RangeRequestDefaultTypeInternal {
  constexpr RangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeRequestDefaultTypeInternal() {}
  union {
    RangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeRequestDefaultTypeInternal _RangeRequest_default_instance_;
constexpr RangeResponse::RangeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kvs_()
  , header_(nullptr)
  , count_(int64_t{0})
  , more_(false){}
struct RangeResponseDefaultTypeInternal {
  constexpr RangeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeResponseDefaultTypeInternal() {}
  union {
    RangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeResponseDefaultTypeInternal _RangeResponse_default_instance_;
constexpr PutRequest::PutRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lease_(int64_t{0})
  , prev_kv_(false)
  , ignore_value_(false)
  , ignore_lease_(false){}
struct PutRequestDefaultTypeInternal {
  constexpr PutRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PutRequestDefaultTypeInternal() {}
  union {
    PutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PutRequestDefaultTypeInternal _PutRequest_default_instance_;
constexpr PutResponse::PutResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , prev_kv_(nullptr){}
struct PutResponseDefaultTypeInternal {
  constexpr PutResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PutResponseDefaultTypeInternal() {}
  union {
    PutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PutResponseDefaultTypeInternal _PutResponse_default_instance_;
constexpr DeleteRangeRequest::DeleteRangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_end_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prev_kv_(false){}
struct DeleteRangeRequestDefaultTypeInternal {
  constexpr DeleteRangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteRangeRequestDefaultTypeInternal() {}
  union {
    DeleteRangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteRangeRequestDefaultTypeInternal _DeleteRangeRequest_default_instance_;
constexpr DeleteRangeResponse::DeleteRangeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prev_kvs_()
  , header_(nullptr)
  , deleted_(int64_t{0}){}
struct DeleteRangeResponseDefaultTypeInternal {
  constexpr DeleteRangeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteRangeResponseDefaultTypeInternal() {}
  union {
    DeleteRangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteRangeResponseDefaultTypeInternal _DeleteRangeResponse_default_instance_;
constexpr RequestOp::RequestOp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RequestOpDefaultTypeInternal {
  constexpr RequestOpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestOpDefaultTypeInternal() {}
  union {
    RequestOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestOpDefaultTypeInternal _RequestOp_default_instance_;
constexpr ResponseOp::ResponseOp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ResponseOpDefaultTypeInternal {
  constexpr ResponseOpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseOpDefaultTypeInternal() {}
  union {
    ResponseOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseOpDefaultTypeInternal _ResponseOp_default_instance_;
constexpr Compare::Compare(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_end_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)

  , target_(0)

  , _oneof_case_{}{}
struct CompareDefaultTypeInternal {
  constexpr CompareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompareDefaultTypeInternal() {}
  union {
    Compare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompareDefaultTypeInternal _Compare_default_instance_;
constexpr TxnRequest::TxnRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compare_()
  , success_()
  , failure_(){}
struct TxnRequestDefaultTypeInternal {
  constexpr TxnRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxnRequestDefaultTypeInternal() {}
  union {
    TxnRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxnRequestDefaultTypeInternal _TxnRequest_default_instance_;
constexpr TxnResponse::TxnResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responses_()
  , header_(nullptr)
  , succeeded_(false){}
struct TxnResponseDefaultTypeInternal {
  constexpr TxnResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxnResponseDefaultTypeInternal() {}
  union {
    TxnResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxnResponseDefaultTypeInternal _TxnResponse_default_instance_;
constexpr CompactionRequest::CompactionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : revision_(int64_t{0})
  , physical_(false){}
struct CompactionRequestDefaultTypeInternal {
  constexpr CompactionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompactionRequestDefaultTypeInternal() {}
  union {
    CompactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompactionRequestDefaultTypeInternal _CompactionRequest_default_instance_;
constexpr CompactionResponse::CompactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct CompactionResponseDefaultTypeInternal {
  constexpr CompactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompactionResponseDefaultTypeInternal() {}
  union {
    CompactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompactionResponseDefaultTypeInternal _CompactionResponse_default_instance_;
constexpr HashRequest::HashRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HashRequestDefaultTypeInternal {
  constexpr HashRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HashRequestDefaultTypeInternal() {}
  union {
    HashRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HashRequestDefaultTypeInternal _HashRequest_default_instance_;
constexpr HashKVRequest::HashKVRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : revision_(int64_t{0}){}
struct HashKVRequestDefaultTypeInternal {
  constexpr HashKVRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HashKVRequestDefaultTypeInternal() {}
  union {
    HashKVRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HashKVRequestDefaultTypeInternal _HashKVRequest_default_instance_;
constexpr HashKVResponse::HashKVResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , compact_revision_(int64_t{0})
  , hash_(0u){}
struct HashKVResponseDefaultTypeInternal {
  constexpr HashKVResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HashKVResponseDefaultTypeInternal() {}
  union {
    HashKVResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HashKVResponseDefaultTypeInternal _HashKVResponse_default_instance_;
constexpr HashResponse::HashResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , hash_(0u){}
struct HashResponseDefaultTypeInternal {
  constexpr HashResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HashResponseDefaultTypeInternal() {}
  union {
    HashResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HashResponseDefaultTypeInternal _HashResponse_default_instance_;
constexpr SnapshotRequest::SnapshotRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SnapshotRequestDefaultTypeInternal {
  constexpr SnapshotRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnapshotRequestDefaultTypeInternal() {}
  union {
    SnapshotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnapshotRequestDefaultTypeInternal _SnapshotRequest_default_instance_;
constexpr SnapshotResponse::SnapshotResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blob_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , remaining_bytes_(uint64_t{0u}){}
struct SnapshotResponseDefaultTypeInternal {
  constexpr SnapshotResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnapshotResponseDefaultTypeInternal() {}
  union {
    SnapshotResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnapshotResponseDefaultTypeInternal _SnapshotResponse_default_instance_;
constexpr WatchRequest::WatchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct WatchRequestDefaultTypeInternal {
  constexpr WatchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchRequestDefaultTypeInternal() {}
  union {
    WatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchRequestDefaultTypeInternal _WatchRequest_default_instance_;
constexpr WatchCreateRequest::WatchCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_()
  , _filters_cached_byte_size_(0)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_end_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_revision_(int64_t{0})
  , progress_notify_(false)
  , prev_kv_(false){}
struct WatchCreateRequestDefaultTypeInternal {
  constexpr WatchCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchCreateRequestDefaultTypeInternal() {}
  union {
    WatchCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchCreateRequestDefaultTypeInternal _WatchCreateRequest_default_instance_;
constexpr WatchCancelRequest::WatchCancelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : watch_id_(int64_t{0}){}
struct WatchCancelRequestDefaultTypeInternal {
  constexpr WatchCancelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchCancelRequestDefaultTypeInternal() {}
  union {
    WatchCancelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchCancelRequestDefaultTypeInternal _WatchCancelRequest_default_instance_;
constexpr WatchResponse::WatchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , cancel_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , watch_id_(int64_t{0})
  , compact_revision_(int64_t{0})
  , created_(false)
  , canceled_(false){}
struct WatchResponseDefaultTypeInternal {
  constexpr WatchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchResponseDefaultTypeInternal() {}
  union {
    WatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchResponseDefaultTypeInternal _WatchResponse_default_instance_;
constexpr LeaseGrantRequest::LeaseGrantRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ttl_(int64_t{0})
  , id_(int64_t{0}){}
struct LeaseGrantRequestDefaultTypeInternal {
  constexpr LeaseGrantRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseGrantRequestDefaultTypeInternal() {}
  union {
    LeaseGrantRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseGrantRequestDefaultTypeInternal _LeaseGrantRequest_default_instance_;
constexpr LeaseGrantResponse::LeaseGrantResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , id_(int64_t{0})
  , ttl_(int64_t{0}){}
struct LeaseGrantResponseDefaultTypeInternal {
  constexpr LeaseGrantResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseGrantResponseDefaultTypeInternal() {}
  union {
    LeaseGrantResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseGrantResponseDefaultTypeInternal _LeaseGrantResponse_default_instance_;
constexpr LeaseRevokeRequest::LeaseRevokeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct LeaseRevokeRequestDefaultTypeInternal {
  constexpr LeaseRevokeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseRevokeRequestDefaultTypeInternal() {}
  union {
    LeaseRevokeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseRevokeRequestDefaultTypeInternal _LeaseRevokeRequest_default_instance_;
constexpr LeaseRevokeResponse::LeaseRevokeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct LeaseRevokeResponseDefaultTypeInternal {
  constexpr LeaseRevokeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseRevokeResponseDefaultTypeInternal() {}
  union {
    LeaseRevokeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseRevokeResponseDefaultTypeInternal _LeaseRevokeResponse_default_instance_;
constexpr LeaseKeepAliveRequest::LeaseKeepAliveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct LeaseKeepAliveRequestDefaultTypeInternal {
  constexpr LeaseKeepAliveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseKeepAliveRequestDefaultTypeInternal() {}
  union {
    LeaseKeepAliveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseKeepAliveRequestDefaultTypeInternal _LeaseKeepAliveRequest_default_instance_;
constexpr LeaseKeepAliveResponse::LeaseKeepAliveResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , id_(int64_t{0})
  , ttl_(int64_t{0}){}
struct LeaseKeepAliveResponseDefaultTypeInternal {
  constexpr LeaseKeepAliveResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseKeepAliveResponseDefaultTypeInternal() {}
  union {
    LeaseKeepAliveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseKeepAliveResponseDefaultTypeInternal _LeaseKeepAliveResponse_default_instance_;
constexpr LeaseTimeToLiveRequest::LeaseTimeToLiveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0})
  , keys_(false){}
struct LeaseTimeToLiveRequestDefaultTypeInternal {
  constexpr LeaseTimeToLiveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseTimeToLiveRequestDefaultTypeInternal() {}
  union {
    LeaseTimeToLiveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseTimeToLiveRequestDefaultTypeInternal _LeaseTimeToLiveRequest_default_instance_;
constexpr LeaseTimeToLiveResponse::LeaseTimeToLiveResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , header_(nullptr)
  , id_(int64_t{0})
  , ttl_(int64_t{0})
  , grantedttl_(int64_t{0}){}
struct LeaseTimeToLiveResponseDefaultTypeInternal {
  constexpr LeaseTimeToLiveResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseTimeToLiveResponseDefaultTypeInternal() {}
  union {
    LeaseTimeToLiveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseTimeToLiveResponseDefaultTypeInternal _LeaseTimeToLiveResponse_default_instance_;
constexpr LeaseLeasesRequest::LeaseLeasesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LeaseLeasesRequestDefaultTypeInternal {
  constexpr LeaseLeasesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseLeasesRequestDefaultTypeInternal() {}
  union {
    LeaseLeasesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseLeasesRequestDefaultTypeInternal _LeaseLeasesRequest_default_instance_;
constexpr LeaseStatus::LeaseStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct LeaseStatusDefaultTypeInternal {
  constexpr LeaseStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseStatusDefaultTypeInternal() {}
  union {
    LeaseStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseStatusDefaultTypeInternal _LeaseStatus_default_instance_;
constexpr LeaseLeasesResponse::LeaseLeasesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leases_()
  , header_(nullptr){}
struct LeaseLeasesResponseDefaultTypeInternal {
  constexpr LeaseLeasesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseLeasesResponseDefaultTypeInternal() {}
  union {
    LeaseLeasesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseLeasesResponseDefaultTypeInternal _LeaseLeasesResponse_default_instance_;
constexpr Member::Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peerurls_()
  , clienturls_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u}){}
struct MemberDefaultTypeInternal {
  constexpr MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberDefaultTypeInternal() {}
  union {
    Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberDefaultTypeInternal _Member_default_instance_;
constexpr MemberAddRequest::MemberAddRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peerurls_(){}
struct MemberAddRequestDefaultTypeInternal {
  constexpr MemberAddRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberAddRequestDefaultTypeInternal() {}
  union {
    MemberAddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberAddRequestDefaultTypeInternal _MemberAddRequest_default_instance_;
constexpr MemberAddResponse::MemberAddResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , header_(nullptr)
  , member_(nullptr){}
struct MemberAddResponseDefaultTypeInternal {
  constexpr MemberAddResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberAddResponseDefaultTypeInternal() {}
  union {
    MemberAddResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberAddResponseDefaultTypeInternal _MemberAddResponse_default_instance_;
constexpr MemberRemoveRequest::MemberRemoveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(uint64_t{0u}){}
struct MemberRemoveRequestDefaultTypeInternal {
  constexpr MemberRemoveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberRemoveRequestDefaultTypeInternal() {}
  union {
    MemberRemoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberRemoveRequestDefaultTypeInternal _MemberRemoveRequest_default_instance_;
constexpr MemberRemoveResponse::MemberRemoveResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , header_(nullptr){}
struct MemberRemoveResponseDefaultTypeInternal {
  constexpr MemberRemoveResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberRemoveResponseDefaultTypeInternal() {}
  union {
    MemberRemoveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberRemoveResponseDefaultTypeInternal _MemberRemoveResponse_default_instance_;
constexpr MemberUpdateRequest::MemberUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peerurls_()
  , id_(uint64_t{0u}){}
struct MemberUpdateRequestDefaultTypeInternal {
  constexpr MemberUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberUpdateRequestDefaultTypeInternal() {}
  union {
    MemberUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberUpdateRequestDefaultTypeInternal _MemberUpdateRequest_default_instance_;
constexpr MemberUpdateResponse::MemberUpdateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , header_(nullptr){}
struct MemberUpdateResponseDefaultTypeInternal {
  constexpr MemberUpdateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberUpdateResponseDefaultTypeInternal() {}
  union {
    MemberUpdateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberUpdateResponseDefaultTypeInternal _MemberUpdateResponse_default_instance_;
constexpr MemberListRequest::MemberListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MemberListRequestDefaultTypeInternal {
  constexpr MemberListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberListRequestDefaultTypeInternal() {}
  union {
    MemberListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberListRequestDefaultTypeInternal _MemberListRequest_default_instance_;
constexpr MemberListResponse::MemberListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , header_(nullptr){}
struct MemberListResponseDefaultTypeInternal {
  constexpr MemberListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberListResponseDefaultTypeInternal() {}
  union {
    MemberListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberListResponseDefaultTypeInternal _MemberListResponse_default_instance_;
constexpr DefragmentRequest::DefragmentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DefragmentRequestDefaultTypeInternal {
  constexpr DefragmentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DefragmentRequestDefaultTypeInternal() {}
  union {
    DefragmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DefragmentRequestDefaultTypeInternal _DefragmentRequest_default_instance_;
constexpr DefragmentResponse::DefragmentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct DefragmentResponseDefaultTypeInternal {
  constexpr DefragmentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DefragmentResponseDefaultTypeInternal() {}
  union {
    DefragmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DefragmentResponseDefaultTypeInternal _DefragmentResponse_default_instance_;
constexpr MoveLeaderRequest::MoveLeaderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : targetid_(uint64_t{0u}){}
struct MoveLeaderRequestDefaultTypeInternal {
  constexpr MoveLeaderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveLeaderRequestDefaultTypeInternal() {}
  union {
    MoveLeaderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveLeaderRequestDefaultTypeInternal _MoveLeaderRequest_default_instance_;
constexpr MoveLeaderResponse::MoveLeaderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct MoveLeaderResponseDefaultTypeInternal {
  constexpr MoveLeaderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveLeaderResponseDefaultTypeInternal() {}
  union {
    MoveLeaderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveLeaderResponseDefaultTypeInternal _MoveLeaderResponse_default_instance_;
constexpr AlarmRequest::AlarmRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : memberid_(uint64_t{0u})
  , action_(0)

  , alarm_(0)
{}
struct AlarmRequestDefaultTypeInternal {
  constexpr AlarmRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlarmRequestDefaultTypeInternal() {}
  union {
    AlarmRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlarmRequestDefaultTypeInternal _AlarmRequest_default_instance_;
constexpr AlarmMember::AlarmMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : memberid_(uint64_t{0u})
  , alarm_(0)
{}
struct AlarmMemberDefaultTypeInternal {
  constexpr AlarmMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlarmMemberDefaultTypeInternal() {}
  union {
    AlarmMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlarmMemberDefaultTypeInternal _AlarmMember_default_instance_;
constexpr AlarmResponse::AlarmResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alarms_()
  , header_(nullptr){}
struct AlarmResponseDefaultTypeInternal {
  constexpr AlarmResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlarmResponseDefaultTypeInternal() {}
  union {
    AlarmResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlarmResponseDefaultTypeInternal _AlarmResponse_default_instance_;
constexpr StatusRequest::StatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StatusRequestDefaultTypeInternal {
  constexpr StatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusRequestDefaultTypeInternal() {}
  union {
    StatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
constexpr StatusResponse::StatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , dbsize_(int64_t{0})
  , leader_(uint64_t{0u})
  , raftindex_(uint64_t{0u})
  , raftterm_(uint64_t{0u}){}
struct StatusResponseDefaultTypeInternal {
  constexpr StatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
constexpr AuthEnableRequest::AuthEnableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AuthEnableRequestDefaultTypeInternal {
  constexpr AuthEnableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthEnableRequestDefaultTypeInternal() {}
  union {
    AuthEnableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthEnableRequestDefaultTypeInternal _AuthEnableRequest_default_instance_;
constexpr AuthDisableRequest::AuthDisableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AuthDisableRequestDefaultTypeInternal {
  constexpr AuthDisableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthDisableRequestDefaultTypeInternal() {}
  union {
    AuthDisableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthDisableRequestDefaultTypeInternal _AuthDisableRequest_default_instance_;
constexpr AuthenticateRequest::AuthenticateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthenticateRequestDefaultTypeInternal {
  constexpr AuthenticateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticateRequestDefaultTypeInternal() {}
  union {
    AuthenticateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticateRequestDefaultTypeInternal _AuthenticateRequest_default_instance_;
constexpr AuthUserAddRequest::AuthUserAddRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthUserAddRequestDefaultTypeInternal {
  constexpr AuthUserAddRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserAddRequestDefaultTypeInternal() {}
  union {
    AuthUserAddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserAddRequestDefaultTypeInternal _AuthUserAddRequest_default_instance_;
constexpr AuthUserGetRequest::AuthUserGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthUserGetRequestDefaultTypeInternal {
  constexpr AuthUserGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserGetRequestDefaultTypeInternal() {}
  union {
    AuthUserGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserGetRequestDefaultTypeInternal _AuthUserGetRequest_default_instance_;
constexpr AuthUserDeleteRequest::AuthUserDeleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthUserDeleteRequestDefaultTypeInternal {
  constexpr AuthUserDeleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserDeleteRequestDefaultTypeInternal() {}
  union {
    AuthUserDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserDeleteRequestDefaultTypeInternal _AuthUserDeleteRequest_default_instance_;
constexpr AuthUserChangePasswordRequest::AuthUserChangePasswordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthUserChangePasswordRequestDefaultTypeInternal {
  constexpr AuthUserChangePasswordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserChangePasswordRequestDefaultTypeInternal() {}
  union {
    AuthUserChangePasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserChangePasswordRequestDefaultTypeInternal _AuthUserChangePasswordRequest_default_instance_;
constexpr AuthUserGrantRoleRequest::AuthUserGrantRoleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthUserGrantRoleRequestDefaultTypeInternal {
  constexpr AuthUserGrantRoleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserGrantRoleRequestDefaultTypeInternal() {}
  union {
    AuthUserGrantRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserGrantRoleRequestDefaultTypeInternal _AuthUserGrantRoleRequest_default_instance_;
constexpr AuthUserRevokeRoleRequest::AuthUserRevokeRoleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthUserRevokeRoleRequestDefaultTypeInternal {
  constexpr AuthUserRevokeRoleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserRevokeRoleRequestDefaultTypeInternal() {}
  union {
    AuthUserRevokeRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserRevokeRoleRequestDefaultTypeInternal _AuthUserRevokeRoleRequest_default_instance_;
constexpr AuthRoleAddRequest::AuthRoleAddRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthRoleAddRequestDefaultTypeInternal {
  constexpr AuthRoleAddRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleAddRequestDefaultTypeInternal() {}
  union {
    AuthRoleAddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleAddRequestDefaultTypeInternal _AuthRoleAddRequest_default_instance_;
constexpr AuthRoleGetRequest::AuthRoleGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthRoleGetRequestDefaultTypeInternal {
  constexpr AuthRoleGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleGetRequestDefaultTypeInternal() {}
  union {
    AuthRoleGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleGetRequestDefaultTypeInternal _AuthRoleGetRequest_default_instance_;
constexpr AuthUserListRequest::AuthUserListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AuthUserListRequestDefaultTypeInternal {
  constexpr AuthUserListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserListRequestDefaultTypeInternal() {}
  union {
    AuthUserListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserListRequestDefaultTypeInternal _AuthUserListRequest_default_instance_;
constexpr AuthRoleListRequest::AuthRoleListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AuthRoleListRequestDefaultTypeInternal {
  constexpr AuthRoleListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleListRequestDefaultTypeInternal() {}
  union {
    AuthRoleListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleListRequestDefaultTypeInternal _AuthRoleListRequest_default_instance_;
constexpr AuthRoleDeleteRequest::AuthRoleDeleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthRoleDeleteRequestDefaultTypeInternal {
  constexpr AuthRoleDeleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleDeleteRequestDefaultTypeInternal() {}
  union {
    AuthRoleDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleDeleteRequestDefaultTypeInternal _AuthRoleDeleteRequest_default_instance_;
constexpr AuthRoleGrantPermissionRequest::AuthRoleGrantPermissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , perm_(nullptr){}
struct AuthRoleGrantPermissionRequestDefaultTypeInternal {
  constexpr AuthRoleGrantPermissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleGrantPermissionRequestDefaultTypeInternal() {}
  union {
    AuthRoleGrantPermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleGrantPermissionRequestDefaultTypeInternal _AuthRoleGrantPermissionRequest_default_instance_;
constexpr AuthRoleRevokePermissionRequest::AuthRoleRevokePermissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_end_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthRoleRevokePermissionRequestDefaultTypeInternal {
  constexpr AuthRoleRevokePermissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleRevokePermissionRequestDefaultTypeInternal() {}
  union {
    AuthRoleRevokePermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleRevokePermissionRequestDefaultTypeInternal _AuthRoleRevokePermissionRequest_default_instance_;
constexpr AuthEnableResponse::AuthEnableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthEnableResponseDefaultTypeInternal {
  constexpr AuthEnableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthEnableResponseDefaultTypeInternal() {}
  union {
    AuthEnableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthEnableResponseDefaultTypeInternal _AuthEnableResponse_default_instance_;
constexpr AuthDisableResponse::AuthDisableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthDisableResponseDefaultTypeInternal {
  constexpr AuthDisableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthDisableResponseDefaultTypeInternal() {}
  union {
    AuthDisableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthDisableResponseDefaultTypeInternal _AuthDisableResponse_default_instance_;
constexpr AuthenticateResponse::AuthenticateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct AuthenticateResponseDefaultTypeInternal {
  constexpr AuthenticateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticateResponseDefaultTypeInternal() {}
  union {
    AuthenticateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticateResponseDefaultTypeInternal _AuthenticateResponse_default_instance_;
constexpr AuthUserAddResponse::AuthUserAddResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthUserAddResponseDefaultTypeInternal {
  constexpr AuthUserAddResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserAddResponseDefaultTypeInternal() {}
  union {
    AuthUserAddResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserAddResponseDefaultTypeInternal _AuthUserAddResponse_default_instance_;
constexpr AuthUserGetResponse::AuthUserGetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , header_(nullptr){}
struct AuthUserGetResponseDefaultTypeInternal {
  constexpr AuthUserGetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserGetResponseDefaultTypeInternal() {}
  union {
    AuthUserGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserGetResponseDefaultTypeInternal _AuthUserGetResponse_default_instance_;
constexpr AuthUserDeleteResponse::AuthUserDeleteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthUserDeleteResponseDefaultTypeInternal {
  constexpr AuthUserDeleteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserDeleteResponseDefaultTypeInternal() {}
  union {
    AuthUserDeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserDeleteResponseDefaultTypeInternal _AuthUserDeleteResponse_default_instance_;
constexpr AuthUserChangePasswordResponse::AuthUserChangePasswordResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthUserChangePasswordResponseDefaultTypeInternal {
  constexpr AuthUserChangePasswordResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserChangePasswordResponseDefaultTypeInternal() {}
  union {
    AuthUserChangePasswordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserChangePasswordResponseDefaultTypeInternal _AuthUserChangePasswordResponse_default_instance_;
constexpr AuthUserGrantRoleResponse::AuthUserGrantRoleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthUserGrantRoleResponseDefaultTypeInternal {
  constexpr AuthUserGrantRoleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserGrantRoleResponseDefaultTypeInternal() {}
  union {
    AuthUserGrantRoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserGrantRoleResponseDefaultTypeInternal _AuthUserGrantRoleResponse_default_instance_;
constexpr AuthUserRevokeRoleResponse::AuthUserRevokeRoleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthUserRevokeRoleResponseDefaultTypeInternal {
  constexpr AuthUserRevokeRoleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserRevokeRoleResponseDefaultTypeInternal() {}
  union {
    AuthUserRevokeRoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserRevokeRoleResponseDefaultTypeInternal _AuthUserRevokeRoleResponse_default_instance_;
constexpr AuthRoleAddResponse::AuthRoleAddResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthRoleAddResponseDefaultTypeInternal {
  constexpr AuthRoleAddResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleAddResponseDefaultTypeInternal() {}
  union {
    AuthRoleAddResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleAddResponseDefaultTypeInternal _AuthRoleAddResponse_default_instance_;
constexpr AuthRoleGetResponse::AuthRoleGetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : perm_()
  , header_(nullptr){}
struct AuthRoleGetResponseDefaultTypeInternal {
  constexpr AuthRoleGetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleGetResponseDefaultTypeInternal() {}
  union {
    AuthRoleGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleGetResponseDefaultTypeInternal _AuthRoleGetResponse_default_instance_;
constexpr AuthRoleListResponse::AuthRoleListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , header_(nullptr){}
struct AuthRoleListResponseDefaultTypeInternal {
  constexpr AuthRoleListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleListResponseDefaultTypeInternal() {}
  union {
    AuthRoleListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleListResponseDefaultTypeInternal _AuthRoleListResponse_default_instance_;
constexpr AuthUserListResponse::AuthUserListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_()
  , header_(nullptr){}
struct AuthUserListResponseDefaultTypeInternal {
  constexpr AuthUserListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthUserListResponseDefaultTypeInternal() {}
  union {
    AuthUserListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthUserListResponseDefaultTypeInternal _AuthUserListResponse_default_instance_;
constexpr AuthRoleDeleteResponse::AuthRoleDeleteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthRoleDeleteResponseDefaultTypeInternal {
  constexpr AuthRoleDeleteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleDeleteResponseDefaultTypeInternal() {}
  union {
    AuthRoleDeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleDeleteResponseDefaultTypeInternal _AuthRoleDeleteResponse_default_instance_;
constexpr AuthRoleGrantPermissionResponse::AuthRoleGrantPermissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthRoleGrantPermissionResponseDefaultTypeInternal {
  constexpr AuthRoleGrantPermissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleGrantPermissionResponseDefaultTypeInternal() {}
  union {
    AuthRoleGrantPermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleGrantPermissionResponseDefaultTypeInternal _AuthRoleGrantPermissionResponse_default_instance_;
constexpr AuthRoleRevokePermissionResponse::AuthRoleRevokePermissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct AuthRoleRevokePermissionResponseDefaultTypeInternal {
  constexpr AuthRoleRevokePermissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRoleRevokePermissionResponseDefaultTypeInternal() {}
  union {
    AuthRoleRevokePermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRoleRevokePermissionResponseDefaultTypeInternal _AuthRoleRevokePermissionResponse_default_instance_;
}  // namespace etcdserverpb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_2eproto[85];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rpc_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_2eproto = nullptr;

const uint32_t TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, member_id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, raft_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, range_end_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, sort_order_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, sort_target_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, serializable_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, keys_only_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, count_only_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, min_mod_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, max_mod_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, min_create_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, max_create_revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, kvs_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, more_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, value_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, prev_kv_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, ignore_value_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, ignore_lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutResponse, prev_kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeRequest, range_end_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeRequest, prev_kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeResponse, deleted_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeResponse, prev_kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RequestOp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RequestOp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RequestOp, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseOp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseOp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseOp, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, result_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, target_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, range_end_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, target_union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnRequest, compare_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnRequest, success_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnRequest, failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnResponse, succeeded_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionRequest, revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionRequest, physical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVRequest, revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVResponse, hash_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVResponse, compact_revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashResponse, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotResponse, remaining_bytes_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchRequest, request_union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, range_end_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, start_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, progress_notify_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, prev_kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCancelRequest, watch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, watch_id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, created_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, canceled_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, compact_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, cancel_reason_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantRequest, ttl_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, ttl_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseRevokeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseRevokeRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseRevokeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseRevokeResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveResponse, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveResponse, ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveRequest, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, ttl_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, grantedttl_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseLeasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseStatus, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseLeasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseLeasesResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseLeasesResponse, leases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, peerurls_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, clienturls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddRequest, peerurls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddResponse, member_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddResponse, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveResponse, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateRequest, peerurls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateResponse, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberListResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberListResponse, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DefragmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DefragmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DefragmentResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MoveLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MoveLeaderRequest, targetid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MoveLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MoveLeaderResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmRequest, action_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmRequest, memberid_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmRequest, alarm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmMember, memberid_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmMember, alarm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmResponse, alarms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, version_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, dbsize_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, leader_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, raftindex_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, raftterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthEnableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthDisableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserDeleteRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleRequest, user_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleRequest, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleRequest, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleAddRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetRequest, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleDeleteRequest, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionRequest, perm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionRequest, role_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionRequest, range_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthEnableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthEnableResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthDisableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthDisableResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateResponse, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetResponse, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserDeleteResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleAddResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetResponse, perm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleListResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleListResponse, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserListResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserListResponse, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleDeleteResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionResponse, header_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::etcdserverpb::ResponseHeader)},
  { 10, -1, -1, sizeof(::etcdserverpb::RangeRequest)},
  { 29, -1, -1, sizeof(::etcdserverpb::RangeResponse)},
  { 39, -1, -1, sizeof(::etcdserverpb::PutRequest)},
  { 51, -1, -1, sizeof(::etcdserverpb::PutResponse)},
  { 59, -1, -1, sizeof(::etcdserverpb::DeleteRangeRequest)},
  { 68, -1, -1, sizeof(::etcdserverpb::DeleteRangeResponse)},
  { 77, -1, -1, sizeof(::etcdserverpb::RequestOp)},
  { 88, -1, -1, sizeof(::etcdserverpb::ResponseOp)},
  { 99, -1, -1, sizeof(::etcdserverpb::Compare)},
  { 115, -1, -1, sizeof(::etcdserverpb::TxnRequest)},
  { 124, -1, -1, sizeof(::etcdserverpb::TxnResponse)},
  { 133, -1, -1, sizeof(::etcdserverpb::CompactionRequest)},
  { 141, -1, -1, sizeof(::etcdserverpb::CompactionResponse)},
  { 148, -1, -1, sizeof(::etcdserverpb::HashRequest)},
  { 154, -1, -1, sizeof(::etcdserverpb::HashKVRequest)},
  { 161, -1, -1, sizeof(::etcdserverpb::HashKVResponse)},
  { 170, -1, -1, sizeof(::etcdserverpb::HashResponse)},
  { 178, -1, -1, sizeof(::etcdserverpb::SnapshotRequest)},
  { 184, -1, -1, sizeof(::etcdserverpb::SnapshotResponse)},
  { 193, -1, -1, sizeof(::etcdserverpb::WatchRequest)},
  { 202, -1, -1, sizeof(::etcdserverpb::WatchCreateRequest)},
  { 214, -1, -1, sizeof(::etcdserverpb::WatchCancelRequest)},
  { 221, -1, -1, sizeof(::etcdserverpb::WatchResponse)},
  { 234, -1, -1, sizeof(::etcdserverpb::LeaseGrantRequest)},
  { 242, -1, -1, sizeof(::etcdserverpb::LeaseGrantResponse)},
  { 252, -1, -1, sizeof(::etcdserverpb::LeaseRevokeRequest)},
  { 259, -1, -1, sizeof(::etcdserverpb::LeaseRevokeResponse)},
  { 266, -1, -1, sizeof(::etcdserverpb::LeaseKeepAliveRequest)},
  { 273, -1, -1, sizeof(::etcdserverpb::LeaseKeepAliveResponse)},
  { 282, -1, -1, sizeof(::etcdserverpb::LeaseTimeToLiveRequest)},
  { 290, -1, -1, sizeof(::etcdserverpb::LeaseTimeToLiveResponse)},
  { 301, -1, -1, sizeof(::etcdserverpb::LeaseLeasesRequest)},
  { 307, -1, -1, sizeof(::etcdserverpb::LeaseStatus)},
  { 314, -1, -1, sizeof(::etcdserverpb::LeaseLeasesResponse)},
  { 322, -1, -1, sizeof(::etcdserverpb::Member)},
  { 332, -1, -1, sizeof(::etcdserverpb::MemberAddRequest)},
  { 339, -1, -1, sizeof(::etcdserverpb::MemberAddResponse)},
  { 348, -1, -1, sizeof(::etcdserverpb::MemberRemoveRequest)},
  { 355, -1, -1, sizeof(::etcdserverpb::MemberRemoveResponse)},
  { 363, -1, -1, sizeof(::etcdserverpb::MemberUpdateRequest)},
  { 371, -1, -1, sizeof(::etcdserverpb::MemberUpdateResponse)},
  { 379, -1, -1, sizeof(::etcdserverpb::MemberListRequest)},
  { 385, -1, -1, sizeof(::etcdserverpb::MemberListResponse)},
  { 393, -1, -1, sizeof(::etcdserverpb::DefragmentRequest)},
  { 399, -1, -1, sizeof(::etcdserverpb::DefragmentResponse)},
  { 406, -1, -1, sizeof(::etcdserverpb::MoveLeaderRequest)},
  { 413, -1, -1, sizeof(::etcdserverpb::MoveLeaderResponse)},
  { 420, -1, -1, sizeof(::etcdserverpb::AlarmRequest)},
  { 429, -1, -1, sizeof(::etcdserverpb::AlarmMember)},
  { 437, -1, -1, sizeof(::etcdserverpb::AlarmResponse)},
  { 445, -1, -1, sizeof(::etcdserverpb::StatusRequest)},
  { 451, -1, -1, sizeof(::etcdserverpb::StatusResponse)},
  { 463, -1, -1, sizeof(::etcdserverpb::AuthEnableRequest)},
  { 469, -1, -1, sizeof(::etcdserverpb::AuthDisableRequest)},
  { 475, -1, -1, sizeof(::etcdserverpb::AuthenticateRequest)},
  { 483, -1, -1, sizeof(::etcdserverpb::AuthUserAddRequest)},
  { 491, -1, -1, sizeof(::etcdserverpb::AuthUserGetRequest)},
  { 498, -1, -1, sizeof(::etcdserverpb::AuthUserDeleteRequest)},
  { 505, -1, -1, sizeof(::etcdserverpb::AuthUserChangePasswordRequest)},
  { 513, -1, -1, sizeof(::etcdserverpb::AuthUserGrantRoleRequest)},
  { 521, -1, -1, sizeof(::etcdserverpb::AuthUserRevokeRoleRequest)},
  { 529, -1, -1, sizeof(::etcdserverpb::AuthRoleAddRequest)},
  { 536, -1, -1, sizeof(::etcdserverpb::AuthRoleGetRequest)},
  { 543, -1, -1, sizeof(::etcdserverpb::AuthUserListRequest)},
  { 549, -1, -1, sizeof(::etcdserverpb::AuthRoleListRequest)},
  { 555, -1, -1, sizeof(::etcdserverpb::AuthRoleDeleteRequest)},
  { 562, -1, -1, sizeof(::etcdserverpb::AuthRoleGrantPermissionRequest)},
  { 570, -1, -1, sizeof(::etcdserverpb::AuthRoleRevokePermissionRequest)},
  { 579, -1, -1, sizeof(::etcdserverpb::AuthEnableResponse)},
  { 586, -1, -1, sizeof(::etcdserverpb::AuthDisableResponse)},
  { 593, -1, -1, sizeof(::etcdserverpb::AuthenticateResponse)},
  { 601, -1, -1, sizeof(::etcdserverpb::AuthUserAddResponse)},
  { 608, -1, -1, sizeof(::etcdserverpb::AuthUserGetResponse)},
  { 616, -1, -1, sizeof(::etcdserverpb::AuthUserDeleteResponse)},
  { 623, -1, -1, sizeof(::etcdserverpb::AuthUserChangePasswordResponse)},
  { 630, -1, -1, sizeof(::etcdserverpb::AuthUserGrantRoleResponse)},
  { 637, -1, -1, sizeof(::etcdserverpb::AuthUserRevokeRoleResponse)},
  { 644, -1, -1, sizeof(::etcdserverpb::AuthRoleAddResponse)},
  { 651, -1, -1, sizeof(::etcdserverpb::AuthRoleGetResponse)},
  { 659, -1, -1, sizeof(::etcdserverpb::AuthRoleListResponse)},
  { 667, -1, -1, sizeof(::etcdserverpb::AuthUserListResponse)},
  { 675, -1, -1, sizeof(::etcdserverpb::AuthRoleDeleteResponse)},
  { 682, -1, -1, sizeof(::etcdserverpb::AuthRoleGrantPermissionResponse)},
  { 689, -1, -1, sizeof(::etcdserverpb::AuthRoleRevokePermissionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_ResponseHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_RangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_RangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_PutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_PutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_DeleteRangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_DeleteRangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_RequestOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_ResponseOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_Compare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_TxnRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_TxnResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_CompactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_CompactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_HashRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_HashKVRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_HashKVResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_HashResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_SnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_SnapshotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_WatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_WatchCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_WatchCancelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_WatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseGrantRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseGrantResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseRevokeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseRevokeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseKeepAliveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseKeepAliveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseTimeToLiveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseTimeToLiveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseLeasesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseLeasesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberAddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberAddResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberRemoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberRemoveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberUpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_DefragmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_DefragmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MoveLeaderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MoveLeaderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AlarmRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AlarmMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AlarmResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_StatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthEnableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthDisableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthenticateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserAddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserChangePasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserGrantRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserRevokeRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleAddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleGrantPermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleRevokePermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthEnableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthDisableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthenticateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserAddResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserChangePasswordResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserGrantRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserRevokeRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleAddResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleGrantPermissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleRevokePermissionResponse_default_instance_),
};

const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\trpc.proto\022\014etcdserverpb\032\010kv.proto\032\naut"
  "h.proto\"\\\n\016ResponseHeader\022\022\n\ncluster_id\030"
  "\001 \001(\004\022\021\n\tmember_id\030\002 \001(\004\022\020\n\010revision\030\003 \001"
  "(\003\022\021\n\traft_term\030\004 \001(\004\"\344\003\n\014RangeRequest\022\013"
  "\n\003key\030\001 \001(\014\022\021\n\trange_end\030\002 \001(\014\022\r\n\005limit\030"
  "\003 \001(\003\022\020\n\010revision\030\004 \001(\003\0228\n\nsort_order\030\005 "
  "\001(\0162$.etcdserverpb.RangeRequest.SortOrde"
  "r\022:\n\013sort_target\030\006 \001(\0162%.etcdserverpb.Ra"
  "ngeRequest.SortTarget\022\024\n\014serializable\030\007 "
  "\001(\010\022\021\n\tkeys_only\030\010 \001(\010\022\022\n\ncount_only\030\t \001"
  "(\010\022\030\n\020min_mod_revision\030\n \001(\003\022\030\n\020max_mod_"
  "revision\030\013 \001(\003\022\033\n\023min_create_revision\030\014 "
  "\001(\003\022\033\n\023max_create_revision\030\r \001(\003\".\n\tSort"
  "Order\022\010\n\004NONE\020\000\022\n\n\006ASCEND\020\001\022\013\n\007DESCEND\020\002"
  "\"B\n\nSortTarget\022\007\n\003KEY\020\000\022\013\n\007VERSION\020\001\022\n\n\006"
  "CREATE\020\002\022\007\n\003MOD\020\003\022\t\n\005VALUE\020\004\"y\n\rRangeRes"
  "ponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Res"
  "ponseHeader\022\035\n\003kvs\030\002 \003(\0132\020.mvccpb.KeyVal"
  "ue\022\014\n\004more\030\003 \001(\010\022\r\n\005count\030\004 \001(\003\"t\n\nPutRe"
  "quest\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\r\n\005lea"
  "se\030\003 \001(\003\022\017\n\007prev_kv\030\004 \001(\010\022\024\n\014ignore_valu"
  "e\030\005 \001(\010\022\024\n\014ignore_lease\030\006 \001(\010\"^\n\013PutResp"
  "onse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Resp"
  "onseHeader\022!\n\007prev_kv\030\002 \001(\0132\020.mvccpb.Key"
  "Value\"E\n\022DeleteRangeRequest\022\013\n\003key\030\001 \001(\014"
  "\022\021\n\trange_end\030\002 \001(\014\022\017\n\007prev_kv\030\003 \001(\010\"x\n\023"
  "DeleteRangeResponse\022,\n\006header\030\001 \001(\0132\034.et"
  "cdserverpb.ResponseHeader\022\017\n\007deleted\030\002 \001"
  "(\003\022\"\n\010prev_kvs\030\003 \003(\0132\020.mvccpb.KeyValue\"\357"
  "\001\n\tRequestOp\0223\n\rrequest_range\030\001 \001(\0132\032.et"
  "cdserverpb.RangeRequestH\000\022/\n\013request_put"
  "\030\002 \001(\0132\030.etcdserverpb.PutRequestH\000\022@\n\024re"
  "quest_delete_range\030\003 \001(\0132 .etcdserverpb."
  "DeleteRangeRequestH\000\022/\n\013request_txn\030\004 \001("
  "\0132\030.etcdserverpb.TxnRequestH\000B\t\n\007request"
  "\"\371\001\n\nResponseOp\0225\n\016response_range\030\001 \001(\0132"
  "\033.etcdserverpb.RangeResponseH\000\0221\n\014respon"
  "se_put\030\002 \001(\0132\031.etcdserverpb.PutResponseH"
  "\000\022B\n\025response_delete_range\030\003 \001(\0132!.etcds"
  "erverpb.DeleteRangeResponseH\000\0221\n\014respons"
  "e_txn\030\004 \001(\0132\031.etcdserverpb.TxnResponseH\000"
  "B\n\n\010response\"\226\003\n\007Compare\0223\n\006result\030\001 \001(\016"
  "2#.etcdserverpb.Compare.CompareResult\0223\n"
  "\006target\030\002 \001(\0162#.etcdserverpb.Compare.Com"
  "pareTarget\022\013\n\003key\030\003 \001(\014\022\021\n\007version\030\004 \001(\003"
  "H\000\022\031\n\017create_revision\030\005 \001(\003H\000\022\026\n\014mod_rev"
  "ision\030\006 \001(\003H\000\022\017\n\005value\030\007 \001(\014H\000\022\017\n\005lease\030"
  "\010 \001(\003H\000\022\021\n\trange_end\030@ \001(\014\"@\n\rCompareRes"
  "ult\022\t\n\005EQUAL\020\000\022\013\n\007GREATER\020\001\022\010\n\004LESS\020\002\022\r\n"
  "\tNOT_EQUAL\020\003\"G\n\rCompareTarget\022\013\n\007VERSION"
  "\020\000\022\n\n\006CREATE\020\001\022\007\n\003MOD\020\002\022\t\n\005VALUE\020\003\022\t\n\005LE"
  "ASE\020\004B\016\n\014target_union\"\210\001\n\nTxnRequest\022&\n\007"
  "compare\030\001 \003(\0132\025.etcdserverpb.Compare\022(\n\007"
  "success\030\002 \003(\0132\027.etcdserverpb.RequestOp\022("
  "\n\007failure\030\003 \003(\0132\027.etcdserverpb.RequestOp"
  "\"{\n\013TxnResponse\022,\n\006header\030\001 \001(\0132\034.etcdse"
  "rverpb.ResponseHeader\022\021\n\tsucceeded\030\002 \001(\010"
  "\022+\n\tresponses\030\003 \003(\0132\030.etcdserverpb.Respo"
  "nseOp\"7\n\021CompactionRequest\022\020\n\010revision\030\001"
  " \001(\003\022\020\n\010physical\030\002 \001(\010\"B\n\022CompactionResp"
  "onse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Resp"
  "onseHeader\"\r\n\013HashRequest\"!\n\rHashKVReque"
  "st\022\020\n\010revision\030\001 \001(\003\"f\n\016HashKVResponse\022,"
  "\n\006header\030\001 \001(\0132\034.etcdserverpb.ResponseHe"
  "ader\022\014\n\004hash\030\002 \001(\r\022\030\n\020compact_revision\030\003"
  " \001(\003\"J\n\014HashResponse\022,\n\006header\030\001 \001(\0132\034.e"
  "tcdserverpb.ResponseHeader\022\014\n\004hash\030\002 \001(\r"
  "\"\021\n\017SnapshotRequest\"g\n\020SnapshotResponse\022"
  ",\n\006header\030\001 \001(\0132\034.etcdserverpb.ResponseH"
  "eader\022\027\n\017remaining_bytes\030\002 \001(\004\022\014\n\004blob\030\003"
  " \001(\014\"\227\001\n\014WatchRequest\022:\n\016create_request\030"
  "\001 \001(\0132 .etcdserverpb.WatchCreateRequestH"
  "\000\022:\n\016cancel_request\030\002 \001(\0132 .etcdserverpb"
  ".WatchCancelRequestH\000B\017\n\rrequest_union\"\333"
  "\001\n\022WatchCreateRequest\022\013\n\003key\030\001 \001(\014\022\021\n\tra"
  "nge_end\030\002 \001(\014\022\026\n\016start_revision\030\003 \001(\003\022\027\n"
  "\017progress_notify\030\004 \001(\010\022<\n\007filters\030\005 \003(\0162"
  "+.etcdserverpb.WatchCreateRequest.Filter"
  "Type\022\017\n\007prev_kv\030\006 \001(\010\"%\n\nFilterType\022\t\n\005N"
  "OPUT\020\000\022\014\n\010NODELETE\020\001\"&\n\022WatchCancelReque"
  "st\022\020\n\010watch_id\030\001 \001(\003\"\302\001\n\rWatchResponse\022,"
  "\n\006header\030\001 \001(\0132\034.etcdserverpb.ResponseHe"
  "ader\022\020\n\010watch_id\030\002 \001(\003\022\017\n\007created\030\003 \001(\010\022"
  "\020\n\010canceled\030\004 \001(\010\022\030\n\020compact_revision\030\005 "
  "\001(\003\022\025\n\rcancel_reason\030\006 \001(\t\022\035\n\006events\030\013 \003"
  "(\0132\r.mvccpb.Event\",\n\021LeaseGrantRequest\022\013"
  "\n\003TTL\030\001 \001(\003\022\n\n\002ID\030\002 \001(\003\"j\n\022LeaseGrantRes"
  "ponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Res"
  "ponseHeader\022\n\n\002ID\030\002 \001(\003\022\013\n\003TTL\030\003 \001(\003\022\r\n\005"
  "error\030\004 \001(\t\" \n\022LeaseRevokeRequest\022\n\n\002ID\030"
  "\001 \001(\003\"C\n\023LeaseRevokeResponse\022,\n\006header\030\001"
  " \001(\0132\034.etcdserverpb.ResponseHeader\"#\n\025Le"
  "aseKeepAliveRequest\022\n\n\002ID\030\001 \001(\003\"_\n\026Lease"
  "KeepAliveResponse\022,\n\006header\030\001 \001(\0132\034.etcd"
  "serverpb.ResponseHeader\022\n\n\002ID\030\002 \001(\003\022\013\n\003T"
  "TL\030\003 \001(\003\"2\n\026LeaseTimeToLiveRequest\022\n\n\002ID"
  "\030\001 \001(\003\022\014\n\004keys\030\002 \001(\010\"\202\001\n\027LeaseTimeToLive"
  "Response\022,\n\006header\030\001 \001(\0132\034.etcdserverpb."
  "ResponseHeader\022\n\n\002ID\030\002 \001(\003\022\013\n\003TTL\030\003 \001(\003\022"
  "\022\n\ngrantedTTL\030\004 \001(\003\022\014\n\004keys\030\005 \003(\014\"\024\n\022Lea"
  "seLeasesRequest\"\031\n\013LeaseStatus\022\n\n\002ID\030\001 \001"
  "(\003\"n\n\023LeaseLeasesResponse\022,\n\006header\030\001 \001("
  "\0132\034.etcdserverpb.ResponseHeader\022)\n\006lease"
  "s\030\002 \003(\0132\031.etcdserverpb.LeaseStatus\"H\n\006Me"
  "mber\022\n\n\002ID\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\020\n\010peerUR"
  "Ls\030\003 \003(\t\022\022\n\nclientURLs\030\004 \003(\t\"$\n\020MemberAd"
  "dRequest\022\020\n\010peerURLs\030\001 \003(\t\"\216\001\n\021MemberAdd"
  "Response\022,\n\006header\030\001 \001(\0132\034.etcdserverpb."
  "ResponseHeader\022$\n\006member\030\002 \001(\0132\024.etcdser"
  "verpb.Member\022%\n\007members\030\003 \003(\0132\024.etcdserv"
  "erpb.Member\"!\n\023MemberRemoveRequest\022\n\n\002ID"
  "\030\001 \001(\004\"k\n\024MemberRemoveResponse\022,\n\006header"
  "\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\022%\n\007"
  "members\030\002 \003(\0132\024.etcdserverpb.Member\"3\n\023M"
  "emberUpdateRequest\022\n\n\002ID\030\001 \001(\004\022\020\n\010peerUR"
  "Ls\030\002 \003(\t\"k\n\024MemberUpdateResponse\022,\n\006head"
  "er\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\022%"
  "\n\007members\030\002 \003(\0132\024.etcdserverpb.Member\"\023\n"
  "\021MemberListRequest\"i\n\022MemberListResponse"
  "\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Response"
  "Header\022%\n\007members\030\002 \003(\0132\024.etcdserverpb.M"
  "ember\"\023\n\021DefragmentRequest\"B\n\022Defragment"
  "Response\022,\n\006header\030\001 \001(\0132\034.etcdserverpb."
  "ResponseHeader\"%\n\021MoveLeaderRequest\022\020\n\010t"
  "argetID\030\001 \001(\004\"B\n\022MoveLeaderResponse\022,\n\006h"
  "eader\030\001 \001(\0132\034.etcdserverpb.ResponseHeade"
  "r\"\266\001\n\014AlarmRequest\0226\n\006action\030\001 \001(\0162&.etc"
  "dserverpb.AlarmRequest.AlarmAction\022\020\n\010me"
  "mberID\030\002 \001(\004\022&\n\005alarm\030\003 \001(\0162\027.etcdserver"
  "pb.AlarmType\"4\n\013AlarmAction\022\007\n\003GET\020\000\022\014\n\010"
  "ACTIVATE\020\001\022\016\n\nDEACTIVATE\020\002\"G\n\013AlarmMembe"
  "r\022\020\n\010memberID\030\001 \001(\004\022&\n\005alarm\030\002 \001(\0162\027.etc"
  "dserverpb.AlarmType\"h\n\rAlarmResponse\022,\n\006"
  "header\030\001 \001(\0132\034.etcdserverpb.ResponseHead"
  "er\022)\n\006alarms\030\002 \003(\0132\031.etcdserverpb.AlarmM"
  "ember\"\017\n\rStatusRequest\"\224\001\n\016StatusRespons"
  "e\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respons"
  "eHeader\022\017\n\007version\030\002 \001(\t\022\016\n\006dbSize\030\003 \001(\003"
  "\022\016\n\006leader\030\004 \001(\004\022\021\n\traftIndex\030\005 \001(\004\022\020\n\010r"
  "aftTerm\030\006 \001(\004\"\023\n\021AuthEnableRequest\"\024\n\022Au"
  "thDisableRequest\"5\n\023AuthenticateRequest\022"
  "\014\n\004name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"4\n\022AuthU"
  "serAddRequest\022\014\n\004name\030\001 \001(\t\022\020\n\010password\030"
  "\002 \001(\t\"\"\n\022AuthUserGetRequest\022\014\n\004name\030\001 \001("
  "\t\"%\n\025AuthUserDeleteRequest\022\014\n\004name\030\001 \001(\t"
  "\"\?\n\035AuthUserChangePasswordRequest\022\014\n\004nam"
  "e\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"6\n\030AuthUserGra"
  "ntRoleRequest\022\014\n\004user\030\001 \001(\t\022\014\n\004role\030\002 \001("
  "\t\"7\n\031AuthUserRevokeRoleRequest\022\014\n\004name\030\001"
  " \001(\t\022\014\n\004role\030\002 \001(\t\"\"\n\022AuthRoleAddRequest"
  "\022\014\n\004name\030\001 \001(\t\"\"\n\022AuthRoleGetRequest\022\014\n\004"
  "role\030\001 \001(\t\"\025\n\023AuthUserListRequest\"\025\n\023Aut"
  "hRoleListRequest\"%\n\025AuthRoleDeleteReques"
  "t\022\014\n\004role\030\001 \001(\t\"P\n\036AuthRoleGrantPermissi"
  "onRequest\022\014\n\004name\030\001 \001(\t\022 \n\004perm\030\002 \001(\0132\022."
  "authpb.Permission\"O\n\037AuthRoleRevokePermi"
  "ssionRequest\022\014\n\004role\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022"
  "\021\n\trange_end\030\003 \001(\t\"B\n\022AuthEnableResponse"
  "\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Response"
  "Header\"C\n\023AuthDisableResponse\022,\n\006header\030"
  "\001 \001(\0132\034.etcdserverpb.ResponseHeader\"S\n\024A"
  "uthenticateResponse\022,\n\006header\030\001 \001(\0132\034.et"
  "cdserverpb.ResponseHeader\022\r\n\005token\030\002 \001(\t"
  "\"C\n\023AuthUserAddResponse\022,\n\006header\030\001 \001(\0132"
  "\034.etcdserverpb.ResponseHeader\"R\n\023AuthUse"
  "rGetResponse\022,\n\006header\030\001 \001(\0132\034.etcdserve"
  "rpb.ResponseHeader\022\r\n\005roles\030\002 \003(\t\"F\n\026Aut"
  "hUserDeleteResponse\022,\n\006header\030\001 \001(\0132\034.et"
  "cdserverpb.ResponseHeader\"N\n\036AuthUserCha"
  "ngePasswordResponse\022,\n\006header\030\001 \001(\0132\034.et"
  "cdserverpb.ResponseHeader\"I\n\031AuthUserGra"
  "ntRoleResponse\022,\n\006header\030\001 \001(\0132\034.etcdser"
  "verpb.ResponseHeader\"J\n\032AuthUserRevokeRo"
  "leResponse\022,\n\006header\030\001 \001(\0132\034.etcdserverp"
  "b.ResponseHeader\"C\n\023AuthRoleAddResponse\022"
  ",\n\006header\030\001 \001(\0132\034.etcdserverpb.ResponseH"
  "eader\"e\n\023AuthRoleGetResponse\022,\n\006header\030\001"
  " \001(\0132\034.etcdserverpb.ResponseHeader\022 \n\004pe"
  "rm\030\002 \003(\0132\022.authpb.Permission\"S\n\024AuthRole"
  "ListResponse\022,\n\006header\030\001 \001(\0132\034.etcdserve"
  "rpb.ResponseHeader\022\r\n\005roles\030\002 \003(\t\"S\n\024Aut"
  "hUserListResponse\022,\n\006header\030\001 \001(\0132\034.etcd"
  "serverpb.ResponseHeader\022\r\n\005users\030\002 \003(\t\"F"
  "\n\026AuthRoleDeleteResponse\022,\n\006header\030\001 \001(\013"
  "2\034.etcdserverpb.ResponseHeader\"O\n\037AuthRo"
  "leGrantPermissionResponse\022,\n\006header\030\001 \001("
  "\0132\034.etcdserverpb.ResponseHeader\"P\n AuthR"
  "oleRevokePermissionResponse\022,\n\006header\030\001 "
  "\001(\0132\034.etcdserverpb.ResponseHeader*/\n\tAla"
  "rmType\022\010\n\004NONE\020\000\022\013\n\007NOSPACE\020\001\022\013\n\007CORRUPT"
  "\020\0022\352\002\n\002KV\022B\n\005Range\022\032.etcdserverpb.RangeR"
  "equest\032\033.etcdserverpb.RangeResponse\"\000\022<\n"
  "\003Put\022\030.etcdserverpb.PutRequest\032\031.etcdser"
  "verpb.PutResponse\"\000\022T\n\013DeleteRange\022 .etc"
  "dserverpb.DeleteRangeRequest\032!.etcdserve"
  "rpb.DeleteRangeResponse\"\000\022<\n\003Txn\022\030.etcds"
  "erverpb.TxnRequest\032\031.etcdserverpb.TxnRes"
  "ponse\"\000\022N\n\007Compact\022\037.etcdserverpb.Compac"
  "tionRequest\032 .etcdserverpb.CompactionRes"
  "ponse\"\0002O\n\005Watch\022F\n\005Watch\022\032.etcdserverpb"
  ".WatchRequest\032\033.etcdserverpb.WatchRespon"
  "se\"\000(\0010\0012\313\003\n\005Lease\022Q\n\nLeaseGrant\022\037.etcds"
  "erverpb.LeaseGrantRequest\032 .etcdserverpb"
  ".LeaseGrantResponse\"\000\022T\n\013LeaseRevoke\022 .e"
  "tcdserverpb.LeaseRevokeRequest\032!.etcdser"
  "verpb.LeaseRevokeResponse\"\000\022a\n\016LeaseKeep"
  "Alive\022#.etcdserverpb.LeaseKeepAliveReque"
  "st\032$.etcdserverpb.LeaseKeepAliveResponse"
  "\"\000(\0010\001\022`\n\017LeaseTimeToLive\022$.etcdserverpb"
  ".LeaseTimeToLiveRequest\032%.etcdserverpb.L"
  "easeTimeToLiveResponse\"\000\022T\n\013LeaseLeases\022"
  " .etcdserverpb.LeaseLeasesRequest\032!.etcd"
  "serverpb.LeaseLeasesResponse\"\0002\336\002\n\007Clust"
  "er\022N\n\tMemberAdd\022\036.etcdserverpb.MemberAdd"
  "Request\032\037.etcdserverpb.MemberAddResponse"
  "\"\000\022W\n\014MemberRemove\022!.etcdserverpb.Member"
  "RemoveRequest\032\".etcdserverpb.MemberRemov"
  "eResponse\"\000\022W\n\014MemberUpdate\022!.etcdserver"
  "pb.MemberUpdateRequest\032\".etcdserverpb.Me"
  "mberUpdateResponse\"\000\022Q\n\nMemberList\022\037.etc"
  "dserverpb.MemberListRequest\032 .etcdserver"
  "pb.MemberListResponse\"\0002\225\004\n\013Maintenance\022"
  "B\n\005Alarm\022\032.etcdserverpb.AlarmRequest\032\033.e"
  "tcdserverpb.AlarmResponse\"\000\022E\n\006Status\022\033."
  "etcdserverpb.StatusRequest\032\034.etcdserverp"
  "b.StatusResponse\"\000\022Q\n\nDefragment\022\037.etcds"
  "erverpb.DefragmentRequest\032 .etcdserverpb"
  ".DefragmentResponse\"\000\022\?\n\004Hash\022\031.etcdserv"
  "erpb.HashRequest\032\032.etcdserverpb.HashResp"
  "onse\"\000\022E\n\006HashKV\022\033.etcdserverpb.HashKVRe"
  "quest\032\034.etcdserverpb.HashKVResponse\"\000\022M\n"
  "\010Snapshot\022\035.etcdserverpb.SnapshotRequest"
  "\032\036.etcdserverpb.SnapshotResponse\"\0000\001\022Q\n\n"
  "MoveLeader\022\037.etcdserverpb.MoveLeaderRequ"
  "est\032 .etcdserverpb.MoveLeaderResponse\"\0002"
  "\335\013\n\004Auth\022Q\n\nAuthEnable\022\037.etcdserverpb.Au"
  "thEnableRequest\032 .etcdserverpb.AuthEnabl"
  "eResponse\"\000\022T\n\013AuthDisable\022 .etcdserverp"
  "b.AuthDisableRequest\032!.etcdserverpb.Auth"
  "DisableResponse\"\000\022W\n\014Authenticate\022!.etcd"
  "serverpb.AuthenticateRequest\032\".etcdserve"
  "rpb.AuthenticateResponse\"\000\022P\n\007UserAdd\022 ."
  "etcdserverpb.AuthUserAddRequest\032!.etcdse"
  "rverpb.AuthUserAddResponse\"\000\022P\n\007UserGet\022"
  " .etcdserverpb.AuthUserGetRequest\032!.etcd"
  "serverpb.AuthUserGetResponse\"\000\022S\n\010UserLi"
  "st\022!.etcdserverpb.AuthUserListRequest\032\"."
  "etcdserverpb.AuthUserListResponse\"\000\022Y\n\nU"
  "serDelete\022#.etcdserverpb.AuthUserDeleteR"
  "equest\032$.etcdserverpb.AuthUserDeleteResp"
  "onse\"\000\022q\n\022UserChangePassword\022+.etcdserve"
  "rpb.AuthUserChangePasswordRequest\032,.etcd"
  "serverpb.AuthUserChangePasswordResponse\""
  "\000\022b\n\rUserGrantRole\022&.etcdserverpb.AuthUs"
  "erGrantRoleRequest\032\'.etcdserverpb.AuthUs"
  "erGrantRoleResponse\"\000\022e\n\016UserRevokeRole\022"
  "\'.etcdserverpb.AuthUserRevokeRoleRequest"
  "\032(.etcdserverpb.AuthUserRevokeRoleRespon"
  "se\"\000\022P\n\007RoleAdd\022 .etcdserverpb.AuthRoleA"
  "ddRequest\032!.etcdserverpb.AuthRoleAddResp"
  "onse\"\000\022P\n\007RoleGet\022 .etcdserverpb.AuthRol"
  "eGetRequest\032!.etcdserverpb.AuthRoleGetRe"
  "sponse\"\000\022S\n\010RoleList\022!.etcdserverpb.Auth"
  "RoleListRequest\032\".etcdserverpb.AuthRoleL"
  "istResponse\"\000\022Y\n\nRoleDelete\022#.etcdserver"
  "pb.AuthRoleDeleteRequest\032$.etcdserverpb."
  "AuthRoleDeleteResponse\"\000\022t\n\023RoleGrantPer"
  "mission\022,.etcdserverpb.AuthRoleGrantPerm"
  "issionRequest\032-.etcdserverpb.AuthRoleGra"
  "ntPermissionResponse\"\000\022w\n\024RoleRevokePerm"
  "ission\022-.etcdserverpb.AuthRoleRevokePerm"
  "issionRequest\032..etcdserverpb.AuthRoleRev"
  "okePermissionResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_2eproto_deps[2] = {
  &::descriptor_table_auth_2eproto,
  &::descriptor_table_kv_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto = {
  false, false, 10911, descriptor_table_protodef_rpc_2eproto, "rpc.proto", 
  &descriptor_table_rpc_2eproto_once, descriptor_table_rpc_2eproto_deps, 2, 85,
  schemas, file_default_instances, TableStruct_rpc_2eproto::offsets,
  file_level_metadata_rpc_2eproto, file_level_enum_descriptors_rpc_2eproto, file_level_service_descriptors_rpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_rpc_2eproto_getter() {
  return &descriptor_table_rpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_rpc_2eproto(&descriptor_table_rpc_2eproto);
namespace etcdserverpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeRequest_SortOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[0];
}
bool RangeRequest_SortOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RangeRequest_SortOrder RangeRequest::NONE;
constexpr RangeRequest_SortOrder RangeRequest::ASCEND;
constexpr RangeRequest_SortOrder RangeRequest::DESCEND;
constexpr RangeRequest_SortOrder RangeRequest::SortOrder_MIN;
constexpr RangeRequest_SortOrder RangeRequest::SortOrder_MAX;
constexpr int RangeRequest::SortOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeRequest_SortTarget_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[1];
}
bool RangeRequest_SortTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RangeRequest_SortTarget RangeRequest::KEY;
constexpr RangeRequest_SortTarget RangeRequest::VERSION;
constexpr RangeRequest_SortTarget RangeRequest::CREATE;
constexpr RangeRequest_SortTarget RangeRequest::MOD;
constexpr RangeRequest_SortTarget RangeRequest::VALUE;
constexpr RangeRequest_SortTarget RangeRequest::SortTarget_MIN;
constexpr RangeRequest_SortTarget RangeRequest::SortTarget_MAX;
constexpr int RangeRequest::SortTarget_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_CompareResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[2];
}
bool Compare_CompareResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Compare_CompareResult Compare::EQUAL;
constexpr Compare_CompareResult Compare::GREATER;
constexpr Compare_CompareResult Compare::LESS;
constexpr Compare_CompareResult Compare::NOT_EQUAL;
constexpr Compare_CompareResult Compare::CompareResult_MIN;
constexpr Compare_CompareResult Compare::CompareResult_MAX;
constexpr int Compare::CompareResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_CompareTarget_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[3];
}
bool Compare_CompareTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Compare_CompareTarget Compare::VERSION;
constexpr Compare_CompareTarget Compare::CREATE;
constexpr Compare_CompareTarget Compare::MOD;
constexpr Compare_CompareTarget Compare::VALUE;
constexpr Compare_CompareTarget Compare::LEASE;
constexpr Compare_CompareTarget Compare::CompareTarget_MIN;
constexpr Compare_CompareTarget Compare::CompareTarget_MAX;
constexpr int Compare::CompareTarget_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchCreateRequest_FilterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[4];
}
bool WatchCreateRequest_FilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WatchCreateRequest_FilterType WatchCreateRequest::NOPUT;
constexpr WatchCreateRequest_FilterType WatchCreateRequest::NODELETE;
constexpr WatchCreateRequest_FilterType WatchCreateRequest::FilterType_MIN;
constexpr WatchCreateRequest_FilterType WatchCreateRequest::FilterType_MAX;
constexpr int WatchCreateRequest::FilterType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmRequest_AlarmAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[5];
}
bool AlarmRequest_AlarmAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AlarmRequest_AlarmAction AlarmRequest::GET;
constexpr AlarmRequest_AlarmAction AlarmRequest::ACTIVATE;
constexpr AlarmRequest_AlarmAction AlarmRequest::DEACTIVATE;
constexpr AlarmRequest_AlarmAction AlarmRequest::AlarmAction_MIN;
constexpr AlarmRequest_AlarmAction AlarmRequest::AlarmAction_MAX;
constexpr int AlarmRequest::AlarmAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[6];
}
bool AlarmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ResponseHeader::_Internal {
 public:
};

ResponseHeader::ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cluster_id_, &from.cluster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&raft_term_) -
    reinterpret_cast<char*>(&cluster_id_)) + sizeof(raft_term_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.ResponseHeader)
}

inline void ResponseHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cluster_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raft_term_) -
    reinterpret_cast<char*>(&cluster_id_)) + sizeof(raft_term_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:etcdserverpb.ResponseHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseHeader::ArenaDtor(void* object) {
  ResponseHeader* _this = reinterpret_cast< ResponseHeader* >(object);
  (void)_this;
}
void ResponseHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.ResponseHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raft_term_) -
      reinterpret_cast<char*>(&cluster_id_)) + sizeof(raft_term_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cluster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 raft_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          raft_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.ResponseHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->_internal_cluster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cluster_id(), target);
  }

  // uint64 member_id = 2;
  if (this->_internal_member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_member_id(), target);
  }

  // int64 revision = 3;
  if (this->_internal_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_revision(), target);
  }

  // uint64 raft_term = 4;
  if (this->_internal_raft_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_raft_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.ResponseHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->_internal_cluster_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cluster_id());
  }

  // uint64 member_id = 2;
  if (this->_internal_member_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_member_id());
  }

  // int64 revision = 3;
  if (this->_internal_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_revision());
  }

  // uint64 raft_term = 4;
  if (this->_internal_raft_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_raft_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseHeader::GetClassData() const { return &_class_data_; }

void ResponseHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseHeader *>(to)->MergeFrom(
      static_cast<const ResponseHeader &>(from));
}


void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cluster_id() != 0) {
    _internal_set_cluster_id(from._internal_cluster_id());
  }
  if (from._internal_member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  if (from._internal_revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from._internal_raft_term() != 0) {
    _internal_set_raft_term(from._internal_raft_term());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseHeader, raft_term_)
      + sizeof(ResponseHeader::raft_term_)
      - PROTOBUF_FIELD_OFFSET(ResponseHeader, cluster_id_)>(
          reinterpret_cast<char*>(&cluster_id_),
          reinterpret_cast<char*>(&other->cluster_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[0]);
}

// ===================================================================

class RangeRequest::_Internal {
 public:
};

RangeRequest::RangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.RangeRequest)
}
RangeRequest::RangeRequest(const RangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_range_end().empty()) {
    range_end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_range_end(), 
      GetArenaForAllocation());
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_only_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(count_only_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.RangeRequest)
}

inline void RangeRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_only_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(count_only_));
}

RangeRequest::~RangeRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.RangeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RangeRequest::ArenaDtor(void* object) {
  RangeRequest* _this = reinterpret_cast< RangeRequest* >(object);
  (void)_this;
}
void RangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.RangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  range_end_.ClearToEmpty();
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_only_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(count_only_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_range_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 revision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sort_order(static_cast<::etcdserverpb::RangeRequest_SortOrder>(val));
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sort_target(static_cast<::etcdserverpb::RangeRequest_SortTarget>(val));
        } else
          goto handle_unusual;
        continue;
      // bool serializable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          serializable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool keys_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          keys_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool count_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          count_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 min_mod_revision = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          min_mod_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_mod_revision = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          max_mod_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 min_create_revision = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          min_create_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_create_revision = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          max_create_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.RangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes range_end = 2;
  if (!this->_internal_range_end().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_range_end(), target);
  }

  // int64 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  // int64 revision = 4;
  if (this->_internal_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_revision(), target);
  }

  // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
  if (this->_internal_sort_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sort_order(), target);
  }

  // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
  if (this->_internal_sort_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sort_target(), target);
  }

  // bool serializable = 7;
  if (this->_internal_serializable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_serializable(), target);
  }

  // bool keys_only = 8;
  if (this->_internal_keys_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_keys_only(), target);
  }

  // bool count_only = 9;
  if (this->_internal_count_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_count_only(), target);
  }

  // int64 min_mod_revision = 10;
  if (this->_internal_min_mod_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_min_mod_revision(), target);
  }

  // int64 max_mod_revision = 11;
  if (this->_internal_max_mod_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_max_mod_revision(), target);
  }

  // int64 min_create_revision = 12;
  if (this->_internal_min_create_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_min_create_revision(), target);
  }

  // int64 max_create_revision = 13;
  if (this->_internal_max_create_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_max_create_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.RangeRequest)
  return target;
}

size_t RangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.RangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes range_end = 2;
  if (!this->_internal_range_end().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_end());
  }

  // int64 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_limit());
  }

  // int64 revision = 4;
  if (this->_internal_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_revision());
  }

  // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
  if (this->_internal_sort_order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_order());
  }

  // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
  if (this->_internal_sort_target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_target());
  }

  // int64 min_mod_revision = 10;
  if (this->_internal_min_mod_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_min_mod_revision());
  }

  // int64 max_mod_revision = 11;
  if (this->_internal_max_mod_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_mod_revision());
  }

  // int64 min_create_revision = 12;
  if (this->_internal_min_create_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_min_create_revision());
  }

  // int64 max_create_revision = 13;
  if (this->_internal_max_create_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_create_revision());
  }

  // bool serializable = 7;
  if (this->_internal_serializable() != 0) {
    total_size += 1 + 1;
  }

  // bool keys_only = 8;
  if (this->_internal_keys_only() != 0) {
    total_size += 1 + 1;
  }

  // bool count_only = 9;
  if (this->_internal_count_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeRequest::GetClassData() const { return &_class_data_; }

void RangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RangeRequest *>(to)->MergeFrom(
      static_cast<const RangeRequest &>(from));
}


void RangeRequest::MergeFrom(const RangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.RangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_range_end().empty()) {
    _internal_set_range_end(from._internal_range_end());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from._internal_revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from._internal_sort_order() != 0) {
    _internal_set_sort_order(from._internal_sort_order());
  }
  if (from._internal_sort_target() != 0) {
    _internal_set_sort_target(from._internal_sort_target());
  }
  if (from._internal_min_mod_revision() != 0) {
    _internal_set_min_mod_revision(from._internal_min_mod_revision());
  }
  if (from._internal_max_mod_revision() != 0) {
    _internal_set_max_mod_revision(from._internal_max_mod_revision());
  }
  if (from._internal_min_create_revision() != 0) {
    _internal_set_min_create_revision(from._internal_min_create_revision());
  }
  if (from._internal_max_create_revision() != 0) {
    _internal_set_max_create_revision(from._internal_max_create_revision());
  }
  if (from._internal_serializable() != 0) {
    _internal_set_serializable(from._internal_serializable());
  }
  if (from._internal_keys_only() != 0) {
    _internal_set_keys_only(from._internal_keys_only());
  }
  if (from._internal_count_only() != 0) {
    _internal_set_count_only(from._internal_count_only());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeRequest::CopyFrom(const RangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.RangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeRequest::IsInitialized() const {
  return true;
}

void RangeRequest::InternalSwap(RangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &range_end_, lhs_arena,
      &other->range_end_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeRequest, count_only_)
      + sizeof(RangeRequest::count_only_)
      - PROTOBUF_FIELD_OFFSET(RangeRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[1]);
}

// ===================================================================

class RangeResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const RangeResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
RangeResponse::_Internal::header(const RangeResponse* msg) {
  return *msg->header_;
}
void RangeResponse::clear_kvs() {
  kvs_.Clear();
}
RangeResponse::RangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  kvs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.RangeResponse)
}
RangeResponse::RangeResponse(const RangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      kvs_(from.kvs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&count_)) + sizeof(more_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.RangeResponse)
}

inline void RangeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&header_)) + sizeof(more_));
}

RangeResponse::~RangeResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.RangeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RangeResponse::ArenaDtor(void* object) {
  RangeResponse* _this = reinterpret_cast< RangeResponse* >(object);
  (void)_this;
}
void RangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.RangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&more_) -
      reinterpret_cast<char*>(&count_)) + sizeof(more_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mvccpb.KeyValue kvs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool more = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.RangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .mvccpb.KeyValue kvs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_kvs(i), target, stream);
  }

  // bool more = 3;
  if (this->_internal_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_more(), target);
  }

  // int64 count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.RangeResponse)
  return target;
}

size_t RangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.RangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mvccpb.KeyValue kvs = 2;
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 count = 4;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  // bool more = 3;
  if (this->_internal_more() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeResponse::GetClassData() const { return &_class_data_; }

void RangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RangeResponse *>(to)->MergeFrom(
      static_cast<const RangeResponse &>(from));
}


void RangeResponse::MergeFrom(const RangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.RangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_more() != 0) {
    _internal_set_more(from._internal_more());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeResponse::CopyFrom(const RangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.RangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeResponse::IsInitialized() const {
  return true;
}

void RangeResponse::InternalSwap(RangeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  kvs_.InternalSwap(&other->kvs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeResponse, more_)
      + sizeof(RangeResponse::more_)
      - PROTOBUF_FIELD_OFFSET(RangeResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[2]);
}

// ===================================================================

class PutRequest::_Internal {
 public:
};

PutRequest::PutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.PutRequest)
}
PutRequest::PutRequest(const PutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lease_, &from.lease_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_lease_) -
    reinterpret_cast<char*>(&lease_)) + sizeof(ignore_lease_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.PutRequest)
}

inline void PutRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lease_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ignore_lease_) -
    reinterpret_cast<char*>(&lease_)) + sizeof(ignore_lease_));
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.PutRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PutRequest::ArenaDtor(void* object) {
  PutRequest* _this = reinterpret_cast< PutRequest* >(object);
  (void)_this;
}
void PutRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.PutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&lease_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_lease_) -
      reinterpret_cast<char*>(&lease_)) + sizeof(ignore_lease_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lease = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool prev_kv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          prev_kv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ignore_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ignore_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ignore_lease = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ignore_lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.PutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int64 lease = 3;
  if (this->_internal_lease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lease(), target);
  }

  // bool prev_kv = 4;
  if (this->_internal_prev_kv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_prev_kv(), target);
  }

  // bool ignore_value = 5;
  if (this->_internal_ignore_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ignore_value(), target);
  }

  // bool ignore_lease = 6;
  if (this->_internal_ignore_lease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ignore_lease(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.PutRequest)
  return target;
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.PutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int64 lease = 3;
  if (this->_internal_lease() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lease());
  }

  // bool prev_kv = 4;
  if (this->_internal_prev_kv() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_value = 5;
  if (this->_internal_ignore_value() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_lease = 6;
  if (this->_internal_ignore_lease() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutRequest::GetClassData() const { return &_class_data_; }

void PutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PutRequest *>(to)->MergeFrom(
      static_cast<const PutRequest &>(from));
}


void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_lease() != 0) {
    _internal_set_lease(from._internal_lease());
  }
  if (from._internal_prev_kv() != 0) {
    _internal_set_prev_kv(from._internal_prev_kv());
  }
  if (from._internal_ignore_value() != 0) {
    _internal_set_ignore_value(from._internal_ignore_value());
  }
  if (from._internal_ignore_lease() != 0) {
    _internal_set_ignore_lease(from._internal_ignore_lease());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {
  return true;
}

void PutRequest::InternalSwap(PutRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutRequest, ignore_lease_)
      + sizeof(PutRequest::ignore_lease_)
      - PROTOBUF_FIELD_OFFSET(PutRequest, lease_)>(
          reinterpret_cast<char*>(&lease_),
          reinterpret_cast<char*>(&other->lease_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[3]);
}

// ===================================================================

class PutResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const PutResponse* msg);
  static const ::mvccpb::KeyValue& prev_kv(const PutResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
PutResponse::_Internal::header(const PutResponse* msg) {
  return *msg->header_;
}
const ::mvccpb::KeyValue&
PutResponse::_Internal::prev_kv(const PutResponse* msg) {
  return *msg->prev_kv_;
}
void PutResponse::clear_prev_kv() {
  if (GetArenaForAllocation() == nullptr && prev_kv_ != nullptr) {
    delete prev_kv_;
  }
  prev_kv_ = nullptr;
}
PutResponse::PutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.PutResponse)
}
PutResponse::PutResponse(const PutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_prev_kv()) {
    prev_kv_ = new ::mvccpb::KeyValue(*from.prev_kv_);
  } else {
    prev_kv_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.PutResponse)
}

inline void PutResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&header_)) + sizeof(prev_kv_));
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.PutResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete prev_kv_;
}

void PutResponse::ArenaDtor(void* object) {
  PutResponse* _this = reinterpret_cast< PutResponse* >(object);
  (void)_this;
}
void PutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.PutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && prev_kv_ != nullptr) {
    delete prev_kv_;
  }
  prev_kv_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mvccpb.KeyValue prev_kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_kv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.PutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .mvccpb.KeyValue prev_kv = 2;
  if (this->_internal_has_prev_kv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prev_kv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.PutResponse)
  return target;
}

size_t PutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.PutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .mvccpb.KeyValue prev_kv = 2;
  if (this->_internal_has_prev_kv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_kv_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutResponse::GetClassData() const { return &_class_data_; }

void PutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PutResponse *>(to)->MergeFrom(
      static_cast<const PutResponse &>(from));
}


void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_prev_kv()) {
    _internal_mutable_prev_kv()->::mvccpb::KeyValue::MergeFrom(from._internal_prev_kv());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {
  return true;
}

void PutResponse::InternalSwap(PutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutResponse, prev_kv_)
      + sizeof(PutResponse::prev_kv_)
      - PROTOBUF_FIELD_OFFSET(PutResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[4]);
}

// ===================================================================

class DeleteRangeRequest::_Internal {
 public:
};

DeleteRangeRequest::DeleteRangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.DeleteRangeRequest)
}
DeleteRangeRequest::DeleteRangeRequest(const DeleteRangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_range_end().empty()) {
    range_end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_range_end(), 
      GetArenaForAllocation());
  }
  prev_kv_ = from.prev_kv_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DeleteRangeRequest)
}

inline void DeleteRangeRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prev_kv_ = false;
}

DeleteRangeRequest::~DeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DeleteRangeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteRangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRangeRequest::ArenaDtor(void* object) {
  DeleteRangeRequest* _this = reinterpret_cast< DeleteRangeRequest* >(object);
  (void)_this;
}
void DeleteRangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DeleteRangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  range_end_.ClearToEmpty();
  prev_kv_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_range_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool prev_kv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          prev_kv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DeleteRangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes range_end = 2;
  if (!this->_internal_range_end().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_range_end(), target);
  }

  // bool prev_kv = 3;
  if (this->_internal_prev_kv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_prev_kv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DeleteRangeRequest)
  return target;
}

size_t DeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DeleteRangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes range_end = 2;
  if (!this->_internal_range_end().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_end());
  }

  // bool prev_kv = 3;
  if (this->_internal_prev_kv() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRangeRequest::GetClassData() const { return &_class_data_; }

void DeleteRangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteRangeRequest *>(to)->MergeFrom(
      static_cast<const DeleteRangeRequest &>(from));
}


void DeleteRangeRequest::MergeFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_range_end().empty()) {
    _internal_set_range_end(from._internal_range_end());
  }
  if (from._internal_prev_kv() != 0) {
    _internal_set_prev_kv(from._internal_prev_kv());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRangeRequest::CopyFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeRequest::IsInitialized() const {
  return true;
}

void DeleteRangeRequest::InternalSwap(DeleteRangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &range_end_, lhs_arena,
      &other->range_end_, rhs_arena
  );
  swap(prev_kv_, other->prev_kv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRangeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[5]);
}

// ===================================================================

class DeleteRangeResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const DeleteRangeResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
DeleteRangeResponse::_Internal::header(const DeleteRangeResponse* msg) {
  return *msg->header_;
}
void DeleteRangeResponse::clear_prev_kvs() {
  prev_kvs_.Clear();
}
DeleteRangeResponse::DeleteRangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  prev_kvs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.DeleteRangeResponse)
}
DeleteRangeResponse::DeleteRangeResponse(const DeleteRangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prev_kvs_(from.prev_kvs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  deleted_ = from.deleted_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DeleteRangeResponse)
}

inline void DeleteRangeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&header_)) + sizeof(deleted_));
}

DeleteRangeResponse::~DeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DeleteRangeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteRangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DeleteRangeResponse::ArenaDtor(void* object) {
  DeleteRangeResponse* _this = reinterpret_cast< DeleteRangeResponse* >(object);
  (void)_this;
}
void DeleteRangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DeleteRangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prev_kvs_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  deleted_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 deleted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mvccpb.KeyValue prev_kvs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prev_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DeleteRangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int64 deleted = 2;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_deleted(), target);
  }

  // repeated .mvccpb.KeyValue prev_kvs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prev_kvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_prev_kvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DeleteRangeResponse)
  return target;
}

size_t DeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DeleteRangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mvccpb.KeyValue prev_kvs = 3;
  total_size += 1UL * this->_internal_prev_kvs_size();
  for (const auto& msg : this->prev_kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 deleted = 2;
  if (this->_internal_deleted() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_deleted());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRangeResponse::GetClassData() const { return &_class_data_; }

void DeleteRangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteRangeResponse *>(to)->MergeFrom(
      static_cast<const DeleteRangeResponse &>(from));
}


void DeleteRangeResponse::MergeFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  prev_kvs_.MergeFrom(from.prev_kvs_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_deleted() != 0) {
    _internal_set_deleted(from._internal_deleted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRangeResponse::CopyFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeResponse::IsInitialized() const {
  return true;
}

void DeleteRangeResponse::InternalSwap(DeleteRangeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  prev_kvs_.InternalSwap(&other->prev_kvs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteRangeResponse, deleted_)
      + sizeof(DeleteRangeResponse::deleted_)
      - PROTOBUF_FIELD_OFFSET(DeleteRangeResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRangeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[6]);
}

// ===================================================================

class RequestOp::_Internal {
 public:
  static const ::etcdserverpb::RangeRequest& request_range(const RequestOp* msg);
  static const ::etcdserverpb::PutRequest& request_put(const RequestOp* msg);
  static const ::etcdserverpb::DeleteRangeRequest& request_delete_range(const RequestOp* msg);
  static const ::etcdserverpb::TxnRequest& request_txn(const RequestOp* msg);
};

const ::etcdserverpb::RangeRequest&
RequestOp::_Internal::request_range(const RequestOp* msg) {
  return *msg->request_.request_range_;
}
const ::etcdserverpb::PutRequest&
RequestOp::_Internal::request_put(const RequestOp* msg) {
  return *msg->request_.request_put_;
}
const ::etcdserverpb::DeleteRangeRequest&
RequestOp::_Internal::request_delete_range(const RequestOp* msg) {
  return *msg->request_.request_delete_range_;
}
const ::etcdserverpb::TxnRequest&
RequestOp::_Internal::request_txn(const RequestOp* msg) {
  return *msg->request_.request_txn_;
}
void RequestOp::set_allocated_request_range(::etcdserverpb::RangeRequest* request_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (request_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::RangeRequest>::GetOwningArena(request_range);
    if (message_arena != submessage_arena) {
      request_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_range, submessage_arena);
    }
    set_has_request_range();
    request_.request_range_ = request_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_range)
}
void RequestOp::set_allocated_request_put(::etcdserverpb::PutRequest* request_put) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (request_put) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::PutRequest>::GetOwningArena(request_put);
    if (message_arena != submessage_arena) {
      request_put = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_put, submessage_arena);
    }
    set_has_request_put();
    request_.request_put_ = request_put;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_put)
}
void RequestOp::set_allocated_request_delete_range(::etcdserverpb::DeleteRangeRequest* request_delete_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (request_delete_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::DeleteRangeRequest>::GetOwningArena(request_delete_range);
    if (message_arena != submessage_arena) {
      request_delete_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_delete_range, submessage_arena);
    }
    set_has_request_delete_range();
    request_.request_delete_range_ = request_delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_delete_range)
}
void RequestOp::set_allocated_request_txn(::etcdserverpb::TxnRequest* request_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (request_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::TxnRequest>::GetOwningArena(request_txn);
    if (message_arena != submessage_arena) {
      request_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_txn, submessage_arena);
    }
    set_has_request_txn();
    request_.request_txn_ = request_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_txn)
}
RequestOp::RequestOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.RequestOp)
}
RequestOp::RequestOp(const RequestOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kRequestRange: {
      _internal_mutable_request_range()->::etcdserverpb::RangeRequest::MergeFrom(from._internal_request_range());
      break;
    }
    case kRequestPut: {
      _internal_mutable_request_put()->::etcdserverpb::PutRequest::MergeFrom(from._internal_request_put());
      break;
    }
    case kRequestDeleteRange: {
      _internal_mutable_request_delete_range()->::etcdserverpb::DeleteRangeRequest::MergeFrom(from._internal_request_delete_range());
      break;
    }
    case kRequestTxn: {
      _internal_mutable_request_txn()->::etcdserverpb::TxnRequest::MergeFrom(from._internal_request_txn());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.RequestOp)
}

inline void RequestOp::SharedCtor() {
clear_has_request();
}

RequestOp::~RequestOp() {
  // @@protoc_insertion_point(destructor:etcdserverpb.RequestOp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void RequestOp::ArenaDtor(void* object) {
  RequestOp* _this = reinterpret_cast< RequestOp* >(object);
  (void)_this;
}
void RequestOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestOp::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.RequestOp)
  switch (request_case()) {
    case kRequestRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.request_range_;
      }
      break;
    }
    case kRequestPut: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.request_put_;
      }
      break;
    }
    case kRequestDeleteRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.request_delete_range_;
      }
      break;
    }
    case kRequestTxn: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.request_txn_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void RequestOp::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.RequestOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.RangeRequest request_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.PutRequest request_put = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_put(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_delete_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.TxnRequest request_txn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_txn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.RequestOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.RangeRequest request_range = 1;
  if (_internal_has_request_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request_range(this), target, stream);
  }

  // .etcdserverpb.PutRequest request_put = 2;
  if (_internal_has_request_put()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::request_put(this), target, stream);
  }

  // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
  if (_internal_has_request_delete_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::request_delete_range(this), target, stream);
  }

  // .etcdserverpb.TxnRequest request_txn = 4;
  if (_internal_has_request_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::request_txn(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.RequestOp)
  return target;
}

size_t RequestOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.RequestOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .etcdserverpb.RangeRequest request_range = 1;
    case kRequestRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.request_range_);
      break;
    }
    // .etcdserverpb.PutRequest request_put = 2;
    case kRequestPut: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.request_put_);
      break;
    }
    // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
    case kRequestDeleteRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.request_delete_range_);
      break;
    }
    // .etcdserverpb.TxnRequest request_txn = 4;
    case kRequestTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.request_txn_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestOp::GetClassData() const { return &_class_data_; }

void RequestOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestOp *>(to)->MergeFrom(
      static_cast<const RequestOp &>(from));
}


void RequestOp::MergeFrom(const RequestOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.RequestOp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kRequestRange: {
      _internal_mutable_request_range()->::etcdserverpb::RangeRequest::MergeFrom(from._internal_request_range());
      break;
    }
    case kRequestPut: {
      _internal_mutable_request_put()->::etcdserverpb::PutRequest::MergeFrom(from._internal_request_put());
      break;
    }
    case kRequestDeleteRange: {
      _internal_mutable_request_delete_range()->::etcdserverpb::DeleteRangeRequest::MergeFrom(from._internal_request_delete_range());
      break;
    }
    case kRequestTxn: {
      _internal_mutable_request_txn()->::etcdserverpb::TxnRequest::MergeFrom(from._internal_request_txn());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestOp::CopyFrom(const RequestOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.RequestOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOp::IsInitialized() const {
  return true;
}

void RequestOp::InternalSwap(RequestOp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestOp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[7]);
}

// ===================================================================

class ResponseOp::_Internal {
 public:
  static const ::etcdserverpb::RangeResponse& response_range(const ResponseOp* msg);
  static const ::etcdserverpb::PutResponse& response_put(const ResponseOp* msg);
  static const ::etcdserverpb::DeleteRangeResponse& response_delete_range(const ResponseOp* msg);
  static const ::etcdserverpb::TxnResponse& response_txn(const ResponseOp* msg);
};

const ::etcdserverpb::RangeResponse&
ResponseOp::_Internal::response_range(const ResponseOp* msg) {
  return *msg->response_.response_range_;
}
const ::etcdserverpb::PutResponse&
ResponseOp::_Internal::response_put(const ResponseOp* msg) {
  return *msg->response_.response_put_;
}
const ::etcdserverpb::DeleteRangeResponse&
ResponseOp::_Internal::response_delete_range(const ResponseOp* msg) {
  return *msg->response_.response_delete_range_;
}
const ::etcdserverpb::TxnResponse&
ResponseOp::_Internal::response_txn(const ResponseOp* msg) {
  return *msg->response_.response_txn_;
}
void ResponseOp::set_allocated_response_range(::etcdserverpb::RangeResponse* response_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (response_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::RangeResponse>::GetOwningArena(response_range);
    if (message_arena != submessage_arena) {
      response_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_range, submessage_arena);
    }
    set_has_response_range();
    response_.response_range_ = response_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_range)
}
void ResponseOp::set_allocated_response_put(::etcdserverpb::PutResponse* response_put) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (response_put) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::PutResponse>::GetOwningArena(response_put);
    if (message_arena != submessage_arena) {
      response_put = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_put, submessage_arena);
    }
    set_has_response_put();
    response_.response_put_ = response_put;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_put)
}
void ResponseOp::set_allocated_response_delete_range(::etcdserverpb::DeleteRangeResponse* response_delete_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (response_delete_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::DeleteRangeResponse>::GetOwningArena(response_delete_range);
    if (message_arena != submessage_arena) {
      response_delete_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_delete_range, submessage_arena);
    }
    set_has_response_delete_range();
    response_.response_delete_range_ = response_delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_delete_range)
}
void ResponseOp::set_allocated_response_txn(::etcdserverpb::TxnResponse* response_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (response_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::TxnResponse>::GetOwningArena(response_txn);
    if (message_arena != submessage_arena) {
      response_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_txn, submessage_arena);
    }
    set_has_response_txn();
    response_.response_txn_ = response_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_txn)
}
ResponseOp::ResponseOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.ResponseOp)
}
ResponseOp::ResponseOp(const ResponseOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kResponseRange: {
      _internal_mutable_response_range()->::etcdserverpb::RangeResponse::MergeFrom(from._internal_response_range());
      break;
    }
    case kResponsePut: {
      _internal_mutable_response_put()->::etcdserverpb::PutResponse::MergeFrom(from._internal_response_put());
      break;
    }
    case kResponseDeleteRange: {
      _internal_mutable_response_delete_range()->::etcdserverpb::DeleteRangeResponse::MergeFrom(from._internal_response_delete_range());
      break;
    }
    case kResponseTxn: {
      _internal_mutable_response_txn()->::etcdserverpb::TxnResponse::MergeFrom(from._internal_response_txn());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.ResponseOp)
}

inline void ResponseOp::SharedCtor() {
clear_has_response();
}

ResponseOp::~ResponseOp() {
  // @@protoc_insertion_point(destructor:etcdserverpb.ResponseOp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void ResponseOp::ArenaDtor(void* object) {
  ResponseOp* _this = reinterpret_cast< ResponseOp* >(object);
  (void)_this;
}
void ResponseOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseOp::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.ResponseOp)
  switch (response_case()) {
    case kResponseRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.response_range_;
      }
      break;
    }
    case kResponsePut: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.response_put_;
      }
      break;
    }
    case kResponseDeleteRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.response_delete_range_;
      }
      break;
    }
    case kResponseTxn: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.response_txn_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ResponseOp::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.ResponseOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.RangeResponse response_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.PutResponse response_put = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_put(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_delete_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.TxnResponse response_txn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_txn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.ResponseOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.RangeResponse response_range = 1;
  if (_internal_has_response_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::response_range(this), target, stream);
  }

  // .etcdserverpb.PutResponse response_put = 2;
  if (_internal_has_response_put()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response_put(this), target, stream);
  }

  // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
  if (_internal_has_response_delete_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::response_delete_range(this), target, stream);
  }

  // .etcdserverpb.TxnResponse response_txn = 4;
  if (_internal_has_response_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::response_txn(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.ResponseOp)
  return target;
}

size_t ResponseOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.ResponseOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .etcdserverpb.RangeResponse response_range = 1;
    case kResponseRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.response_range_);
      break;
    }
    // .etcdserverpb.PutResponse response_put = 2;
    case kResponsePut: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.response_put_);
      break;
    }
    // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
    case kResponseDeleteRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.response_delete_range_);
      break;
    }
    // .etcdserverpb.TxnResponse response_txn = 4;
    case kResponseTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.response_txn_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseOp::GetClassData() const { return &_class_data_; }

void ResponseOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseOp *>(to)->MergeFrom(
      static_cast<const ResponseOp &>(from));
}


void ResponseOp::MergeFrom(const ResponseOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.ResponseOp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kResponseRange: {
      _internal_mutable_response_range()->::etcdserverpb::RangeResponse::MergeFrom(from._internal_response_range());
      break;
    }
    case kResponsePut: {
      _internal_mutable_response_put()->::etcdserverpb::PutResponse::MergeFrom(from._internal_response_put());
      break;
    }
    case kResponseDeleteRange: {
      _internal_mutable_response_delete_range()->::etcdserverpb::DeleteRangeResponse::MergeFrom(from._internal_response_delete_range());
      break;
    }
    case kResponseTxn: {
      _internal_mutable_response_txn()->::etcdserverpb::TxnResponse::MergeFrom(from._internal_response_txn());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseOp::CopyFrom(const ResponseOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.ResponseOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOp::IsInitialized() const {
  return true;
}

void ResponseOp::InternalSwap(ResponseOp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseOp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[8]);
}

// ===================================================================

class Compare::_Internal {
 public:
};

Compare::Compare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.Compare)
}
Compare::Compare(const Compare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_range_end().empty()) {
    range_end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_range_end(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&result_)) + sizeof(target_));
  clear_has_target_union();
  switch (from.target_union_case()) {
    case kVersion: {
      _internal_set_version(from._internal_version());
      break;
    }
    case kCreateRevision: {
      _internal_set_create_revision(from._internal_create_revision());
      break;
    }
    case kModRevision: {
      _internal_set_mod_revision(from._internal_mod_revision());
      break;
    }
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kLease: {
      _internal_set_lease(from._internal_lease());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.Compare)
}

inline void Compare::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&result_)) + sizeof(target_));
clear_has_target_union();
}

Compare::~Compare() {
  // @@protoc_insertion_point(destructor:etcdserverpb.Compare)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Compare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_target_union()) {
    clear_target_union();
  }
}

void Compare::ArenaDtor(void* object) {
  Compare* _this = reinterpret_cast< Compare* >(object);
  (void)_this;
}
void Compare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Compare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Compare::clear_target_union() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.Compare)
  switch (target_union_case()) {
    case kVersion: {
      // No need to clear
      break;
    }
    case kCreateRevision: {
      // No need to clear
      break;
    }
    case kModRevision: {
      // No need to clear
      break;
    }
    case kValue: {
      target_union_.value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kLease: {
      // No need to clear
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_UNION_NOT_SET;
}


void Compare::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.Compare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  range_end_.ClearToEmpty();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&result_)) + sizeof(target_));
  clear_target_union();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Compare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.Compare.CompareResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::etcdserverpb::Compare_CompareResult>(val));
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.Compare.CompareTarget target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_target(static_cast<::etcdserverpb::Compare_CompareTarget>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 create_revision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_create_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 mod_revision = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_mod_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lease = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_lease(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes range_end = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_range_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Compare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.Compare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.Compare.CompareResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .etcdserverpb.Compare.CompareTarget target = 2;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_target(), target);
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // int64 version = 4;
  if (_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_version(), target);
  }

  // int64 create_revision = 5;
  if (_internal_has_create_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_create_revision(), target);
  }

  // int64 mod_revision = 6;
  if (_internal_has_mod_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_mod_revision(), target);
  }

  // bytes value = 7;
  if (_internal_has_value()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_value(), target);
  }

  // int64 lease = 8;
  if (_internal_has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_lease(), target);
  }

  // bytes range_end = 64;
  if (!this->_internal_range_end().empty()) {
    target = stream->WriteBytesMaybeAliased(
        64, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.Compare)
  return target;
}

size_t Compare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.Compare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes range_end = 64;
  if (!this->_internal_range_end().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_end());
  }

  // .etcdserverpb.Compare.CompareResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // .etcdserverpb.Compare.CompareTarget target = 2;
  if (this->_internal_target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target());
  }

  switch (target_union_case()) {
    // int64 version = 4;
    case kVersion: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_version());
      break;
    }
    // int64 create_revision = 5;
    case kCreateRevision: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_create_revision());
      break;
    }
    // int64 mod_revision = 6;
    case kModRevision: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_mod_revision());
      break;
    }
    // bytes value = 7;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
      break;
    }
    // int64 lease = 8;
    case kLease: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lease());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Compare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Compare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Compare::GetClassData() const { return &_class_data_; }

void Compare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Compare *>(to)->MergeFrom(
      static_cast<const Compare &>(from));
}


void Compare::MergeFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.Compare)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_range_end().empty()) {
    _internal_set_range_end(from._internal_range_end());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_target() != 0) {
    _internal_set_target(from._internal_target());
  }
  switch (from.target_union_case()) {
    case kVersion: {
      _internal_set_version(from._internal_version());
      break;
    }
    case kCreateRevision: {
      _internal_set_create_revision(from._internal_create_revision());
      break;
    }
    case kModRevision: {
      _internal_set_mod_revision(from._internal_mod_revision());
      break;
    }
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kLease: {
      _internal_set_lease(from._internal_lease());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Compare::CopyFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.Compare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compare::IsInitialized() const {
  return true;
}

void Compare::InternalSwap(Compare* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &range_end_, lhs_arena,
      &other->range_end_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Compare, target_)
      + sizeof(Compare::target_)
      - PROTOBUF_FIELD_OFFSET(Compare, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
  swap(target_union_, other->target_union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Compare::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[9]);
}

// ===================================================================

class TxnRequest::_Internal {
 public:
};

TxnRequest::TxnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  compare_(arena),
  success_(arena),
  failure_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.TxnRequest)
}
TxnRequest::TxnRequest(const TxnRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      compare_(from.compare_),
      success_(from.success_),
      failure_(from.failure_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.TxnRequest)
}

inline void TxnRequest::SharedCtor() {
}

TxnRequest::~TxnRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.TxnRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxnRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TxnRequest::ArenaDtor(void* object) {
  TxnRequest* _this = reinterpret_cast< TxnRequest* >(object);
  (void)_this;
}
void TxnRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.TxnRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compare_.Clear();
  success_.Clear();
  failure_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxnRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .etcdserverpb.Compare compare = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compare(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.RequestOp success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_success(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.RequestOp failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_failure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxnRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.TxnRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .etcdserverpb.Compare compare = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compare_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_compare(i), target, stream);
  }

  // repeated .etcdserverpb.RequestOp success = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_success_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_success(i), target, stream);
  }

  // repeated .etcdserverpb.RequestOp failure = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_failure_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_failure(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.TxnRequest)
  return target;
}

size_t TxnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.TxnRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Compare compare = 1;
  total_size += 1UL * this->_internal_compare_size();
  for (const auto& msg : this->compare_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .etcdserverpb.RequestOp success = 2;
  total_size += 1UL * this->_internal_success_size();
  for (const auto& msg : this->success_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .etcdserverpb.RequestOp failure = 3;
  total_size += 1UL * this->_internal_failure_size();
  for (const auto& msg : this->failure_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxnRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxnRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxnRequest::GetClassData() const { return &_class_data_; }

void TxnRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxnRequest *>(to)->MergeFrom(
      static_cast<const TxnRequest &>(from));
}


void TxnRequest::MergeFrom(const TxnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.TxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  compare_.MergeFrom(from.compare_);
  success_.MergeFrom(from.success_);
  failure_.MergeFrom(from.failure_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxnRequest::CopyFrom(const TxnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.TxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnRequest::IsInitialized() const {
  return true;
}

void TxnRequest::InternalSwap(TxnRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  compare_.InternalSwap(&other->compare_);
  success_.InternalSwap(&other->success_);
  failure_.InternalSwap(&other->failure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxnRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[10]);
}

// ===================================================================

class TxnResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const TxnResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
TxnResponse::_Internal::header(const TxnResponse* msg) {
  return *msg->header_;
}
TxnResponse::TxnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  responses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.TxnResponse)
}
TxnResponse::TxnResponse(const TxnResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  succeeded_ = from.succeeded_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.TxnResponse)
}

inline void TxnResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&succeeded_) -
    reinterpret_cast<char*>(&header_)) + sizeof(succeeded_));
}

TxnResponse::~TxnResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.TxnResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxnResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void TxnResponse::ArenaDtor(void* object) {
  TxnResponse* _this = reinterpret_cast< TxnResponse* >(object);
  (void)_this;
}
void TxnResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.TxnResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  succeeded_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxnResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool succeeded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.ResponseOp responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxnResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.TxnResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool succeeded = 2;
  if (this->_internal_succeeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_succeeded(), target);
  }

  // repeated .etcdserverpb.ResponseOp responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.TxnResponse)
  return target;
}

size_t TxnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.TxnResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.ResponseOp responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool succeeded = 2;
  if (this->_internal_succeeded() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxnResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxnResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxnResponse::GetClassData() const { return &_class_data_; }

void TxnResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxnResponse *>(to)->MergeFrom(
      static_cast<const TxnResponse &>(from));
}


void TxnResponse::MergeFrom(const TxnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.TxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_succeeded() != 0) {
    _internal_set_succeeded(from._internal_succeeded());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxnResponse::CopyFrom(const TxnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.TxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnResponse::IsInitialized() const {
  return true;
}

void TxnResponse::InternalSwap(TxnResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxnResponse, succeeded_)
      + sizeof(TxnResponse::succeeded_)
      - PROTOBUF_FIELD_OFFSET(TxnResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxnResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[11]);
}

// ===================================================================

class CompactionRequest::_Internal {
 public:
};

CompactionRequest::CompactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.CompactionRequest)
}
CompactionRequest::CompactionRequest(const CompactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&revision_, &from.revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&physical_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(physical_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.CompactionRequest)
}

inline void CompactionRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&revision_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&physical_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(physical_));
}

CompactionRequest::~CompactionRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.CompactionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CompactionRequest::ArenaDtor(void* object) {
  CompactionRequest* _this = reinterpret_cast< CompactionRequest* >(object);
  (void)_this;
}
void CompactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.CompactionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&physical_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(physical_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 revision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool physical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          physical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.CompactionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 revision = 1;
  if (this->_internal_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_revision(), target);
  }

  // bool physical = 2;
  if (this->_internal_physical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_physical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.CompactionRequest)
  return target;
}

size_t CompactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.CompactionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 revision = 1;
  if (this->_internal_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_revision());
  }

  // bool physical = 2;
  if (this->_internal_physical() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactionRequest::GetClassData() const { return &_class_data_; }

void CompactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CompactionRequest *>(to)->MergeFrom(
      static_cast<const CompactionRequest &>(from));
}


void CompactionRequest::MergeFrom(const CompactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.CompactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from._internal_physical() != 0) {
    _internal_set_physical(from._internal_physical());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactionRequest::CopyFrom(const CompactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.CompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionRequest::IsInitialized() const {
  return true;
}

void CompactionRequest::InternalSwap(CompactionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompactionRequest, physical_)
      + sizeof(CompactionRequest::physical_)
      - PROTOBUF_FIELD_OFFSET(CompactionRequest, revision_)>(
          reinterpret_cast<char*>(&revision_),
          reinterpret_cast<char*>(&other->revision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[12]);
}

// ===================================================================

class CompactionResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const CompactionResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
CompactionResponse::_Internal::header(const CompactionResponse* msg) {
  return *msg->header_;
}
CompactionResponse::CompactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.CompactionResponse)
}
CompactionResponse::CompactionResponse(const CompactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.CompactionResponse)
}

inline void CompactionResponse::SharedCtor() {
header_ = nullptr;
}

CompactionResponse::~CompactionResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.CompactionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CompactionResponse::ArenaDtor(void* object) {
  CompactionResponse* _this = reinterpret_cast< CompactionResponse* >(object);
  (void)_this;
}
void CompactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.CompactionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.CompactionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.CompactionResponse)
  return target;
}

size_t CompactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.CompactionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactionResponse::GetClassData() const { return &_class_data_; }

void CompactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CompactionResponse *>(to)->MergeFrom(
      static_cast<const CompactionResponse &>(from));
}


void CompactionResponse::MergeFrom(const CompactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.CompactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactionResponse::CopyFrom(const CompactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.CompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionResponse::IsInitialized() const {
  return true;
}

void CompactionResponse::InternalSwap(CompactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[13]);
}

// ===================================================================

class HashRequest::_Internal {
 public:
};

HashRequest::HashRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.HashRequest)
}
HashRequest::HashRequest(const HashRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HashRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[14]);
}

// ===================================================================

class HashKVRequest::_Internal {
 public:
};

HashKVRequest::HashKVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.HashKVRequest)
}
HashKVRequest::HashKVRequest(const HashKVRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  revision_ = from.revision_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashKVRequest)
}

inline void HashKVRequest::SharedCtor() {
revision_ = int64_t{0};
}

HashKVRequest::~HashKVRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.HashKVRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HashKVRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HashKVRequest::ArenaDtor(void* object) {
  HashKVRequest* _this = reinterpret_cast< HashKVRequest* >(object);
  (void)_this;
}
void HashKVRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashKVRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HashKVRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.HashKVRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  revision_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashKVRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 revision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HashKVRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.HashKVRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 revision = 1;
  if (this->_internal_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.HashKVRequest)
  return target;
}

size_t HashKVRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.HashKVRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 revision = 1;
  if (this->_internal_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_revision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashKVRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HashKVRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashKVRequest::GetClassData() const { return &_class_data_; }

void HashKVRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HashKVRequest *>(to)->MergeFrom(
      static_cast<const HashKVRequest &>(from));
}


void HashKVRequest::MergeFrom(const HashKVRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.HashKVRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HashKVRequest::CopyFrom(const HashKVRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.HashKVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashKVRequest::IsInitialized() const {
  return true;
}

void HashKVRequest::InternalSwap(HashKVRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(revision_, other->revision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashKVRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[15]);
}

// ===================================================================

class HashKVResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const HashKVResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
HashKVResponse::_Internal::header(const HashKVResponse* msg) {
  return *msg->header_;
}
HashKVResponse::HashKVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.HashKVResponse)
}
HashKVResponse::HashKVResponse(const HashKVResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&compact_revision_, &from.compact_revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&hash_) -
    reinterpret_cast<char*>(&compact_revision_)) + sizeof(hash_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashKVResponse)
}

inline void HashKVResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hash_) -
    reinterpret_cast<char*>(&header_)) + sizeof(hash_));
}

HashKVResponse::~HashKVResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.HashKVResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HashKVResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void HashKVResponse::ArenaDtor(void* object) {
  HashKVResponse* _this = reinterpret_cast< HashKVResponse* >(object);
  (void)_this;
}
void HashKVResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashKVResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HashKVResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.HashKVResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&compact_revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_) -
      reinterpret_cast<char*>(&compact_revision_)) + sizeof(hash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashKVResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compact_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          compact_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HashKVResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.HashKVResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 hash = 2;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hash(), target);
  }

  // int64 compact_revision = 3;
  if (this->_internal_compact_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_compact_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.HashKVResponse)
  return target;
}

size_t HashKVResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.HashKVResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 compact_revision = 3;
  if (this->_internal_compact_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_compact_revision());
  }

  // uint32 hash = 2;
  if (this->_internal_hash() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashKVResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HashKVResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashKVResponse::GetClassData() const { return &_class_data_; }

void HashKVResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HashKVResponse *>(to)->MergeFrom(
      static_cast<const HashKVResponse &>(from));
}


void HashKVResponse::MergeFrom(const HashKVResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.HashKVResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_compact_revision() != 0) {
    _internal_set_compact_revision(from._internal_compact_revision());
  }
  if (from._internal_hash() != 0) {
    _internal_set_hash(from._internal_hash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HashKVResponse::CopyFrom(const HashKVResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.HashKVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashKVResponse::IsInitialized() const {
  return true;
}

void HashKVResponse::InternalSwap(HashKVResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HashKVResponse, hash_)
      + sizeof(HashKVResponse::hash_)
      - PROTOBUF_FIELD_OFFSET(HashKVResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HashKVResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[16]);
}

// ===================================================================

class HashResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const HashResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
HashResponse::_Internal::header(const HashResponse* msg) {
  return *msg->header_;
}
HashResponse::HashResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.HashResponse)
}
HashResponse::HashResponse(const HashResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  hash_ = from.hash_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashResponse)
}

inline void HashResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hash_) -
    reinterpret_cast<char*>(&header_)) + sizeof(hash_));
}

HashResponse::~HashResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.HashResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HashResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void HashResponse::ArenaDtor(void* object) {
  HashResponse* _this = reinterpret_cast< HashResponse* >(object);
  (void)_this;
}
void HashResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.HashResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  hash_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HashResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.HashResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 hash = 2;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.HashResponse)
  return target;
}

size_t HashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.HashResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 hash = 2;
  if (this->_internal_hash() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HashResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashResponse::GetClassData() const { return &_class_data_; }

void HashResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HashResponse *>(to)->MergeFrom(
      static_cast<const HashResponse &>(from));
}


void HashResponse::MergeFrom(const HashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.HashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_hash() != 0) {
    _internal_set_hash(from._internal_hash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HashResponse::CopyFrom(const HashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.HashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashResponse::IsInitialized() const {
  return true;
}

void HashResponse::InternalSwap(HashResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HashResponse, hash_)
      + sizeof(HashResponse::hash_)
      - PROTOBUF_FIELD_OFFSET(HashResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HashResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[17]);
}

// ===================================================================

class SnapshotRequest::_Internal {
 public:
};

SnapshotRequest::SnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.SnapshotRequest)
}
SnapshotRequest::SnapshotRequest(const SnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.SnapshotRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SnapshotRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[18]);
}

// ===================================================================

class SnapshotResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const SnapshotResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
SnapshotResponse::_Internal::header(const SnapshotResponse* msg) {
  return *msg->header_;
}
SnapshotResponse::SnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.SnapshotResponse)
}
SnapshotResponse::SnapshotResponse(const SnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  remaining_bytes_ = from.remaining_bytes_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.SnapshotResponse)
}

inline void SnapshotResponse::SharedCtor() {
blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remaining_bytes_) -
    reinterpret_cast<char*>(&header_)) + sizeof(remaining_bytes_));
}

SnapshotResponse::~SnapshotResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.SnapshotResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SnapshotResponse::ArenaDtor(void* object) {
  SnapshotResponse* _this = reinterpret_cast< SnapshotResponse* >(object);
  (void)_this;
}
void SnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.SnapshotResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  remaining_bytes_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 remaining_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          remaining_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes blob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapshotResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.SnapshotResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint64 remaining_bytes = 2;
  if (this->_internal_remaining_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_remaining_bytes(), target);
  }

  // bytes blob = 3;
  if (!this->_internal_blob().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.SnapshotResponse)
  return target;
}

size_t SnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.SnapshotResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 3;
  if (!this->_internal_blob().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 remaining_bytes = 2;
  if (this->_internal_remaining_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_remaining_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnapshotResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotResponse::GetClassData() const { return &_class_data_; }

void SnapshotResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnapshotResponse *>(to)->MergeFrom(
      static_cast<const SnapshotResponse &>(from));
}


void SnapshotResponse::MergeFrom(const SnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.SnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blob().empty()) {
    _internal_set_blob(from._internal_blob());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_remaining_bytes() != 0) {
    _internal_set_remaining_bytes(from._internal_remaining_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotResponse::CopyFrom(const SnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.SnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotResponse::IsInitialized() const {
  return true;
}

void SnapshotResponse::InternalSwap(SnapshotResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &blob_, lhs_arena,
      &other->blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotResponse, remaining_bytes_)
      + sizeof(SnapshotResponse::remaining_bytes_)
      - PROTOBUF_FIELD_OFFSET(SnapshotResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[19]);
}

// ===================================================================

class WatchRequest::_Internal {
 public:
  static const ::etcdserverpb::WatchCreateRequest& create_request(const WatchRequest* msg);
  static const ::etcdserverpb::WatchCancelRequest& cancel_request(const WatchRequest* msg);
};

const ::etcdserverpb::WatchCreateRequest&
WatchRequest::_Internal::create_request(const WatchRequest* msg) {
  return *msg->request_union_.create_request_;
}
const ::etcdserverpb::WatchCancelRequest&
WatchRequest::_Internal::cancel_request(const WatchRequest* msg) {
  return *msg->request_union_.cancel_request_;
}
void WatchRequest::set_allocated_create_request(::etcdserverpb::WatchCreateRequest* create_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_union();
  if (create_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::WatchCreateRequest>::GetOwningArena(create_request);
    if (message_arena != submessage_arena) {
      create_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_request, submessage_arena);
    }
    set_has_create_request();
    request_union_.create_request_ = create_request;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchRequest.create_request)
}
void WatchRequest::set_allocated_cancel_request(::etcdserverpb::WatchCancelRequest* cancel_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_union();
  if (cancel_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::etcdserverpb::WatchCancelRequest>::GetOwningArena(cancel_request);
    if (message_arena != submessage_arena) {
      cancel_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_request, submessage_arena);
    }
    set_has_cancel_request();
    request_union_.cancel_request_ = cancel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchRequest.cancel_request)
}
WatchRequest::WatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.WatchRequest)
}
WatchRequest::WatchRequest(const WatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request_union();
  switch (from.request_union_case()) {
    case kCreateRequest: {
      _internal_mutable_create_request()->::etcdserverpb::WatchCreateRequest::MergeFrom(from._internal_create_request());
      break;
    }
    case kCancelRequest: {
      _internal_mutable_cancel_request()->::etcdserverpb::WatchCancelRequest::MergeFrom(from._internal_cancel_request());
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchRequest)
}

inline void WatchRequest::SharedCtor() {
clear_has_request_union();
}

WatchRequest::~WatchRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request_union()) {
    clear_request_union();
  }
}

void WatchRequest::ArenaDtor(void* object) {
  WatchRequest* _this = reinterpret_cast< WatchRequest* >(object);
  (void)_this;
}
void WatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchRequest::clear_request_union() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.WatchRequest)
  switch (request_union_case()) {
    case kCreateRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_union_.create_request_;
      }
      break;
    }
    case kCancelRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_union_.cancel_request_;
      }
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_UNION_NOT_SET;
}


void WatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request_union();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.WatchCreateRequest create_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.WatchCancelRequest cancel_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.WatchCreateRequest create_request = 1;
  if (_internal_has_create_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::create_request(this), target, stream);
  }

  // .etcdserverpb.WatchCancelRequest cancel_request = 2;
  if (_internal_has_cancel_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cancel_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchRequest)
  return target;
}

size_t WatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_union_case()) {
    // .etcdserverpb.WatchCreateRequest create_request = 1;
    case kCreateRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_union_.create_request_);
      break;
    }
    // .etcdserverpb.WatchCancelRequest cancel_request = 2;
    case kCancelRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_union_.cancel_request_);
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchRequest::GetClassData() const { return &_class_data_; }

void WatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchRequest *>(to)->MergeFrom(
      static_cast<const WatchRequest &>(from));
}


void WatchRequest::MergeFrom(const WatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_union_case()) {
    case kCreateRequest: {
      _internal_mutable_create_request()->::etcdserverpb::WatchCreateRequest::MergeFrom(from._internal_create_request());
      break;
    }
    case kCancelRequest: {
      _internal_mutable_cancel_request()->::etcdserverpb::WatchCancelRequest::MergeFrom(from._internal_cancel_request());
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchRequest::CopyFrom(const WatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchRequest::IsInitialized() const {
  return true;
}

void WatchRequest::InternalSwap(WatchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_union_, other->request_union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[20]);
}

// ===================================================================

class WatchCreateRequest::_Internal {
 public:
};

WatchCreateRequest::WatchCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.WatchCreateRequest)
}
WatchCreateRequest::WatchCreateRequest(const WatchCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_range_end().empty()) {
    range_end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_range_end(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_revision_, &from.start_revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&start_revision_)) + sizeof(prev_kv_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchCreateRequest)
}

inline void WatchCreateRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_revision_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_kv_) -
    reinterpret_cast<char*>(&start_revision_)) + sizeof(prev_kv_));
}

WatchCreateRequest::~WatchCreateRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchCreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WatchCreateRequest::ArenaDtor(void* object) {
  WatchCreateRequest* _this = reinterpret_cast< WatchCreateRequest* >(object);
  (void)_this;
}
void WatchCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  key_.ClearToEmpty();
  range_end_.ClearToEmpty();
  ::memset(&start_revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_kv_) -
      reinterpret_cast<char*>(&start_revision_)) + sizeof(prev_kv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchCreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_range_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          start_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool progress_notify = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          progress_notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_filters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_filters(static_cast<::etcdserverpb::WatchCreateRequest_FilterType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool prev_kv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          prev_kv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes range_end = 2;
  if (!this->_internal_range_end().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_range_end(), target);
  }

  // int64 start_revision = 3;
  if (this->_internal_start_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_start_revision(), target);
  }

  // bool progress_notify = 4;
  if (this->_internal_progress_notify() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_progress_notify(), target);
  }

  // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
  {
    int byte_size = _filters_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          5, filters_, byte_size, target);
    }
  }

  // bool prev_kv = 6;
  if (this->_internal_prev_kv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_prev_kv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchCreateRequest)
  return target;
}

size_t WatchCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_filters_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_filters(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _filters_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes range_end = 2;
  if (!this->_internal_range_end().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_end());
  }

  // int64 start_revision = 3;
  if (this->_internal_start_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_start_revision());
  }

  // bool progress_notify = 4;
  if (this->_internal_progress_notify() != 0) {
    total_size += 1 + 1;
  }

  // bool prev_kv = 6;
  if (this->_internal_prev_kv() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchCreateRequest::GetClassData() const { return &_class_data_; }

void WatchCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchCreateRequest *>(to)->MergeFrom(
      static_cast<const WatchCreateRequest &>(from));
}


void WatchCreateRequest::MergeFrom(const WatchCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_range_end().empty()) {
    _internal_set_range_end(from._internal_range_end());
  }
  if (from._internal_start_revision() != 0) {
    _internal_set_start_revision(from._internal_start_revision());
  }
  if (from._internal_progress_notify() != 0) {
    _internal_set_progress_notify(from._internal_progress_notify());
  }
  if (from._internal_prev_kv() != 0) {
    _internal_set_prev_kv(from._internal_prev_kv());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchCreateRequest::CopyFrom(const WatchCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchCreateRequest::IsInitialized() const {
  return true;
}

void WatchCreateRequest::InternalSwap(WatchCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &range_end_, lhs_arena,
      &other->range_end_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchCreateRequest, prev_kv_)
      + sizeof(WatchCreateRequest::prev_kv_)
      - PROTOBUF_FIELD_OFFSET(WatchCreateRequest, start_revision_)>(
          reinterpret_cast<char*>(&start_revision_),
          reinterpret_cast<char*>(&other->start_revision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchCreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[21]);
}

// ===================================================================

class WatchCancelRequest::_Internal {
 public:
};

WatchCancelRequest::WatchCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.WatchCancelRequest)
}
WatchCancelRequest::WatchCancelRequest(const WatchCancelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  watch_id_ = from.watch_id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchCancelRequest)
}

inline void WatchCancelRequest::SharedCtor() {
watch_id_ = int64_t{0};
}

WatchCancelRequest::~WatchCancelRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchCancelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchCancelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WatchCancelRequest::ArenaDtor(void* object) {
  WatchCancelRequest* _this = reinterpret_cast< WatchCancelRequest* >(object);
  (void)_this;
}
void WatchCancelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchCancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchCancelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  watch_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchCancelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 watch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          watch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchCancelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchCancelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 watch_id = 1;
  if (this->_internal_watch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_watch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchCancelRequest)
  return target;
}

size_t WatchCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchCancelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 watch_id = 1;
  if (this->_internal_watch_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_watch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchCancelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchCancelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchCancelRequest::GetClassData() const { return &_class_data_; }

void WatchCancelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchCancelRequest *>(to)->MergeFrom(
      static_cast<const WatchCancelRequest &>(from));
}


void WatchCancelRequest::MergeFrom(const WatchCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_watch_id() != 0) {
    _internal_set_watch_id(from._internal_watch_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchCancelRequest::CopyFrom(const WatchCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchCancelRequest::IsInitialized() const {
  return true;
}

void WatchCancelRequest::InternalSwap(WatchCancelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(watch_id_, other->watch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchCancelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[22]);
}

// ===================================================================

class WatchResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const WatchResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
WatchResponse::_Internal::header(const WatchResponse* msg) {
  return *msg->header_;
}
void WatchResponse::clear_events() {
  events_.Clear();
}
WatchResponse::WatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.WatchResponse)
}
WatchResponse::WatchResponse(const WatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cancel_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cancel_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cancel_reason().empty()) {
    cancel_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cancel_reason(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&watch_id_, &from.watch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&canceled_) -
    reinterpret_cast<char*>(&watch_id_)) + sizeof(canceled_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchResponse)
}

inline void WatchResponse::SharedCtor() {
cancel_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cancel_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&canceled_) -
    reinterpret_cast<char*>(&header_)) + sizeof(canceled_));
}

WatchResponse::~WatchResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cancel_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void WatchResponse::ArenaDtor(void* object) {
  WatchResponse* _this = reinterpret_cast< WatchResponse* >(object);
  (void)_this;
}
void WatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cancel_reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&watch_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&canceled_) -
      reinterpret_cast<char*>(&watch_id_)) + sizeof(canceled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 watch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          watch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool created = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool canceled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compact_revision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          compact_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cancel_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cancel_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.WatchResponse.cancel_reason"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mvccpb.Event events = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int64 watch_id = 2;
  if (this->_internal_watch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_watch_id(), target);
  }

  // bool created = 3;
  if (this->_internal_created() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_created(), target);
  }

  // bool canceled = 4;
  if (this->_internal_canceled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_canceled(), target);
  }

  // int64 compact_revision = 5;
  if (this->_internal_compact_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_compact_revision(), target);
  }

  // string cancel_reason = 6;
  if (!this->_internal_cancel_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cancel_reason().data(), static_cast<int>(this->_internal_cancel_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.WatchResponse.cancel_reason");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cancel_reason(), target);
  }

  // repeated .mvccpb.Event events = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchResponse)
  return target;
}

size_t WatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mvccpb.Event events = 11;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cancel_reason = 6;
  if (!this->_internal_cancel_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cancel_reason());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 watch_id = 2;
  if (this->_internal_watch_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_watch_id());
  }

  // int64 compact_revision = 5;
  if (this->_internal_compact_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_compact_revision());
  }

  // bool created = 3;
  if (this->_internal_created() != 0) {
    total_size += 1 + 1;
  }

  // bool canceled = 4;
  if (this->_internal_canceled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchResponse::GetClassData() const { return &_class_data_; }

void WatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchResponse *>(to)->MergeFrom(
      static_cast<const WatchResponse &>(from));
}


void WatchResponse::MergeFrom(const WatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_cancel_reason().empty()) {
    _internal_set_cancel_reason(from._internal_cancel_reason());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_watch_id() != 0) {
    _internal_set_watch_id(from._internal_watch_id());
  }
  if (from._internal_compact_revision() != 0) {
    _internal_set_compact_revision(from._internal_compact_revision());
  }
  if (from._internal_created() != 0) {
    _internal_set_created(from._internal_created());
  }
  if (from._internal_canceled() != 0) {
    _internal_set_canceled(from._internal_canceled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchResponse::CopyFrom(const WatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchResponse::IsInitialized() const {
  return true;
}

void WatchResponse::InternalSwap(WatchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cancel_reason_, lhs_arena,
      &other->cancel_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchResponse, canceled_)
      + sizeof(WatchResponse::canceled_)
      - PROTOBUF_FIELD_OFFSET(WatchResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[23]);
}

// ===================================================================

class LeaseGrantRequest::_Internal {
 public:
};

LeaseGrantRequest::LeaseGrantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseGrantRequest)
}
LeaseGrantRequest::LeaseGrantRequest(const LeaseGrantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ttl_, &from.ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ttl_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseGrantRequest)
}

inline void LeaseGrantRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ttl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ttl_)) + sizeof(id_));
}

LeaseGrantRequest::~LeaseGrantRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseGrantRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseGrantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaseGrantRequest::ArenaDtor(void* object) {
  LeaseGrantRequest* _this = reinterpret_cast< LeaseGrantRequest* >(object);
  (void)_this;
}
void LeaseGrantRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseGrantRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseGrantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseGrantRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ttl_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseGrantRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 TTL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseGrantRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseGrantRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 TTL = 1;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ttl(), target);
  }

  // int64 ID = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseGrantRequest)
  return target;
}

size_t LeaseGrantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseGrantRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 TTL = 1;
  if (this->_internal_ttl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
  }

  // int64 ID = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseGrantRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseGrantRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseGrantRequest::GetClassData() const { return &_class_data_; }

void LeaseGrantRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseGrantRequest *>(to)->MergeFrom(
      static_cast<const LeaseGrantRequest &>(from));
}


void LeaseGrantRequest::MergeFrom(const LeaseGrantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseGrantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseGrantRequest::CopyFrom(const LeaseGrantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseGrantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseGrantRequest::IsInitialized() const {
  return true;
}

void LeaseGrantRequest::InternalSwap(LeaseGrantRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaseGrantRequest, id_)
      + sizeof(LeaseGrantRequest::id_)
      - PROTOBUF_FIELD_OFFSET(LeaseGrantRequest, ttl_)>(
          reinterpret_cast<char*>(&ttl_),
          reinterpret_cast<char*>(&other->ttl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseGrantRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[24]);
}

// ===================================================================

class LeaseGrantResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseGrantResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseGrantResponse::_Internal::header(const LeaseGrantResponse* msg) {
  return *msg->header_;
}
LeaseGrantResponse::LeaseGrantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseGrantResponse)
}
LeaseGrantResponse::LeaseGrantResponse(const LeaseGrantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ttl_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseGrantResponse)
}

inline void LeaseGrantResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&header_)) + sizeof(ttl_));
}

LeaseGrantResponse::~LeaseGrantResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseGrantResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseGrantResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void LeaseGrantResponse::ArenaDtor(void* object) {
  LeaseGrantResponse* _this = reinterpret_cast< LeaseGrantResponse* >(object);
  (void)_this;
}
void LeaseGrantResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseGrantResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseGrantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseGrantResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseGrantResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TTL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.LeaseGrantResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseGrantResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseGrantResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int64 ID = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // int64 TTL = 3;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttl(), target);
  }

  // string error = 4;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.LeaseGrantResponse.error");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseGrantResponse)
  return target;
}

size_t LeaseGrantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseGrantResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 4;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 ID = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 TTL = 3;
  if (this->_internal_ttl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseGrantResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseGrantResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseGrantResponse::GetClassData() const { return &_class_data_; }

void LeaseGrantResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseGrantResponse *>(to)->MergeFrom(
      static_cast<const LeaseGrantResponse &>(from));
}


void LeaseGrantResponse::MergeFrom(const LeaseGrantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseGrantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseGrantResponse::CopyFrom(const LeaseGrantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseGrantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseGrantResponse::IsInitialized() const {
  return true;
}

void LeaseGrantResponse::InternalSwap(LeaseGrantResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaseGrantResponse, ttl_)
      + sizeof(LeaseGrantResponse::ttl_)
      - PROTOBUF_FIELD_OFFSET(LeaseGrantResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseGrantResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[25]);
}

// ===================================================================

class LeaseRevokeRequest::_Internal {
 public:
};

LeaseRevokeRequest::LeaseRevokeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseRevokeRequest)
}
LeaseRevokeRequest::LeaseRevokeRequest(const LeaseRevokeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseRevokeRequest)
}

inline void LeaseRevokeRequest::SharedCtor() {
id_ = int64_t{0};
}

LeaseRevokeRequest::~LeaseRevokeRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseRevokeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseRevokeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaseRevokeRequest::ArenaDtor(void* object) {
  LeaseRevokeRequest* _this = reinterpret_cast< LeaseRevokeRequest* >(object);
  (void)_this;
}
void LeaseRevokeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseRevokeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseRevokeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseRevokeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseRevokeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseRevokeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseRevokeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseRevokeRequest)
  return target;
}

size_t LeaseRevokeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseRevokeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseRevokeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseRevokeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseRevokeRequest::GetClassData() const { return &_class_data_; }

void LeaseRevokeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseRevokeRequest *>(to)->MergeFrom(
      static_cast<const LeaseRevokeRequest &>(from));
}


void LeaseRevokeRequest::MergeFrom(const LeaseRevokeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseRevokeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseRevokeRequest::CopyFrom(const LeaseRevokeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseRevokeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseRevokeRequest::IsInitialized() const {
  return true;
}

void LeaseRevokeRequest::InternalSwap(LeaseRevokeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseRevokeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[26]);
}

// ===================================================================

class LeaseRevokeResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseRevokeResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseRevokeResponse::_Internal::header(const LeaseRevokeResponse* msg) {
  return *msg->header_;
}
LeaseRevokeResponse::LeaseRevokeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseRevokeResponse)
}
LeaseRevokeResponse::LeaseRevokeResponse(const LeaseRevokeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseRevokeResponse)
}

inline void LeaseRevokeResponse::SharedCtor() {
header_ = nullptr;
}

LeaseRevokeResponse::~LeaseRevokeResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseRevokeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseRevokeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void LeaseRevokeResponse::ArenaDtor(void* object) {
  LeaseRevokeResponse* _this = reinterpret_cast< LeaseRevokeResponse* >(object);
  (void)_this;
}
void LeaseRevokeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseRevokeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseRevokeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseRevokeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseRevokeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseRevokeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseRevokeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseRevokeResponse)
  return target;
}

size_t LeaseRevokeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseRevokeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseRevokeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseRevokeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseRevokeResponse::GetClassData() const { return &_class_data_; }

void LeaseRevokeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseRevokeResponse *>(to)->MergeFrom(
      static_cast<const LeaseRevokeResponse &>(from));
}


void LeaseRevokeResponse::MergeFrom(const LeaseRevokeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseRevokeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseRevokeResponse::CopyFrom(const LeaseRevokeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseRevokeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseRevokeResponse::IsInitialized() const {
  return true;
}

void LeaseRevokeResponse::InternalSwap(LeaseRevokeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseRevokeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[27]);
}

// ===================================================================

class LeaseKeepAliveRequest::_Internal {
 public:
};

LeaseKeepAliveRequest::LeaseKeepAliveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseKeepAliveRequest)
}
LeaseKeepAliveRequest::LeaseKeepAliveRequest(const LeaseKeepAliveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseKeepAliveRequest)
}

inline void LeaseKeepAliveRequest::SharedCtor() {
id_ = int64_t{0};
}

LeaseKeepAliveRequest::~LeaseKeepAliveRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseKeepAliveRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseKeepAliveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaseKeepAliveRequest::ArenaDtor(void* object) {
  LeaseKeepAliveRequest* _this = reinterpret_cast< LeaseKeepAliveRequest* >(object);
  (void)_this;
}
void LeaseKeepAliveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseKeepAliveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseKeepAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseKeepAliveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseKeepAliveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseKeepAliveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseKeepAliveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseKeepAliveRequest)
  return target;
}

size_t LeaseKeepAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseKeepAliveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseKeepAliveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseKeepAliveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseKeepAliveRequest::GetClassData() const { return &_class_data_; }

void LeaseKeepAliveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseKeepAliveRequest *>(to)->MergeFrom(
      static_cast<const LeaseKeepAliveRequest &>(from));
}


void LeaseKeepAliveRequest::MergeFrom(const LeaseKeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseKeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseKeepAliveRequest::CopyFrom(const LeaseKeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseKeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseKeepAliveRequest::IsInitialized() const {
  return true;
}

void LeaseKeepAliveRequest::InternalSwap(LeaseKeepAliveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseKeepAliveRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[28]);
}

// ===================================================================

class LeaseKeepAliveResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseKeepAliveResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseKeepAliveResponse::_Internal::header(const LeaseKeepAliveResponse* msg) {
  return *msg->header_;
}
LeaseKeepAliveResponse::LeaseKeepAliveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseKeepAliveResponse)
}
LeaseKeepAliveResponse::LeaseKeepAliveResponse(const LeaseKeepAliveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ttl_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseKeepAliveResponse)
}

inline void LeaseKeepAliveResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&header_)) + sizeof(ttl_));
}

LeaseKeepAliveResponse::~LeaseKeepAliveResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseKeepAliveResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseKeepAliveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void LeaseKeepAliveResponse::ArenaDtor(void* object) {
  LeaseKeepAliveResponse* _this = reinterpret_cast< LeaseKeepAliveResponse* >(object);
  (void)_this;
}
void LeaseKeepAliveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseKeepAliveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseKeepAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseKeepAliveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseKeepAliveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TTL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseKeepAliveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseKeepAliveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int64 ID = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // int64 TTL = 3;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseKeepAliveResponse)
  return target;
}

size_t LeaseKeepAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseKeepAliveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 ID = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 TTL = 3;
  if (this->_internal_ttl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseKeepAliveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseKeepAliveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseKeepAliveResponse::GetClassData() const { return &_class_data_; }

void LeaseKeepAliveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseKeepAliveResponse *>(to)->MergeFrom(
      static_cast<const LeaseKeepAliveResponse &>(from));
}


void LeaseKeepAliveResponse::MergeFrom(const LeaseKeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseKeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseKeepAliveResponse::CopyFrom(const LeaseKeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseKeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseKeepAliveResponse::IsInitialized() const {
  return true;
}

void LeaseKeepAliveResponse::InternalSwap(LeaseKeepAliveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaseKeepAliveResponse, ttl_)
      + sizeof(LeaseKeepAliveResponse::ttl_)
      - PROTOBUF_FIELD_OFFSET(LeaseKeepAliveResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseKeepAliveResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[29]);
}

// ===================================================================

class LeaseTimeToLiveRequest::_Internal {
 public:
};

LeaseTimeToLiveRequest::LeaseTimeToLiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseTimeToLiveRequest)
}
LeaseTimeToLiveRequest::LeaseTimeToLiveRequest(const LeaseTimeToLiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&keys_) -
    reinterpret_cast<char*>(&id_)) + sizeof(keys_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseTimeToLiveRequest)
}

inline void LeaseTimeToLiveRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keys_) -
    reinterpret_cast<char*>(&id_)) + sizeof(keys_));
}

LeaseTimeToLiveRequest::~LeaseTimeToLiveRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseTimeToLiveRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseTimeToLiveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaseTimeToLiveRequest::ArenaDtor(void* object) {
  LeaseTimeToLiveRequest* _this = reinterpret_cast< LeaseTimeToLiveRequest* >(object);
  (void)_this;
}
void LeaseTimeToLiveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseTimeToLiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseTimeToLiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseTimeToLiveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keys_) -
      reinterpret_cast<char*>(&id_)) + sizeof(keys_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseTimeToLiveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseTimeToLiveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseTimeToLiveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // bool keys = 2;
  if (this->_internal_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_keys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseTimeToLiveRequest)
  return target;
}

size_t LeaseTimeToLiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseTimeToLiveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // bool keys = 2;
  if (this->_internal_keys() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseTimeToLiveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseTimeToLiveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseTimeToLiveRequest::GetClassData() const { return &_class_data_; }

void LeaseTimeToLiveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseTimeToLiveRequest *>(to)->MergeFrom(
      static_cast<const LeaseTimeToLiveRequest &>(from));
}


void LeaseTimeToLiveRequest::MergeFrom(const LeaseTimeToLiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseTimeToLiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_keys() != 0) {
    _internal_set_keys(from._internal_keys());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseTimeToLiveRequest::CopyFrom(const LeaseTimeToLiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseTimeToLiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseTimeToLiveRequest::IsInitialized() const {
  return true;
}

void LeaseTimeToLiveRequest::InternalSwap(LeaseTimeToLiveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaseTimeToLiveRequest, keys_)
      + sizeof(LeaseTimeToLiveRequest::keys_)
      - PROTOBUF_FIELD_OFFSET(LeaseTimeToLiveRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseTimeToLiveRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[30]);
}

// ===================================================================

class LeaseTimeToLiveResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseTimeToLiveResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseTimeToLiveResponse::_Internal::header(const LeaseTimeToLiveResponse* msg) {
  return *msg->header_;
}
LeaseTimeToLiveResponse::LeaseTimeToLiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseTimeToLiveResponse)
}
LeaseTimeToLiveResponse::LeaseTimeToLiveResponse(const LeaseTimeToLiveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grantedttl_) -
    reinterpret_cast<char*>(&id_)) + sizeof(grantedttl_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseTimeToLiveResponse)
}

inline void LeaseTimeToLiveResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grantedttl_) -
    reinterpret_cast<char*>(&header_)) + sizeof(grantedttl_));
}

LeaseTimeToLiveResponse::~LeaseTimeToLiveResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseTimeToLiveResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseTimeToLiveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void LeaseTimeToLiveResponse::ArenaDtor(void* object) {
  LeaseTimeToLiveResponse* _this = reinterpret_cast< LeaseTimeToLiveResponse* >(object);
  (void)_this;
}
void LeaseTimeToLiveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseTimeToLiveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseTimeToLiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseTimeToLiveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grantedttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(grantedttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseTimeToLiveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TTL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 grantedTTL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          grantedttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseTimeToLiveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseTimeToLiveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int64 ID = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // int64 TTL = 3;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttl(), target);
  }

  // int64 grantedTTL = 4;
  if (this->_internal_grantedttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_grantedttl(), target);
  }

  // repeated bytes keys = 5;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseTimeToLiveResponse)
  return target;
}

size_t LeaseTimeToLiveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseTimeToLiveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      keys_.Get(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 ID = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 TTL = 3;
  if (this->_internal_ttl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
  }

  // int64 grantedTTL = 4;
  if (this->_internal_grantedttl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_grantedttl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseTimeToLiveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseTimeToLiveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseTimeToLiveResponse::GetClassData() const { return &_class_data_; }

void LeaseTimeToLiveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseTimeToLiveResponse *>(to)->MergeFrom(
      static_cast<const LeaseTimeToLiveResponse &>(from));
}


void LeaseTimeToLiveResponse::MergeFrom(const LeaseTimeToLiveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseTimeToLiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  if (from._internal_grantedttl() != 0) {
    _internal_set_grantedttl(from._internal_grantedttl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseTimeToLiveResponse::CopyFrom(const LeaseTimeToLiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseTimeToLiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseTimeToLiveResponse::IsInitialized() const {
  return true;
}

void LeaseTimeToLiveResponse::InternalSwap(LeaseTimeToLiveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaseTimeToLiveResponse, grantedttl_)
      + sizeof(LeaseTimeToLiveResponse::grantedttl_)
      - PROTOBUF_FIELD_OFFSET(LeaseTimeToLiveResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseTimeToLiveResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[31]);
}

// ===================================================================

class LeaseLeasesRequest::_Internal {
 public:
};

LeaseLeasesRequest::LeaseLeasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseLeasesRequest)
}
LeaseLeasesRequest::LeaseLeasesRequest(const LeaseLeasesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseLeasesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseLeasesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseLeasesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LeaseLeasesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[32]);
}

// ===================================================================

class LeaseStatus::_Internal {
 public:
};

LeaseStatus::LeaseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseStatus)
}
LeaseStatus::LeaseStatus(const LeaseStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseStatus)
}

inline void LeaseStatus::SharedCtor() {
id_ = int64_t{0};
}

LeaseStatus::~LeaseStatus() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaseStatus::ArenaDtor(void* object) {
  LeaseStatus* _this = reinterpret_cast< LeaseStatus* >(object);
  (void)_this;
}
void LeaseStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseStatus)
  return target;
}

size_t LeaseStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseStatus::GetClassData() const { return &_class_data_; }

void LeaseStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseStatus *>(to)->MergeFrom(
      static_cast<const LeaseStatus &>(from));
}


void LeaseStatus::MergeFrom(const LeaseStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseStatus::CopyFrom(const LeaseStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseStatus::IsInitialized() const {
  return true;
}

void LeaseStatus::InternalSwap(LeaseStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[33]);
}

// ===================================================================

class LeaseLeasesResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseLeasesResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseLeasesResponse::_Internal::header(const LeaseLeasesResponse* msg) {
  return *msg->header_;
}
LeaseLeasesResponse::LeaseLeasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  leases_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.LeaseLeasesResponse)
}
LeaseLeasesResponse::LeaseLeasesResponse(const LeaseLeasesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leases_(from.leases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseLeasesResponse)
}

inline void LeaseLeasesResponse::SharedCtor() {
header_ = nullptr;
}

LeaseLeasesResponse::~LeaseLeasesResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseLeasesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaseLeasesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void LeaseLeasesResponse::ArenaDtor(void* object) {
  LeaseLeasesResponse* _this = reinterpret_cast< LeaseLeasesResponse* >(object);
  (void)_this;
}
void LeaseLeasesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseLeasesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaseLeasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseLeasesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leases_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseLeasesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.LeaseStatus leases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaseLeasesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseLeasesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.LeaseStatus leases = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_leases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseLeasesResponse)
  return target;
}

size_t LeaseLeasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseLeasesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.LeaseStatus leases = 2;
  total_size += 1UL * this->_internal_leases_size();
  for (const auto& msg : this->leases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaseLeasesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaseLeasesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaseLeasesResponse::GetClassData() const { return &_class_data_; }

void LeaseLeasesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaseLeasesResponse *>(to)->MergeFrom(
      static_cast<const LeaseLeasesResponse &>(from));
}


void LeaseLeasesResponse::MergeFrom(const LeaseLeasesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseLeasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  leases_.MergeFrom(from.leases_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaseLeasesResponse::CopyFrom(const LeaseLeasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseLeasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseLeasesResponse::IsInitialized() const {
  return true;
}

void LeaseLeasesResponse::InternalSwap(LeaseLeasesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  leases_.InternalSwap(&other->leases_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseLeasesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[34]);
}

// ===================================================================

class Member::_Internal {
 public:
};

Member::Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  peerurls_(arena),
  clienturls_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.Member)
}
Member::Member(const Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peerurls_(from.peerurls_),
      clienturls_(from.clienturls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.Member)
}

inline void Member::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = uint64_t{0u};
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:etcdserverpb.Member)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Member::ArenaDtor(void* object) {
  Member* _this = reinterpret_cast< Member* >(object);
  (void)_this;
}
void Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.Member)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerurls_.Clear();
  clienturls_.Clear();
  name_.ClearToEmpty();
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.Member.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string peerURLs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_peerurls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.Member.peerURLs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string clientURLs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_clienturls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.Member.clientURLs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Member::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.Member)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string peerURLs = 3;
  for (int i = 0, n = this->_internal_peerurls_size(); i < n; i++) {
    const auto& s = this->_internal_peerurls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.peerURLs");
    target = stream->WriteString(3, s, target);
  }

  // repeated string clientURLs = 4;
  for (int i = 0, n = this->_internal_clienturls_size(); i < n; i++) {
    const auto& s = this->_internal_clienturls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.clientURLs");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.Member)
  return target;
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.Member)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string peerURLs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peerurls_.size());
  for (int i = 0, n = peerurls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peerurls_.Get(i));
  }

  // repeated string clientURLs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(clienturls_.size());
  for (int i = 0, n = clienturls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      clienturls_.Get(i));
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Member::GetClassData() const { return &_class_data_; }

void Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Member *>(to)->MergeFrom(
      static_cast<const Member &>(from));
}


void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.Member)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  peerurls_.MergeFrom(from.peerurls_);
  clienturls_.MergeFrom(from.clienturls_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  return true;
}

void Member::InternalSwap(Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  peerurls_.InternalSwap(&other->peerurls_);
  clienturls_.InternalSwap(&other->clienturls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[35]);
}

// ===================================================================

class MemberAddRequest::_Internal {
 public:
};

MemberAddRequest::MemberAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  peerurls_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MemberAddRequest)
}
MemberAddRequest::MemberAddRequest(const MemberAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peerurls_(from.peerurls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberAddRequest)
}

inline void MemberAddRequest::SharedCtor() {
}

MemberAddRequest::~MemberAddRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberAddRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemberAddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemberAddRequest::ArenaDtor(void* object) {
  MemberAddRequest* _this = reinterpret_cast< MemberAddRequest* >(object);
  (void)_this;
}
void MemberAddRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemberAddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberAddRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerurls_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberAddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string peerURLs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_peerurls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.MemberAddRequest.peerURLs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberAddRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberAddRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string peerURLs = 1;
  for (int i = 0, n = this->_internal_peerurls_size(); i < n; i++) {
    const auto& s = this->_internal_peerurls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.MemberAddRequest.peerURLs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberAddRequest)
  return target;
}

size_t MemberAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberAddRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string peerURLs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peerurls_.size());
  for (int i = 0, n = peerurls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peerurls_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberAddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberAddRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberAddRequest::GetClassData() const { return &_class_data_; }

void MemberAddRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberAddRequest *>(to)->MergeFrom(
      static_cast<const MemberAddRequest &>(from));
}


void MemberAddRequest::MergeFrom(const MemberAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  peerurls_.MergeFrom(from.peerurls_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberAddRequest::CopyFrom(const MemberAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAddRequest::IsInitialized() const {
  return true;
}

void MemberAddRequest::InternalSwap(MemberAddRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  peerurls_.InternalSwap(&other->peerurls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberAddRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[36]);
}

// ===================================================================

class MemberAddResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MemberAddResponse* msg);
  static const ::etcdserverpb::Member& member(const MemberAddResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MemberAddResponse::_Internal::header(const MemberAddResponse* msg) {
  return *msg->header_;
}
const ::etcdserverpb::Member&
MemberAddResponse::_Internal::member(const MemberAddResponse* msg) {
  return *msg->member_;
}
MemberAddResponse::MemberAddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MemberAddResponse)
}
MemberAddResponse::MemberAddResponse(const MemberAddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_member()) {
    member_ = new ::etcdserverpb::Member(*from.member_);
  } else {
    member_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberAddResponse)
}

inline void MemberAddResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&member_) -
    reinterpret_cast<char*>(&header_)) + sizeof(member_));
}

MemberAddResponse::~MemberAddResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberAddResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemberAddResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete member_;
}

void MemberAddResponse::ArenaDtor(void* object) {
  MemberAddResponse* _this = reinterpret_cast< MemberAddResponse* >(object);
  (void)_this;
}
void MemberAddResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemberAddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberAddResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && member_ != nullptr) {
    delete member_;
  }
  member_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberAddResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.Member member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.Member members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberAddResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberAddResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .etcdserverpb.Member member = 2;
  if (this->_internal_has_member()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::member(this), target, stream);
  }

  // repeated .etcdserverpb.Member members = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberAddResponse)
  return target;
}

size_t MemberAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberAddResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Member members = 3;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .etcdserverpb.Member member = 2;
  if (this->_internal_has_member()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberAddResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberAddResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberAddResponse::GetClassData() const { return &_class_data_; }

void MemberAddResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberAddResponse *>(to)->MergeFrom(
      static_cast<const MemberAddResponse &>(from));
}


void MemberAddResponse::MergeFrom(const MemberAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_member()) {
    _internal_mutable_member()->::etcdserverpb::Member::MergeFrom(from._internal_member());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberAddResponse::CopyFrom(const MemberAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAddResponse::IsInitialized() const {
  return true;
}

void MemberAddResponse::InternalSwap(MemberAddResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemberAddResponse, member_)
      + sizeof(MemberAddResponse::member_)
      - PROTOBUF_FIELD_OFFSET(MemberAddResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberAddResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[37]);
}

// ===================================================================

class MemberRemoveRequest::_Internal {
 public:
};

MemberRemoveRequest::MemberRemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MemberRemoveRequest)
}
MemberRemoveRequest::MemberRemoveRequest(const MemberRemoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberRemoveRequest)
}

inline void MemberRemoveRequest::SharedCtor() {
id_ = uint64_t{0u};
}

MemberRemoveRequest::~MemberRemoveRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberRemoveRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemberRemoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemberRemoveRequest::ArenaDtor(void* object) {
  MemberRemoveRequest* _this = reinterpret_cast< MemberRemoveRequest* >(object);
  (void)_this;
}
void MemberRemoveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemberRemoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberRemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberRemoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberRemoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberRemoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberRemoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberRemoveRequest)
  return target;
}

size_t MemberRemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberRemoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberRemoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberRemoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberRemoveRequest::GetClassData() const { return &_class_data_; }

void MemberRemoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberRemoveRequest *>(to)->MergeFrom(
      static_cast<const MemberRemoveRequest &>(from));
}


void MemberRemoveRequest::MergeFrom(const MemberRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberRemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberRemoveRequest::CopyFrom(const MemberRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRemoveRequest::IsInitialized() const {
  return true;
}

void MemberRemoveRequest::InternalSwap(MemberRemoveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberRemoveRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[38]);
}

// ===================================================================

class MemberRemoveResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MemberRemoveResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MemberRemoveResponse::_Internal::header(const MemberRemoveResponse* msg) {
  return *msg->header_;
}
MemberRemoveResponse::MemberRemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MemberRemoveResponse)
}
MemberRemoveResponse::MemberRemoveResponse(const MemberRemoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberRemoveResponse)
}

inline void MemberRemoveResponse::SharedCtor() {
header_ = nullptr;
}

MemberRemoveResponse::~MemberRemoveResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberRemoveResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemberRemoveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void MemberRemoveResponse::ArenaDtor(void* object) {
  MemberRemoveResponse* _this = reinterpret_cast< MemberRemoveResponse* >(object);
  (void)_this;
}
void MemberRemoveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemberRemoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberRemoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberRemoveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberRemoveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberRemoveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberRemoveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberRemoveResponse)
  return target;
}

size_t MemberRemoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberRemoveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberRemoveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberRemoveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberRemoveResponse::GetClassData() const { return &_class_data_; }

void MemberRemoveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberRemoveResponse *>(to)->MergeFrom(
      static_cast<const MemberRemoveResponse &>(from));
}


void MemberRemoveResponse::MergeFrom(const MemberRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberRemoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberRemoveResponse::CopyFrom(const MemberRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRemoveResponse::IsInitialized() const {
  return true;
}

void MemberRemoveResponse::InternalSwap(MemberRemoveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberRemoveResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[39]);
}

// ===================================================================

class MemberUpdateRequest::_Internal {
 public:
};

MemberUpdateRequest::MemberUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  peerurls_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MemberUpdateRequest)
}
MemberUpdateRequest::MemberUpdateRequest(const MemberUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peerurls_(from.peerurls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberUpdateRequest)
}

inline void MemberUpdateRequest::SharedCtor() {
id_ = uint64_t{0u};
}

MemberUpdateRequest::~MemberUpdateRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberUpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemberUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemberUpdateRequest::ArenaDtor(void* object) {
  MemberUpdateRequest* _this = reinterpret_cast< MemberUpdateRequest* >(object);
  (void)_this;
}
void MemberUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemberUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerurls_.Clear();
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string peerURLs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_peerurls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.MemberUpdateRequest.peerURLs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated string peerURLs = 2;
  for (int i = 0, n = this->_internal_peerurls_size(); i < n; i++) {
    const auto& s = this->_internal_peerurls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.MemberUpdateRequest.peerURLs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberUpdateRequest)
  return target;
}

size_t MemberUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string peerURLs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peerurls_.size());
  for (int i = 0, n = peerurls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peerurls_.Get(i));
  }

  // uint64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberUpdateRequest::GetClassData() const { return &_class_data_; }

void MemberUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberUpdateRequest *>(to)->MergeFrom(
      static_cast<const MemberUpdateRequest &>(from));
}


void MemberUpdateRequest::MergeFrom(const MemberUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  peerurls_.MergeFrom(from.peerurls_);
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberUpdateRequest::CopyFrom(const MemberUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberUpdateRequest::IsInitialized() const {
  return true;
}

void MemberUpdateRequest::InternalSwap(MemberUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  peerurls_.InternalSwap(&other->peerurls_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberUpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[40]);
}

// ===================================================================

class MemberUpdateResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MemberUpdateResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MemberUpdateResponse::_Internal::header(const MemberUpdateResponse* msg) {
  return *msg->header_;
}
MemberUpdateResponse::MemberUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MemberUpdateResponse)
}
MemberUpdateResponse::MemberUpdateResponse(const MemberUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberUpdateResponse)
}

inline void MemberUpdateResponse::SharedCtor() {
header_ = nullptr;
}

MemberUpdateResponse::~MemberUpdateResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberUpdateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemberUpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void MemberUpdateResponse::ArenaDtor(void* object) {
  MemberUpdateResponse* _this = reinterpret_cast< MemberUpdateResponse* >(object);
  (void)_this;
}
void MemberUpdateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemberUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberUpdateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberUpdateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberUpdateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberUpdateResponse)
  return target;
}

size_t MemberUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberUpdateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberUpdateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberUpdateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberUpdateResponse::GetClassData() const { return &_class_data_; }

void MemberUpdateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberUpdateResponse *>(to)->MergeFrom(
      static_cast<const MemberUpdateResponse &>(from));
}


void MemberUpdateResponse::MergeFrom(const MemberUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberUpdateResponse::CopyFrom(const MemberUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberUpdateResponse::IsInitialized() const {
  return true;
}

void MemberUpdateResponse::InternalSwap(MemberUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberUpdateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[41]);
}

// ===================================================================

class MemberListRequest::_Internal {
 public:
};

MemberListRequest::MemberListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MemberListRequest)
}
MemberListRequest::MemberListRequest(const MemberListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MemberListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[42]);
}

// ===================================================================

class MemberListResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MemberListResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MemberListResponse::_Internal::header(const MemberListResponse* msg) {
  return *msg->header_;
}
MemberListResponse::MemberListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MemberListResponse)
}
MemberListResponse::MemberListResponse(const MemberListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberListResponse)
}

inline void MemberListResponse::SharedCtor() {
header_ = nullptr;
}

MemberListResponse::~MemberListResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemberListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void MemberListResponse::ArenaDtor(void* object) {
  MemberListResponse* _this = reinterpret_cast< MemberListResponse* >(object);
  (void)_this;
}
void MemberListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemberListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberListResponse)
  return target;
}

size_t MemberListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberListResponse::GetClassData() const { return &_class_data_; }

void MemberListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberListResponse *>(to)->MergeFrom(
      static_cast<const MemberListResponse &>(from));
}


void MemberListResponse::MergeFrom(const MemberListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberListResponse::CopyFrom(const MemberListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberListResponse::IsInitialized() const {
  return true;
}

void MemberListResponse::InternalSwap(MemberListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[43]);
}

// ===================================================================

class DefragmentRequest::_Internal {
 public:
};

DefragmentRequest::DefragmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.DefragmentRequest)
}
DefragmentRequest::DefragmentRequest(const DefragmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DefragmentRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefragmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefragmentRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DefragmentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[44]);
}

// ===================================================================

class DefragmentResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const DefragmentResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
DefragmentResponse::_Internal::header(const DefragmentResponse* msg) {
  return *msg->header_;
}
DefragmentResponse::DefragmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.DefragmentResponse)
}
DefragmentResponse::DefragmentResponse(const DefragmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DefragmentResponse)
}

inline void DefragmentResponse::SharedCtor() {
header_ = nullptr;
}

DefragmentResponse::~DefragmentResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DefragmentResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DefragmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DefragmentResponse::ArenaDtor(void* object) {
  DefragmentResponse* _this = reinterpret_cast< DefragmentResponse* >(object);
  (void)_this;
}
void DefragmentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefragmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DefragmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DefragmentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefragmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DefragmentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DefragmentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DefragmentResponse)
  return target;
}

size_t DefragmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DefragmentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefragmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DefragmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefragmentResponse::GetClassData() const { return &_class_data_; }

void DefragmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DefragmentResponse *>(to)->MergeFrom(
      static_cast<const DefragmentResponse &>(from));
}


void DefragmentResponse::MergeFrom(const DefragmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DefragmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefragmentResponse::CopyFrom(const DefragmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DefragmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefragmentResponse::IsInitialized() const {
  return true;
}

void DefragmentResponse::InternalSwap(DefragmentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefragmentResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[45]);
}

// ===================================================================

class MoveLeaderRequest::_Internal {
 public:
};

MoveLeaderRequest::MoveLeaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MoveLeaderRequest)
}
MoveLeaderRequest::MoveLeaderRequest(const MoveLeaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetid_ = from.targetid_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MoveLeaderRequest)
}

inline void MoveLeaderRequest::SharedCtor() {
targetid_ = uint64_t{0u};
}

MoveLeaderRequest::~MoveLeaderRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MoveLeaderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveLeaderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveLeaderRequest::ArenaDtor(void* object) {
  MoveLeaderRequest* _this = reinterpret_cast< MoveLeaderRequest* >(object);
  (void)_this;
}
void MoveLeaderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveLeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MoveLeaderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveLeaderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 targetID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveLeaderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MoveLeaderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 targetID = 1;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_targetid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MoveLeaderRequest)
  return target;
}

size_t MoveLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MoveLeaderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 targetID = 1;
  if (this->_internal_targetid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_targetid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveLeaderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveLeaderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveLeaderRequest::GetClassData() const { return &_class_data_; }

void MoveLeaderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveLeaderRequest *>(to)->MergeFrom(
      static_cast<const MoveLeaderRequest &>(from));
}


void MoveLeaderRequest::MergeFrom(const MoveLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MoveLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveLeaderRequest::CopyFrom(const MoveLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MoveLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLeaderRequest::IsInitialized() const {
  return true;
}

void MoveLeaderRequest::InternalSwap(MoveLeaderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(targetid_, other->targetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveLeaderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[46]);
}

// ===================================================================

class MoveLeaderResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MoveLeaderResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MoveLeaderResponse::_Internal::header(const MoveLeaderResponse* msg) {
  return *msg->header_;
}
MoveLeaderResponse::MoveLeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.MoveLeaderResponse)
}
MoveLeaderResponse::MoveLeaderResponse(const MoveLeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MoveLeaderResponse)
}

inline void MoveLeaderResponse::SharedCtor() {
header_ = nullptr;
}

MoveLeaderResponse::~MoveLeaderResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MoveLeaderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveLeaderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void MoveLeaderResponse::ArenaDtor(void* object) {
  MoveLeaderResponse* _this = reinterpret_cast< MoveLeaderResponse* >(object);
  (void)_this;
}
void MoveLeaderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveLeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MoveLeaderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveLeaderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveLeaderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MoveLeaderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MoveLeaderResponse)
  return target;
}

size_t MoveLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MoveLeaderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveLeaderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveLeaderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveLeaderResponse::GetClassData() const { return &_class_data_; }

void MoveLeaderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveLeaderResponse *>(to)->MergeFrom(
      static_cast<const MoveLeaderResponse &>(from));
}


void MoveLeaderResponse::MergeFrom(const MoveLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MoveLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveLeaderResponse::CopyFrom(const MoveLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MoveLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLeaderResponse::IsInitialized() const {
  return true;
}

void MoveLeaderResponse::InternalSwap(MoveLeaderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveLeaderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[47]);
}

// ===================================================================

class AlarmRequest::_Internal {
 public:
};

AlarmRequest::AlarmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AlarmRequest)
}
AlarmRequest::AlarmRequest(const AlarmRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AlarmRequest)
}

inline void AlarmRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&memberid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
}

AlarmRequest::~AlarmRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AlarmRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlarmRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AlarmRequest::ArenaDtor(void* object) {
  AlarmRequest* _this = reinterpret_cast< AlarmRequest* >(object);
  (void)_this;
}
void AlarmRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlarmRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlarmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AlarmRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarm_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlarmRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::etcdserverpb::AlarmRequest_AlarmAction>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 memberID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.AlarmType alarm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_alarm(static_cast<::etcdserverpb::AlarmType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlarmRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AlarmRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // uint64 memberID = 2;
  if (this->_internal_memberid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_memberid(), target);
  }

  // .etcdserverpb.AlarmType alarm = 3;
  if (this->_internal_alarm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_alarm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AlarmRequest)
  return target;
}

size_t AlarmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AlarmRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 memberID = 2;
  if (this->_internal_memberid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_memberid());
  }

  // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // .etcdserverpb.AlarmType alarm = 3;
  if (this->_internal_alarm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alarm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlarmRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlarmRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlarmRequest::GetClassData() const { return &_class_data_; }

void AlarmRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AlarmRequest *>(to)->MergeFrom(
      static_cast<const AlarmRequest &>(from));
}


void AlarmRequest::MergeFrom(const AlarmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_memberid() != 0) {
    _internal_set_memberid(from._internal_memberid());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_alarm() != 0) {
    _internal_set_alarm(from._internal_alarm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlarmRequest::CopyFrom(const AlarmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmRequest::IsInitialized() const {
  return true;
}

void AlarmRequest::InternalSwap(AlarmRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlarmRequest, alarm_)
      + sizeof(AlarmRequest::alarm_)
      - PROTOBUF_FIELD_OFFSET(AlarmRequest, memberid_)>(
          reinterpret_cast<char*>(&memberid_),
          reinterpret_cast<char*>(&other->memberid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[48]);
}

// ===================================================================

class AlarmMember::_Internal {
 public:
};

AlarmMember::AlarmMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AlarmMember)
}
AlarmMember::AlarmMember(const AlarmMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AlarmMember)
}

inline void AlarmMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&memberid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
}

AlarmMember::~AlarmMember() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AlarmMember)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlarmMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AlarmMember::ArenaDtor(void* object) {
  AlarmMember* _this = reinterpret_cast< AlarmMember* >(object);
  (void)_this;
}
void AlarmMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlarmMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlarmMember::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AlarmMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarm_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlarmMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 memberID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .etcdserverpb.AlarmType alarm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_alarm(static_cast<::etcdserverpb::AlarmType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlarmMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AlarmMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 memberID = 1;
  if (this->_internal_memberid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memberid(), target);
  }

  // .etcdserverpb.AlarmType alarm = 2;
  if (this->_internal_alarm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_alarm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AlarmMember)
  return target;
}

size_t AlarmMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AlarmMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 memberID = 1;
  if (this->_internal_memberid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_memberid());
  }

  // .etcdserverpb.AlarmType alarm = 2;
  if (this->_internal_alarm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alarm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlarmMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlarmMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlarmMember::GetClassData() const { return &_class_data_; }

void AlarmMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AlarmMember *>(to)->MergeFrom(
      static_cast<const AlarmMember &>(from));
}


void AlarmMember::MergeFrom(const AlarmMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AlarmMember)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_memberid() != 0) {
    _internal_set_memberid(from._internal_memberid());
  }
  if (from._internal_alarm() != 0) {
    _internal_set_alarm(from._internal_alarm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlarmMember::CopyFrom(const AlarmMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AlarmMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmMember::IsInitialized() const {
  return true;
}

void AlarmMember::InternalSwap(AlarmMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlarmMember, alarm_)
      + sizeof(AlarmMember::alarm_)
      - PROTOBUF_FIELD_OFFSET(AlarmMember, memberid_)>(
          reinterpret_cast<char*>(&memberid_),
          reinterpret_cast<char*>(&other->memberid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmMember::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[49]);
}

// ===================================================================

class AlarmResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AlarmResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AlarmResponse::_Internal::header(const AlarmResponse* msg) {
  return *msg->header_;
}
AlarmResponse::AlarmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  alarms_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AlarmResponse)
}
AlarmResponse::AlarmResponse(const AlarmResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alarms_(from.alarms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AlarmResponse)
}

inline void AlarmResponse::SharedCtor() {
header_ = nullptr;
}

AlarmResponse::~AlarmResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AlarmResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlarmResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AlarmResponse::ArenaDtor(void* object) {
  AlarmResponse* _this = reinterpret_cast< AlarmResponse* >(object);
  (void)_this;
}
void AlarmResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlarmResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlarmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AlarmResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alarms_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlarmResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .etcdserverpb.AlarmMember alarms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlarmResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AlarmResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.AlarmMember alarms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alarms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_alarms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AlarmResponse)
  return target;
}

size_t AlarmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AlarmResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.AlarmMember alarms = 2;
  total_size += 1UL * this->_internal_alarms_size();
  for (const auto& msg : this->alarms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlarmResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlarmResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlarmResponse::GetClassData() const { return &_class_data_; }

void AlarmResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AlarmResponse *>(to)->MergeFrom(
      static_cast<const AlarmResponse &>(from));
}


void AlarmResponse::MergeFrom(const AlarmResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  alarms_.MergeFrom(from.alarms_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlarmResponse::CopyFrom(const AlarmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmResponse::IsInitialized() const {
  return true;
}

void AlarmResponse::InternalSwap(AlarmResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  alarms_.InternalSwap(&other->alarms_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[50]);
}

// ===================================================================

class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.StatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StatusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[51]);
}

// ===================================================================

class StatusResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const StatusResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
StatusResponse::_Internal::header(const StatusResponse* msg) {
  return *msg->header_;
}
StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&dbsize_, &from.dbsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&raftterm_) -
    reinterpret_cast<char*>(&dbsize_)) + sizeof(raftterm_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.StatusResponse)
}

inline void StatusResponse::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raftterm_) -
    reinterpret_cast<char*>(&header_)) + sizeof(raftterm_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.StatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void StatusResponse::ArenaDtor(void* object) {
  StatusResponse* _this = reinterpret_cast< StatusResponse* >(object);
  (void)_this;
}
void StatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.StatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&dbsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raftterm_) -
      reinterpret_cast<char*>(&dbsize_)) + sizeof(raftterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.StatusResponse.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dbSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          dbsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 raftIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          raftindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 raftTerm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          raftterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.StatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.StatusResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // int64 dbSize = 3;
  if (this->_internal_dbsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_dbsize(), target);
  }

  // uint64 leader = 4;
  if (this->_internal_leader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_leader(), target);
  }

  // uint64 raftIndex = 5;
  if (this->_internal_raftindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_raftindex(), target);
  }

  // uint64 raftTerm = 6;
  if (this->_internal_raftterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_raftterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.StatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 dbSize = 3;
  if (this->_internal_dbsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_dbsize());
  }

  // uint64 leader = 4;
  if (this->_internal_leader() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_leader());
  }

  // uint64 raftIndex = 5;
  if (this->_internal_raftindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_raftindex());
  }

  // uint64 raftTerm = 6;
  if (this->_internal_raftterm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_raftterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }

void StatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatusResponse *>(to)->MergeFrom(
      static_cast<const StatusResponse &>(from));
}


void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_dbsize() != 0) {
    _internal_set_dbsize(from._internal_dbsize());
  }
  if (from._internal_leader() != 0) {
    _internal_set_leader(from._internal_leader());
  }
  if (from._internal_raftindex() != 0) {
    _internal_set_raftindex(from._internal_raftindex());
  }
  if (from._internal_raftterm() != 0) {
    _internal_set_raftterm(from._internal_raftterm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusResponse, raftterm_)
      + sizeof(StatusResponse::raftterm_)
      - PROTOBUF_FIELD_OFFSET(StatusResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[52]);
}

// ===================================================================

class AuthEnableRequest::_Internal {
 public:
};

AuthEnableRequest::AuthEnableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthEnableRequest)
}
AuthEnableRequest::AuthEnableRequest(const AuthEnableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthEnableRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthEnableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthEnableRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AuthEnableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[53]);
}

// ===================================================================

class AuthDisableRequest::_Internal {
 public:
};

AuthDisableRequest::AuthDisableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthDisableRequest)
}
AuthDisableRequest::AuthDisableRequest(const AuthDisableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthDisableRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthDisableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthDisableRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AuthDisableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[54]);
}

// ===================================================================

class AuthenticateRequest::_Internal {
 public:
};

AuthenticateRequest::AuthenticateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthenticateRequest)
}
AuthenticateRequest::AuthenticateRequest(const AuthenticateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthenticateRequest)
}

inline void AuthenticateRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthenticateRequest::~AuthenticateRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthenticateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateRequest::ArenaDtor(void* object) {
  AuthenticateRequest* _this = reinterpret_cast< AuthenticateRequest* >(object);
  (void)_this;
}
void AuthenticateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthenticateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthenticateRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthenticateRequest.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthenticateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthenticateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthenticateRequest)
  return target;
}

size_t AuthenticateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthenticateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateRequest::GetClassData() const { return &_class_data_; }

void AuthenticateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthenticateRequest *>(to)->MergeFrom(
      static_cast<const AuthenticateRequest &>(from));
}


void AuthenticateRequest::MergeFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthenticateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateRequest::CopyFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateRequest::IsInitialized() const {
  return true;
}

void AuthenticateRequest::InternalSwap(AuthenticateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[55]);
}

// ===================================================================

class AuthUserAddRequest::_Internal {
 public:
};

AuthUserAddRequest::AuthUserAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserAddRequest)
}
AuthUserAddRequest::AuthUserAddRequest(const AuthUserAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserAddRequest)
}

inline void AuthUserAddRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthUserAddRequest::~AuthUserAddRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserAddRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserAddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserAddRequest::ArenaDtor(void* object) {
  AuthUserAddRequest* _this = reinterpret_cast< AuthUserAddRequest* >(object);
  (void)_this;
}
void AuthUserAddRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserAddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserAddRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserAddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserAddRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserAddRequest.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserAddRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserAddRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserAddRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserAddRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserAddRequest)
  return target;
}

size_t AuthUserAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserAddRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserAddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserAddRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserAddRequest::GetClassData() const { return &_class_data_; }

void AuthUserAddRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserAddRequest *>(to)->MergeFrom(
      static_cast<const AuthUserAddRequest &>(from));
}


void AuthUserAddRequest::MergeFrom(const AuthUserAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserAddRequest::CopyFrom(const AuthUserAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserAddRequest::IsInitialized() const {
  return true;
}

void AuthUserAddRequest::InternalSwap(AuthUserAddRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserAddRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[56]);
}

// ===================================================================

class AuthUserGetRequest::_Internal {
 public:
};

AuthUserGetRequest::AuthUserGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserGetRequest)
}
AuthUserGetRequest::AuthUserGetRequest(const AuthUserGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGetRequest)
}

inline void AuthUserGetRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthUserGetRequest::~AuthUserGetRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserGetRequest::ArenaDtor(void* object) {
  AuthUserGetRequest* _this = reinterpret_cast< AuthUserGetRequest* >(object);
  (void)_this;
}
void AuthUserGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserGetRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGetRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGetRequest)
  return target;
}

size_t AuthUserGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserGetRequest::GetClassData() const { return &_class_data_; }

void AuthUserGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserGetRequest *>(to)->MergeFrom(
      static_cast<const AuthUserGetRequest &>(from));
}


void AuthUserGetRequest::MergeFrom(const AuthUserGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserGetRequest::CopyFrom(const AuthUserGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGetRequest::IsInitialized() const {
  return true;
}

void AuthUserGetRequest::InternalSwap(AuthUserGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[57]);
}

// ===================================================================

class AuthUserDeleteRequest::_Internal {
 public:
};

AuthUserDeleteRequest::AuthUserDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserDeleteRequest)
}
AuthUserDeleteRequest::AuthUserDeleteRequest(const AuthUserDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserDeleteRequest)
}

inline void AuthUserDeleteRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthUserDeleteRequest::~AuthUserDeleteRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserDeleteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserDeleteRequest::ArenaDtor(void* object) {
  AuthUserDeleteRequest* _this = reinterpret_cast< AuthUserDeleteRequest* >(object);
  (void)_this;
}
void AuthUserDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserDeleteRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserDeleteRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserDeleteRequest)
  return target;
}

size_t AuthUserDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserDeleteRequest::GetClassData() const { return &_class_data_; }

void AuthUserDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserDeleteRequest *>(to)->MergeFrom(
      static_cast<const AuthUserDeleteRequest &>(from));
}


void AuthUserDeleteRequest::MergeFrom(const AuthUserDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserDeleteRequest::CopyFrom(const AuthUserDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserDeleteRequest::IsInitialized() const {
  return true;
}

void AuthUserDeleteRequest::InternalSwap(AuthUserDeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserDeleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[58]);
}

// ===================================================================

class AuthUserChangePasswordRequest::_Internal {
 public:
};

AuthUserChangePasswordRequest::AuthUserChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserChangePasswordRequest)
}
AuthUserChangePasswordRequest::AuthUserChangePasswordRequest(const AuthUserChangePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserChangePasswordRequest)
}

inline void AuthUserChangePasswordRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthUserChangePasswordRequest::~AuthUserChangePasswordRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserChangePasswordRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserChangePasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserChangePasswordRequest::ArenaDtor(void* object) {
  AuthUserChangePasswordRequest* _this = reinterpret_cast< AuthUserChangePasswordRequest* >(object);
  (void)_this;
}
void AuthUserChangePasswordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserChangePasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserChangePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserChangePasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserChangePasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserChangePasswordRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserChangePasswordRequest.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserChangePasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserChangePasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserChangePasswordRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserChangePasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserChangePasswordRequest)
  return target;
}

size_t AuthUserChangePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserChangePasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserChangePasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserChangePasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserChangePasswordRequest::GetClassData() const { return &_class_data_; }

void AuthUserChangePasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserChangePasswordRequest *>(to)->MergeFrom(
      static_cast<const AuthUserChangePasswordRequest &>(from));
}


void AuthUserChangePasswordRequest::MergeFrom(const AuthUserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserChangePasswordRequest::CopyFrom(const AuthUserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserChangePasswordRequest::IsInitialized() const {
  return true;
}

void AuthUserChangePasswordRequest::InternalSwap(AuthUserChangePasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserChangePasswordRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[59]);
}

// ===================================================================

class AuthUserGrantRoleRequest::_Internal {
 public:
};

AuthUserGrantRoleRequest::AuthUserGrantRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserGrantRoleRequest)
}
AuthUserGrantRoleRequest::AuthUserGrantRoleRequest(const AuthUserGrantRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user(), 
      GetArenaForAllocation());
  }
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGrantRoleRequest)
}

inline void AuthUserGrantRoleRequest::SharedCtor() {
user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthUserGrantRoleRequest::~AuthUserGrantRoleRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGrantRoleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserGrantRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserGrantRoleRequest::ArenaDtor(void* object) {
  AuthUserGrantRoleRequest* _this = reinterpret_cast< AuthUserGrantRoleRequest* >(object);
  (void)_this;
}
void AuthUserGrantRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserGrantRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserGrantRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGrantRoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmpty();
  role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserGrantRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserGrantRoleRequest.user"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserGrantRoleRequest.role"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserGrantRoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGrantRoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGrantRoleRequest.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGrantRoleRequest.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGrantRoleRequest)
  return target;
}

size_t AuthUserGrantRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGrantRoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserGrantRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserGrantRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserGrantRoleRequest::GetClassData() const { return &_class_data_; }

void AuthUserGrantRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserGrantRoleRequest *>(to)->MergeFrom(
      static_cast<const AuthUserGrantRoleRequest &>(from));
}


void AuthUserGrantRoleRequest::MergeFrom(const AuthUserGrantRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _internal_set_user(from._internal_user());
  }
  if (!from._internal_role().empty()) {
    _internal_set_role(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserGrantRoleRequest::CopyFrom(const AuthUserGrantRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGrantRoleRequest::IsInitialized() const {
  return true;
}

void AuthUserGrantRoleRequest::InternalSwap(AuthUserGrantRoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_, lhs_arena,
      &other->user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_, lhs_arena,
      &other->role_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserGrantRoleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[60]);
}

// ===================================================================

class AuthUserRevokeRoleRequest::_Internal {
 public:
};

AuthUserRevokeRoleRequest::AuthUserRevokeRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserRevokeRoleRequest)
}
AuthUserRevokeRoleRequest::AuthUserRevokeRoleRequest(const AuthUserRevokeRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserRevokeRoleRequest)
}

inline void AuthUserRevokeRoleRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthUserRevokeRoleRequest::~AuthUserRevokeRoleRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserRevokeRoleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserRevokeRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserRevokeRoleRequest::ArenaDtor(void* object) {
  AuthUserRevokeRoleRequest* _this = reinterpret_cast< AuthUserRevokeRoleRequest* >(object);
  (void)_this;
}
void AuthUserRevokeRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserRevokeRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserRevokeRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserRevokeRoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserRevokeRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserRevokeRoleRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserRevokeRoleRequest.role"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserRevokeRoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserRevokeRoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserRevokeRoleRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserRevokeRoleRequest.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserRevokeRoleRequest)
  return target;
}

size_t AuthUserRevokeRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserRevokeRoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserRevokeRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserRevokeRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserRevokeRoleRequest::GetClassData() const { return &_class_data_; }

void AuthUserRevokeRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserRevokeRoleRequest *>(to)->MergeFrom(
      static_cast<const AuthUserRevokeRoleRequest &>(from));
}


void AuthUserRevokeRoleRequest::MergeFrom(const AuthUserRevokeRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_role().empty()) {
    _internal_set_role(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserRevokeRoleRequest::CopyFrom(const AuthUserRevokeRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserRevokeRoleRequest::IsInitialized() const {
  return true;
}

void AuthUserRevokeRoleRequest::InternalSwap(AuthUserRevokeRoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_, lhs_arena,
      &other->role_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserRevokeRoleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[61]);
}

// ===================================================================

class AuthRoleAddRequest::_Internal {
 public:
};

AuthRoleAddRequest::AuthRoleAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleAddRequest)
}
AuthRoleAddRequest::AuthRoleAddRequest(const AuthRoleAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleAddRequest)
}

inline void AuthRoleAddRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthRoleAddRequest::~AuthRoleAddRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleAddRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleAddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleAddRequest::ArenaDtor(void* object) {
  AuthRoleAddRequest* _this = reinterpret_cast< AuthRoleAddRequest* >(object);
  (void)_this;
}
void AuthRoleAddRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleAddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleAddRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleAddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthRoleAddRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleAddRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleAddRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleAddRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleAddRequest)
  return target;
}

size_t AuthRoleAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleAddRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleAddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleAddRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleAddRequest::GetClassData() const { return &_class_data_; }

void AuthRoleAddRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleAddRequest *>(to)->MergeFrom(
      static_cast<const AuthRoleAddRequest &>(from));
}


void AuthRoleAddRequest::MergeFrom(const AuthRoleAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleAddRequest::CopyFrom(const AuthRoleAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleAddRequest::IsInitialized() const {
  return true;
}

void AuthRoleAddRequest::InternalSwap(AuthRoleAddRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleAddRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[62]);
}

// ===================================================================

class AuthRoleGetRequest::_Internal {
 public:
};

AuthRoleGetRequest::AuthRoleGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleGetRequest)
}
AuthRoleGetRequest::AuthRoleGetRequest(const AuthRoleGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGetRequest)
}

inline void AuthRoleGetRequest::SharedCtor() {
role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthRoleGetRequest::~AuthRoleGetRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleGetRequest::ArenaDtor(void* object) {
  AuthRoleGetRequest* _this = reinterpret_cast< AuthRoleGetRequest* >(object);
  (void)_this;
}
void AuthRoleGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthRoleGetRequest.role"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleGetRequest.role");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGetRequest)
  return target;
}

size_t AuthRoleGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 1;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleGetRequest::GetClassData() const { return &_class_data_; }

void AuthRoleGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleGetRequest *>(to)->MergeFrom(
      static_cast<const AuthRoleGetRequest &>(from));
}


void AuthRoleGetRequest::MergeFrom(const AuthRoleGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role().empty()) {
    _internal_set_role(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleGetRequest::CopyFrom(const AuthRoleGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGetRequest::IsInitialized() const {
  return true;
}

void AuthRoleGetRequest::InternalSwap(AuthRoleGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_, lhs_arena,
      &other->role_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[63]);
}

// ===================================================================

class AuthUserListRequest::_Internal {
 public:
};

AuthUserListRequest::AuthUserListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserListRequest)
}
AuthUserListRequest::AuthUserListRequest(const AuthUserListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AuthUserListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[64]);
}

// ===================================================================

class AuthRoleListRequest::_Internal {
 public:
};

AuthRoleListRequest::AuthRoleListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleListRequest)
}
AuthRoleListRequest::AuthRoleListRequest(const AuthRoleListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[65]);
}

// ===================================================================

class AuthRoleDeleteRequest::_Internal {
 public:
};

AuthRoleDeleteRequest::AuthRoleDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleDeleteRequest)
}
AuthRoleDeleteRequest::AuthRoleDeleteRequest(const AuthRoleDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleDeleteRequest)
}

inline void AuthRoleDeleteRequest::SharedCtor() {
role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthRoleDeleteRequest::~AuthRoleDeleteRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleDeleteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleDeleteRequest::ArenaDtor(void* object) {
  AuthRoleDeleteRequest* _this = reinterpret_cast< AuthRoleDeleteRequest* >(object);
  (void)_this;
}
void AuthRoleDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthRoleDeleteRequest.role"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleDeleteRequest.role");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleDeleteRequest)
  return target;
}

size_t AuthRoleDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 1;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleDeleteRequest::GetClassData() const { return &_class_data_; }

void AuthRoleDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleDeleteRequest *>(to)->MergeFrom(
      static_cast<const AuthRoleDeleteRequest &>(from));
}


void AuthRoleDeleteRequest::MergeFrom(const AuthRoleDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role().empty()) {
    _internal_set_role(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleDeleteRequest::CopyFrom(const AuthRoleDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleDeleteRequest::IsInitialized() const {
  return true;
}

void AuthRoleDeleteRequest::InternalSwap(AuthRoleDeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_, lhs_arena,
      &other->role_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleDeleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[66]);
}

// ===================================================================

class AuthRoleGrantPermissionRequest::_Internal {
 public:
  static const ::authpb::Permission& perm(const AuthRoleGrantPermissionRequest* msg);
};

const ::authpb::Permission&
AuthRoleGrantPermissionRequest::_Internal::perm(const AuthRoleGrantPermissionRequest* msg) {
  return *msg->perm_;
}
void AuthRoleGrantPermissionRequest::clear_perm() {
  if (GetArenaForAllocation() == nullptr && perm_ != nullptr) {
    delete perm_;
  }
  perm_ = nullptr;
}
AuthRoleGrantPermissionRequest::AuthRoleGrantPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleGrantPermissionRequest)
}
AuthRoleGrantPermissionRequest::AuthRoleGrantPermissionRequest(const AuthRoleGrantPermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_perm()) {
    perm_ = new ::authpb::Permission(*from.perm_);
  } else {
    perm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGrantPermissionRequest)
}

inline void AuthRoleGrantPermissionRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
perm_ = nullptr;
}

AuthRoleGrantPermissionRequest::~AuthRoleGrantPermissionRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGrantPermissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleGrantPermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete perm_;
}

void AuthRoleGrantPermissionRequest::ArenaDtor(void* object) {
  AuthRoleGrantPermissionRequest* _this = reinterpret_cast< AuthRoleGrantPermissionRequest* >(object);
  (void)_this;
}
void AuthRoleGrantPermissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleGrantPermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleGrantPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && perm_ != nullptr) {
    delete perm_;
  }
  perm_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleGrantPermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthRoleGrantPermissionRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authpb.Permission perm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_perm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleGrantPermissionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleGrantPermissionRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .authpb.Permission perm = 2;
  if (this->_internal_has_perm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::perm(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGrantPermissionRequest)
  return target;
}

size_t AuthRoleGrantPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .authpb.Permission perm = 2;
  if (this->_internal_has_perm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perm_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleGrantPermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleGrantPermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleGrantPermissionRequest::GetClassData() const { return &_class_data_; }

void AuthRoleGrantPermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleGrantPermissionRequest *>(to)->MergeFrom(
      static_cast<const AuthRoleGrantPermissionRequest &>(from));
}


void AuthRoleGrantPermissionRequest::MergeFrom(const AuthRoleGrantPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_perm()) {
    _internal_mutable_perm()->::authpb::Permission::MergeFrom(from._internal_perm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleGrantPermissionRequest::CopyFrom(const AuthRoleGrantPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGrantPermissionRequest::IsInitialized() const {
  return true;
}

void AuthRoleGrantPermissionRequest::InternalSwap(AuthRoleGrantPermissionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(perm_, other->perm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleGrantPermissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[67]);
}

// ===================================================================

class AuthRoleRevokePermissionRequest::_Internal {
 public:
};

AuthRoleRevokePermissionRequest::AuthRoleRevokePermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleRevokePermissionRequest)
}
AuthRoleRevokePermissionRequest::AuthRoleRevokePermissionRequest(const AuthRoleRevokePermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_range_end().empty()) {
    range_end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_range_end(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleRevokePermissionRequest)
}

inline void AuthRoleRevokePermissionRequest::SharedCtor() {
role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  range_end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthRoleRevokePermissionRequest::~AuthRoleRevokePermissionRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleRevokePermissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleRevokePermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleRevokePermissionRequest::ArenaDtor(void* object) {
  AuthRoleRevokePermissionRequest* _this = reinterpret_cast< AuthRoleRevokePermissionRequest* >(object);
  (void)_this;
}
void AuthRoleRevokePermissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleRevokePermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleRevokePermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.ClearToEmpty();
  key_.ClearToEmpty();
  range_end_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleRevokePermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthRoleRevokePermissionRequest.role"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthRoleRevokePermissionRequest.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string range_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_range_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthRoleRevokePermissionRequest.range_end"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleRevokePermissionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.role");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string range_end = 3;
  if (!this->_internal_range_end().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_range_end().data(), static_cast<int>(this->_internal_range_end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.range_end");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleRevokePermissionRequest)
  return target;
}

size_t AuthRoleRevokePermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 1;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string range_end = 3;
  if (!this->_internal_range_end().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_range_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleRevokePermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleRevokePermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleRevokePermissionRequest::GetClassData() const { return &_class_data_; }

void AuthRoleRevokePermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleRevokePermissionRequest *>(to)->MergeFrom(
      static_cast<const AuthRoleRevokePermissionRequest &>(from));
}


void AuthRoleRevokePermissionRequest::MergeFrom(const AuthRoleRevokePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role().empty()) {
    _internal_set_role(from._internal_role());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_range_end().empty()) {
    _internal_set_range_end(from._internal_range_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleRevokePermissionRequest::CopyFrom(const AuthRoleRevokePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleRevokePermissionRequest::IsInitialized() const {
  return true;
}

void AuthRoleRevokePermissionRequest::InternalSwap(AuthRoleRevokePermissionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_, lhs_arena,
      &other->role_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &range_end_, lhs_arena,
      &other->range_end_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleRevokePermissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[68]);
}

// ===================================================================

class AuthEnableResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthEnableResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthEnableResponse::_Internal::header(const AuthEnableResponse* msg) {
  return *msg->header_;
}
AuthEnableResponse::AuthEnableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthEnableResponse)
}
AuthEnableResponse::AuthEnableResponse(const AuthEnableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthEnableResponse)
}

inline void AuthEnableResponse::SharedCtor() {
header_ = nullptr;
}

AuthEnableResponse::~AuthEnableResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthEnableResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthEnableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthEnableResponse::ArenaDtor(void* object) {
  AuthEnableResponse* _this = reinterpret_cast< AuthEnableResponse* >(object);
  (void)_this;
}
void AuthEnableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthEnableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthEnableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthEnableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthEnableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthEnableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthEnableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthEnableResponse)
  return target;
}

size_t AuthEnableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthEnableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthEnableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthEnableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthEnableResponse::GetClassData() const { return &_class_data_; }

void AuthEnableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthEnableResponse *>(to)->MergeFrom(
      static_cast<const AuthEnableResponse &>(from));
}


void AuthEnableResponse::MergeFrom(const AuthEnableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthEnableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthEnableResponse::CopyFrom(const AuthEnableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthEnableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthEnableResponse::IsInitialized() const {
  return true;
}

void AuthEnableResponse::InternalSwap(AuthEnableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthEnableResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[69]);
}

// ===================================================================

class AuthDisableResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthDisableResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthDisableResponse::_Internal::header(const AuthDisableResponse* msg) {
  return *msg->header_;
}
AuthDisableResponse::AuthDisableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthDisableResponse)
}
AuthDisableResponse::AuthDisableResponse(const AuthDisableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthDisableResponse)
}

inline void AuthDisableResponse::SharedCtor() {
header_ = nullptr;
}

AuthDisableResponse::~AuthDisableResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthDisableResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthDisableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthDisableResponse::ArenaDtor(void* object) {
  AuthDisableResponse* _this = reinterpret_cast< AuthDisableResponse* >(object);
  (void)_this;
}
void AuthDisableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthDisableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthDisableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthDisableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthDisableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthDisableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthDisableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthDisableResponse)
  return target;
}

size_t AuthDisableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthDisableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthDisableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthDisableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthDisableResponse::GetClassData() const { return &_class_data_; }

void AuthDisableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthDisableResponse *>(to)->MergeFrom(
      static_cast<const AuthDisableResponse &>(from));
}


void AuthDisableResponse::MergeFrom(const AuthDisableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthDisableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthDisableResponse::CopyFrom(const AuthDisableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthDisableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthDisableResponse::IsInitialized() const {
  return true;
}

void AuthDisableResponse::InternalSwap(AuthDisableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthDisableResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[70]);
}

// ===================================================================

class AuthenticateResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthenticateResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthenticateResponse::_Internal::header(const AuthenticateResponse* msg) {
  return *msg->header_;
}
AuthenticateResponse::AuthenticateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthenticateResponse)
}
AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthenticateResponse)
}

inline void AuthenticateResponse::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_ = nullptr;
}

AuthenticateResponse::~AuthenticateResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthenticateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void AuthenticateResponse::ArenaDtor(void* object) {
  AuthenticateResponse* _this = reinterpret_cast< AuthenticateResponse* >(object);
  (void)_this;
}
void AuthenticateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthenticateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthenticateResponse.token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthenticateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthenticateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateResponse.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthenticateResponse)
  return target;
}

size_t AuthenticateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthenticateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateResponse::GetClassData() const { return &_class_data_; }

void AuthenticateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthenticateResponse *>(to)->MergeFrom(
      static_cast<const AuthenticateResponse &>(from));
}


void AuthenticateResponse::MergeFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {
  return true;
}

void AuthenticateResponse::InternalSwap(AuthenticateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[71]);
}

// ===================================================================

class AuthUserAddResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserAddResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserAddResponse::_Internal::header(const AuthUserAddResponse* msg) {
  return *msg->header_;
}
AuthUserAddResponse::AuthUserAddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserAddResponse)
}
AuthUserAddResponse::AuthUserAddResponse(const AuthUserAddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserAddResponse)
}

inline void AuthUserAddResponse::SharedCtor() {
header_ = nullptr;
}

AuthUserAddResponse::~AuthUserAddResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserAddResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserAddResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthUserAddResponse::ArenaDtor(void* object) {
  AuthUserAddResponse* _this = reinterpret_cast< AuthUserAddResponse* >(object);
  (void)_this;
}
void AuthUserAddResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserAddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserAddResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserAddResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserAddResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserAddResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserAddResponse)
  return target;
}

size_t AuthUserAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserAddResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserAddResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserAddResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserAddResponse::GetClassData() const { return &_class_data_; }

void AuthUserAddResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserAddResponse *>(to)->MergeFrom(
      static_cast<const AuthUserAddResponse &>(from));
}


void AuthUserAddResponse::MergeFrom(const AuthUserAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserAddResponse::CopyFrom(const AuthUserAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserAddResponse::IsInitialized() const {
  return true;
}

void AuthUserAddResponse::InternalSwap(AuthUserAddResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserAddResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[72]);
}

// ===================================================================

class AuthUserGetResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserGetResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserGetResponse::_Internal::header(const AuthUserGetResponse* msg) {
  return *msg->header_;
}
AuthUserGetResponse::AuthUserGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserGetResponse)
}
AuthUserGetResponse::AuthUserGetResponse(const AuthUserGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGetResponse)
}

inline void AuthUserGetResponse::SharedCtor() {
header_ = nullptr;
}

AuthUserGetResponse::~AuthUserGetResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthUserGetResponse::ArenaDtor(void* object) {
  AuthUserGetResponse* _this = reinterpret_cast< AuthUserGetResponse* >(object);
  (void)_this;
}
void AuthUserGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserGetResponse.roles"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated string roles = 2;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGetResponse.roles");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGetResponse)
  return target;
}

size_t AuthUserGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(roles_.size());
  for (int i = 0, n = roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      roles_.Get(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserGetResponse::GetClassData() const { return &_class_data_; }

void AuthUserGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserGetResponse *>(to)->MergeFrom(
      static_cast<const AuthUserGetResponse &>(from));
}


void AuthUserGetResponse::MergeFrom(const AuthUserGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserGetResponse::CopyFrom(const AuthUserGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGetResponse::IsInitialized() const {
  return true;
}

void AuthUserGetResponse::InternalSwap(AuthUserGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserGetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[73]);
}

// ===================================================================

class AuthUserDeleteResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserDeleteResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserDeleteResponse::_Internal::header(const AuthUserDeleteResponse* msg) {
  return *msg->header_;
}
AuthUserDeleteResponse::AuthUserDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserDeleteResponse)
}
AuthUserDeleteResponse::AuthUserDeleteResponse(const AuthUserDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserDeleteResponse)
}

inline void AuthUserDeleteResponse::SharedCtor() {
header_ = nullptr;
}

AuthUserDeleteResponse::~AuthUserDeleteResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserDeleteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthUserDeleteResponse::ArenaDtor(void* object) {
  AuthUserDeleteResponse* _this = reinterpret_cast< AuthUserDeleteResponse* >(object);
  (void)_this;
}
void AuthUserDeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserDeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserDeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserDeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserDeleteResponse)
  return target;
}

size_t AuthUserDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserDeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserDeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserDeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserDeleteResponse::GetClassData() const { return &_class_data_; }

void AuthUserDeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserDeleteResponse *>(to)->MergeFrom(
      static_cast<const AuthUserDeleteResponse &>(from));
}


void AuthUserDeleteResponse::MergeFrom(const AuthUserDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserDeleteResponse::CopyFrom(const AuthUserDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserDeleteResponse::IsInitialized() const {
  return true;
}

void AuthUserDeleteResponse::InternalSwap(AuthUserDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserDeleteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[74]);
}

// ===================================================================

class AuthUserChangePasswordResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserChangePasswordResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserChangePasswordResponse::_Internal::header(const AuthUserChangePasswordResponse* msg) {
  return *msg->header_;
}
AuthUserChangePasswordResponse::AuthUserChangePasswordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserChangePasswordResponse)
}
AuthUserChangePasswordResponse::AuthUserChangePasswordResponse(const AuthUserChangePasswordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserChangePasswordResponse)
}

inline void AuthUserChangePasswordResponse::SharedCtor() {
header_ = nullptr;
}

AuthUserChangePasswordResponse::~AuthUserChangePasswordResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserChangePasswordResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserChangePasswordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthUserChangePasswordResponse::ArenaDtor(void* object) {
  AuthUserChangePasswordResponse* _this = reinterpret_cast< AuthUserChangePasswordResponse* >(object);
  (void)_this;
}
void AuthUserChangePasswordResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserChangePasswordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserChangePasswordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserChangePasswordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserChangePasswordResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserChangePasswordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserChangePasswordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserChangePasswordResponse)
  return target;
}

size_t AuthUserChangePasswordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserChangePasswordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserChangePasswordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserChangePasswordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserChangePasswordResponse::GetClassData() const { return &_class_data_; }

void AuthUserChangePasswordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserChangePasswordResponse *>(to)->MergeFrom(
      static_cast<const AuthUserChangePasswordResponse &>(from));
}


void AuthUserChangePasswordResponse::MergeFrom(const AuthUserChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserChangePasswordResponse::CopyFrom(const AuthUserChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserChangePasswordResponse::IsInitialized() const {
  return true;
}

void AuthUserChangePasswordResponse::InternalSwap(AuthUserChangePasswordResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserChangePasswordResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[75]);
}

// ===================================================================

class AuthUserGrantRoleResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserGrantRoleResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserGrantRoleResponse::_Internal::header(const AuthUserGrantRoleResponse* msg) {
  return *msg->header_;
}
AuthUserGrantRoleResponse::AuthUserGrantRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserGrantRoleResponse)
}
AuthUserGrantRoleResponse::AuthUserGrantRoleResponse(const AuthUserGrantRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGrantRoleResponse)
}

inline void AuthUserGrantRoleResponse::SharedCtor() {
header_ = nullptr;
}

AuthUserGrantRoleResponse::~AuthUserGrantRoleResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGrantRoleResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserGrantRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthUserGrantRoleResponse::ArenaDtor(void* object) {
  AuthUserGrantRoleResponse* _this = reinterpret_cast< AuthUserGrantRoleResponse* >(object);
  (void)_this;
}
void AuthUserGrantRoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserGrantRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserGrantRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGrantRoleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserGrantRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserGrantRoleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGrantRoleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGrantRoleResponse)
  return target;
}

size_t AuthUserGrantRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGrantRoleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserGrantRoleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserGrantRoleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserGrantRoleResponse::GetClassData() const { return &_class_data_; }

void AuthUserGrantRoleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserGrantRoleResponse *>(to)->MergeFrom(
      static_cast<const AuthUserGrantRoleResponse &>(from));
}


void AuthUserGrantRoleResponse::MergeFrom(const AuthUserGrantRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserGrantRoleResponse::CopyFrom(const AuthUserGrantRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGrantRoleResponse::IsInitialized() const {
  return true;
}

void AuthUserGrantRoleResponse::InternalSwap(AuthUserGrantRoleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserGrantRoleResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[76]);
}

// ===================================================================

class AuthUserRevokeRoleResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserRevokeRoleResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserRevokeRoleResponse::_Internal::header(const AuthUserRevokeRoleResponse* msg) {
  return *msg->header_;
}
AuthUserRevokeRoleResponse::AuthUserRevokeRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserRevokeRoleResponse)
}
AuthUserRevokeRoleResponse::AuthUserRevokeRoleResponse(const AuthUserRevokeRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserRevokeRoleResponse)
}

inline void AuthUserRevokeRoleResponse::SharedCtor() {
header_ = nullptr;
}

AuthUserRevokeRoleResponse::~AuthUserRevokeRoleResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserRevokeRoleResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserRevokeRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthUserRevokeRoleResponse::ArenaDtor(void* object) {
  AuthUserRevokeRoleResponse* _this = reinterpret_cast< AuthUserRevokeRoleResponse* >(object);
  (void)_this;
}
void AuthUserRevokeRoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserRevokeRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserRevokeRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserRevokeRoleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserRevokeRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserRevokeRoleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserRevokeRoleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserRevokeRoleResponse)
  return target;
}

size_t AuthUserRevokeRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserRevokeRoleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserRevokeRoleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserRevokeRoleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserRevokeRoleResponse::GetClassData() const { return &_class_data_; }

void AuthUserRevokeRoleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserRevokeRoleResponse *>(to)->MergeFrom(
      static_cast<const AuthUserRevokeRoleResponse &>(from));
}


void AuthUserRevokeRoleResponse::MergeFrom(const AuthUserRevokeRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserRevokeRoleResponse::CopyFrom(const AuthUserRevokeRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserRevokeRoleResponse::IsInitialized() const {
  return true;
}

void AuthUserRevokeRoleResponse::InternalSwap(AuthUserRevokeRoleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserRevokeRoleResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[77]);
}

// ===================================================================

class AuthRoleAddResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleAddResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleAddResponse::_Internal::header(const AuthRoleAddResponse* msg) {
  return *msg->header_;
}
AuthRoleAddResponse::AuthRoleAddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleAddResponse)
}
AuthRoleAddResponse::AuthRoleAddResponse(const AuthRoleAddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleAddResponse)
}

inline void AuthRoleAddResponse::SharedCtor() {
header_ = nullptr;
}

AuthRoleAddResponse::~AuthRoleAddResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleAddResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleAddResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleAddResponse::ArenaDtor(void* object) {
  AuthRoleAddResponse* _this = reinterpret_cast< AuthRoleAddResponse* >(object);
  (void)_this;
}
void AuthRoleAddResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleAddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleAddResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleAddResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleAddResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleAddResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleAddResponse)
  return target;
}

size_t AuthRoleAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleAddResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleAddResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleAddResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleAddResponse::GetClassData() const { return &_class_data_; }

void AuthRoleAddResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleAddResponse *>(to)->MergeFrom(
      static_cast<const AuthRoleAddResponse &>(from));
}


void AuthRoleAddResponse::MergeFrom(const AuthRoleAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleAddResponse::CopyFrom(const AuthRoleAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleAddResponse::IsInitialized() const {
  return true;
}

void AuthRoleAddResponse::InternalSwap(AuthRoleAddResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleAddResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[78]);
}

// ===================================================================

class AuthRoleGetResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleGetResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleGetResponse::_Internal::header(const AuthRoleGetResponse* msg) {
  return *msg->header_;
}
void AuthRoleGetResponse::clear_perm() {
  perm_.Clear();
}
AuthRoleGetResponse::AuthRoleGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  perm_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleGetResponse)
}
AuthRoleGetResponse::AuthRoleGetResponse(const AuthRoleGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      perm_(from.perm_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGetResponse)
}

inline void AuthRoleGetResponse::SharedCtor() {
header_ = nullptr;
}

AuthRoleGetResponse::~AuthRoleGetResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleGetResponse::ArenaDtor(void* object) {
  AuthRoleGetResponse* _this = reinterpret_cast< AuthRoleGetResponse* >(object);
  (void)_this;
}
void AuthRoleGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perm_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .authpb.Permission perm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .authpb.Permission perm = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_perm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_perm(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGetResponse)
  return target;
}

size_t AuthRoleGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .authpb.Permission perm = 2;
  total_size += 1UL * this->_internal_perm_size();
  for (const auto& msg : this->perm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleGetResponse::GetClassData() const { return &_class_data_; }

void AuthRoleGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleGetResponse *>(to)->MergeFrom(
      static_cast<const AuthRoleGetResponse &>(from));
}


void AuthRoleGetResponse::MergeFrom(const AuthRoleGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  perm_.MergeFrom(from.perm_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleGetResponse::CopyFrom(const AuthRoleGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGetResponse::IsInitialized() const {
  return true;
}

void AuthRoleGetResponse::InternalSwap(AuthRoleGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  perm_.InternalSwap(&other->perm_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleGetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[79]);
}

// ===================================================================

class AuthRoleListResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleListResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleListResponse::_Internal::header(const AuthRoleListResponse* msg) {
  return *msg->header_;
}
AuthRoleListResponse::AuthRoleListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleListResponse)
}
AuthRoleListResponse::AuthRoleListResponse(const AuthRoleListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleListResponse)
}

inline void AuthRoleListResponse::SharedCtor() {
header_ = nullptr;
}

AuthRoleListResponse::~AuthRoleListResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleListResponse::ArenaDtor(void* object) {
  AuthRoleListResponse* _this = reinterpret_cast< AuthRoleListResponse* >(object);
  (void)_this;
}
void AuthRoleListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthRoleListResponse.roles"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated string roles = 2;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleListResponse.roles");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleListResponse)
  return target;
}

size_t AuthRoleListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(roles_.size());
  for (int i = 0, n = roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      roles_.Get(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleListResponse::GetClassData() const { return &_class_data_; }

void AuthRoleListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleListResponse *>(to)->MergeFrom(
      static_cast<const AuthRoleListResponse &>(from));
}


void AuthRoleListResponse::MergeFrom(const AuthRoleListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleListResponse::CopyFrom(const AuthRoleListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleListResponse::IsInitialized() const {
  return true;
}

void AuthRoleListResponse::InternalSwap(AuthRoleListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[80]);
}

// ===================================================================

class AuthUserListResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserListResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserListResponse::_Internal::header(const AuthUserListResponse* msg) {
  return *msg->header_;
}
AuthUserListResponse::AuthUserListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthUserListResponse)
}
AuthUserListResponse::AuthUserListResponse(const AuthUserListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserListResponse)
}

inline void AuthUserListResponse::SharedCtor() {
header_ = nullptr;
}

AuthUserListResponse::~AuthUserListResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthUserListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthUserListResponse::ArenaDtor(void* object) {
  AuthUserListResponse* _this = reinterpret_cast< AuthUserListResponse* >(object);
  (void)_this;
}
void AuthUserListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthUserListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthUserListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthUserListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_users();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "etcdserverpb.AuthUserListResponse.users"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthUserListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated string users = 2;
  for (int i = 0, n = this->_internal_users_size(); i < n; i++) {
    const auto& s = this->_internal_users(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserListResponse.users");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserListResponse)
  return target;
}

size_t AuthUserListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string users = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(users_.size());
  for (int i = 0, n = users_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      users_.Get(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthUserListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthUserListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthUserListResponse::GetClassData() const { return &_class_data_; }

void AuthUserListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthUserListResponse *>(to)->MergeFrom(
      static_cast<const AuthUserListResponse &>(from));
}


void AuthUserListResponse::MergeFrom(const AuthUserListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthUserListResponse::CopyFrom(const AuthUserListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserListResponse::IsInitialized() const {
  return true;
}

void AuthUserListResponse::InternalSwap(AuthUserListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[81]);
}

// ===================================================================

class AuthRoleDeleteResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleDeleteResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleDeleteResponse::_Internal::header(const AuthRoleDeleteResponse* msg) {
  return *msg->header_;
}
AuthRoleDeleteResponse::AuthRoleDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleDeleteResponse)
}
AuthRoleDeleteResponse::AuthRoleDeleteResponse(const AuthRoleDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleDeleteResponse)
}

inline void AuthRoleDeleteResponse::SharedCtor() {
header_ = nullptr;
}

AuthRoleDeleteResponse::~AuthRoleDeleteResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleDeleteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleDeleteResponse::ArenaDtor(void* object) {
  AuthRoleDeleteResponse* _this = reinterpret_cast< AuthRoleDeleteResponse* >(object);
  (void)_this;
}
void AuthRoleDeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleDeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleDeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleDeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleDeleteResponse)
  return target;
}

size_t AuthRoleDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleDeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleDeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleDeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleDeleteResponse::GetClassData() const { return &_class_data_; }

void AuthRoleDeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleDeleteResponse *>(to)->MergeFrom(
      static_cast<const AuthRoleDeleteResponse &>(from));
}


void AuthRoleDeleteResponse::MergeFrom(const AuthRoleDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleDeleteResponse::CopyFrom(const AuthRoleDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleDeleteResponse::IsInitialized() const {
  return true;
}

void AuthRoleDeleteResponse::InternalSwap(AuthRoleDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleDeleteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[82]);
}

// ===================================================================

class AuthRoleGrantPermissionResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleGrantPermissionResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleGrantPermissionResponse::_Internal::header(const AuthRoleGrantPermissionResponse* msg) {
  return *msg->header_;
}
AuthRoleGrantPermissionResponse::AuthRoleGrantPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleGrantPermissionResponse)
}
AuthRoleGrantPermissionResponse::AuthRoleGrantPermissionResponse(const AuthRoleGrantPermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGrantPermissionResponse)
}

inline void AuthRoleGrantPermissionResponse::SharedCtor() {
header_ = nullptr;
}

AuthRoleGrantPermissionResponse::~AuthRoleGrantPermissionResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGrantPermissionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleGrantPermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleGrantPermissionResponse::ArenaDtor(void* object) {
  AuthRoleGrantPermissionResponse* _this = reinterpret_cast< AuthRoleGrantPermissionResponse* >(object);
  (void)_this;
}
void AuthRoleGrantPermissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleGrantPermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleGrantPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleGrantPermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleGrantPermissionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGrantPermissionResponse)
  return target;
}

size_t AuthRoleGrantPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleGrantPermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleGrantPermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleGrantPermissionResponse::GetClassData() const { return &_class_data_; }

void AuthRoleGrantPermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleGrantPermissionResponse *>(to)->MergeFrom(
      static_cast<const AuthRoleGrantPermissionResponse &>(from));
}


void AuthRoleGrantPermissionResponse::MergeFrom(const AuthRoleGrantPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleGrantPermissionResponse::CopyFrom(const AuthRoleGrantPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGrantPermissionResponse::IsInitialized() const {
  return true;
}

void AuthRoleGrantPermissionResponse::InternalSwap(AuthRoleGrantPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleGrantPermissionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[83]);
}

// ===================================================================

class AuthRoleRevokePermissionResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleRevokePermissionResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleRevokePermissionResponse::_Internal::header(const AuthRoleRevokePermissionResponse* msg) {
  return *msg->header_;
}
AuthRoleRevokePermissionResponse::AuthRoleRevokePermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.AuthRoleRevokePermissionResponse)
}
AuthRoleRevokePermissionResponse::AuthRoleRevokePermissionResponse(const AuthRoleRevokePermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleRevokePermissionResponse)
}

inline void AuthRoleRevokePermissionResponse::SharedCtor() {
header_ = nullptr;
}

AuthRoleRevokePermissionResponse::~AuthRoleRevokePermissionResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleRevokePermissionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRoleRevokePermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleRevokePermissionResponse::ArenaDtor(void* object) {
  AuthRoleRevokePermissionResponse* _this = reinterpret_cast< AuthRoleRevokePermissionResponse* >(object);
  (void)_this;
}
void AuthRoleRevokePermissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRoleRevokePermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRoleRevokePermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRoleRevokePermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRoleRevokePermissionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleRevokePermissionResponse)
  return target;
}

size_t AuthRoleRevokePermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRoleRevokePermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRoleRevokePermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRoleRevokePermissionResponse::GetClassData() const { return &_class_data_; }

void AuthRoleRevokePermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRoleRevokePermissionResponse *>(to)->MergeFrom(
      static_cast<const AuthRoleRevokePermissionResponse &>(from));
}


void AuthRoleRevokePermissionResponse::MergeFrom(const AuthRoleRevokePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRoleRevokePermissionResponse::CopyFrom(const AuthRoleRevokePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleRevokePermissionResponse::IsInitialized() const {
  return true;
}

void AuthRoleRevokePermissionResponse::InternalSwap(AuthRoleRevokePermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleRevokePermissionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[84]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace etcdserverpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::etcdserverpb::ResponseHeader* Arena::CreateMaybeMessage< ::etcdserverpb::ResponseHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::ResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::RangeRequest* Arena::CreateMaybeMessage< ::etcdserverpb::RangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::RangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::RangeResponse* Arena::CreateMaybeMessage< ::etcdserverpb::RangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::RangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::PutRequest* Arena::CreateMaybeMessage< ::etcdserverpb::PutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::PutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::PutResponse* Arena::CreateMaybeMessage< ::etcdserverpb::PutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::PutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::DeleteRangeRequest* Arena::CreateMaybeMessage< ::etcdserverpb::DeleteRangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::DeleteRangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::DeleteRangeResponse* Arena::CreateMaybeMessage< ::etcdserverpb::DeleteRangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::DeleteRangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::RequestOp* Arena::CreateMaybeMessage< ::etcdserverpb::RequestOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::RequestOp >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::ResponseOp* Arena::CreateMaybeMessage< ::etcdserverpb::ResponseOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::ResponseOp >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::Compare* Arena::CreateMaybeMessage< ::etcdserverpb::Compare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::Compare >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::TxnRequest* Arena::CreateMaybeMessage< ::etcdserverpb::TxnRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::TxnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::TxnResponse* Arena::CreateMaybeMessage< ::etcdserverpb::TxnResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::TxnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::CompactionRequest* Arena::CreateMaybeMessage< ::etcdserverpb::CompactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::CompactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::CompactionResponse* Arena::CreateMaybeMessage< ::etcdserverpb::CompactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::CompactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::HashRequest* Arena::CreateMaybeMessage< ::etcdserverpb::HashRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::HashRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::HashKVRequest* Arena::CreateMaybeMessage< ::etcdserverpb::HashKVRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::HashKVRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::HashKVResponse* Arena::CreateMaybeMessage< ::etcdserverpb::HashKVResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::HashKVResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::HashResponse* Arena::CreateMaybeMessage< ::etcdserverpb::HashResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::HashResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::SnapshotRequest* Arena::CreateMaybeMessage< ::etcdserverpb::SnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::SnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::SnapshotResponse* Arena::CreateMaybeMessage< ::etcdserverpb::SnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::SnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::WatchRequest* Arena::CreateMaybeMessage< ::etcdserverpb::WatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::WatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::WatchCreateRequest* Arena::CreateMaybeMessage< ::etcdserverpb::WatchCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::WatchCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::WatchCancelRequest* Arena::CreateMaybeMessage< ::etcdserverpb::WatchCancelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::WatchCancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::WatchResponse* Arena::CreateMaybeMessage< ::etcdserverpb::WatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::WatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseGrantRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseGrantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseGrantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseGrantResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseGrantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseGrantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseRevokeRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseRevokeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseRevokeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseRevokeResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseRevokeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseRevokeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseKeepAliveRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseKeepAliveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseKeepAliveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseKeepAliveResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseKeepAliveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseKeepAliveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseTimeToLiveRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseTimeToLiveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseTimeToLiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseTimeToLiveResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseTimeToLiveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseTimeToLiveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseLeasesRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseLeasesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseLeasesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseStatus* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseLeasesResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseLeasesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::LeaseLeasesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::Member* Arena::CreateMaybeMessage< ::etcdserverpb::Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::Member >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberAddRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MemberAddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MemberAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberAddResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MemberAddResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MemberAddResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberRemoveRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MemberRemoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MemberRemoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberRemoveResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MemberRemoveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MemberRemoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberUpdateRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MemberUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MemberUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberUpdateResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MemberUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MemberUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberListRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MemberListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MemberListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberListResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MemberListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MemberListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::DefragmentRequest* Arena::CreateMaybeMessage< ::etcdserverpb::DefragmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::DefragmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::DefragmentResponse* Arena::CreateMaybeMessage< ::etcdserverpb::DefragmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::DefragmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MoveLeaderRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MoveLeaderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MoveLeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MoveLeaderResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MoveLeaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::MoveLeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AlarmRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AlarmRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AlarmRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AlarmMember* Arena::CreateMaybeMessage< ::etcdserverpb::AlarmMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AlarmMember >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AlarmResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AlarmResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AlarmResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::StatusRequest* Arena::CreateMaybeMessage< ::etcdserverpb::StatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::StatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::StatusResponse* Arena::CreateMaybeMessage< ::etcdserverpb::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthEnableRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthEnableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthEnableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthDisableRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthDisableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthDisableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthenticateRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthenticateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthenticateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserAddRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserAddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserGetRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserDeleteRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserChangePasswordRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserChangePasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserChangePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserGrantRoleRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserGrantRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserGrantRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserRevokeRoleRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserRevokeRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserRevokeRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleAddRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleAddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleGetRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserListRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleListRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleDeleteRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleGrantPermissionRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleGrantPermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleGrantPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleRevokePermissionRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleRevokePermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleRevokePermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthEnableResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthEnableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthEnableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthDisableResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthDisableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthDisableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthenticateResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthenticateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthenticateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserAddResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserAddResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserAddResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserGetResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserDeleteResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserChangePasswordResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserChangePasswordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserChangePasswordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserGrantRoleResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserGrantRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserGrantRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserRevokeRoleResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserRevokeRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserRevokeRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleAddResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleAddResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleAddResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleGetResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleListResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserListResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthUserListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleDeleteResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleGrantPermissionResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleGrantPermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleGrantPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleRevokePermissionResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleRevokePermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::AuthRoleRevokePermissionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
