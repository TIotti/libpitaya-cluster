// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kick.proto

#include "kick.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protos {
class KickMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KickMsg>
      _instance;
} _KickMsg_default_instance_;
class KickAnswerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KickAnswer>
      _instance;
} _KickAnswer_default_instance_;
}  // namespace protos
namespace protobuf_kick_2eproto {
static void InitDefaultsKickMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_KickMsg_default_instance_;
    new (ptr) ::protos::KickMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::KickMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KickMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKickMsg}, {}};

static void InitDefaultsKickAnswer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_KickAnswer_default_instance_;
    new (ptr) ::protos::KickAnswer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::KickAnswer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KickAnswer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKickAnswer}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_KickMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KickAnswer.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protos::KickMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protos::KickMsg, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protos::KickAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protos::KickAnswer, kicked_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protos::KickMsg)},
  { 6, -1, sizeof(::protos::KickAnswer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protos::_KickMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protos::_KickAnswer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "kick.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nkick.proto\022\006protos\"\031\n\007KickMsg\022\016\n\006userI"
      "d\030\001 \001(\t\"\034\n\nKickAnswer\022\016\n\006kicked\030\001 \001(\010b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 85);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kick.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_kick_2eproto
namespace protos {

// ===================================================================

void KickMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickMsg::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickMsg::KickMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kick_2eproto::scc_info_KickMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.KickMsg)
}
KickMsg::KickMsg(const KickMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  // @@protoc_insertion_point(copy_constructor:protos.KickMsg)
}

void KickMsg::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KickMsg::~KickMsg() {
  // @@protoc_insertion_point(destructor:protos.KickMsg)
  SharedDtor();
}

void KickMsg::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KickMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KickMsg::descriptor() {
  ::protobuf_kick_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kick_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KickMsg& KickMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kick_2eproto::scc_info_KickMsg.base);
  return *internal_default_instance();
}


void KickMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.KickMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KickMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.KickMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protos.KickMsg.userId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.KickMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.KickMsg)
  return false;
#undef DO_
}

void KickMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.KickMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protos.KickMsg.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.KickMsg)
}

::google::protobuf::uint8* KickMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protos.KickMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protos.KickMsg.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.KickMsg)
  return target;
}

size_t KickMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.KickMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.KickMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const KickMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KickMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.KickMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.KickMsg)
    MergeFrom(*source);
  }
}

void KickMsg::MergeFrom(const KickMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.KickMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void KickMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.KickMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickMsg::CopyFrom(const KickMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.KickMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickMsg::IsInitialized() const {
  return true;
}

void KickMsg::Swap(KickMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickMsg::InternalSwap(KickMsg* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KickMsg::GetMetadata() const {
  protobuf_kick_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kick_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KickAnswer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickAnswer::kKickedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickAnswer::KickAnswer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_kick_2eproto::scc_info_KickAnswer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.KickAnswer)
}
KickAnswer::KickAnswer(const KickAnswer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kicked_ = from.kicked_;
  // @@protoc_insertion_point(copy_constructor:protos.KickAnswer)
}

void KickAnswer::SharedCtor() {
  kicked_ = false;
}

KickAnswer::~KickAnswer() {
  // @@protoc_insertion_point(destructor:protos.KickAnswer)
  SharedDtor();
}

void KickAnswer::SharedDtor() {
}

void KickAnswer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KickAnswer::descriptor() {
  ::protobuf_kick_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kick_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KickAnswer& KickAnswer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_kick_2eproto::scc_info_KickAnswer.base);
  return *internal_default_instance();
}


void KickAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.KickAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kicked_ = false;
  _internal_metadata_.Clear();
}

bool KickAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.KickAnswer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool kicked = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kicked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.KickAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.KickAnswer)
  return false;
#undef DO_
}

void KickAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.KickAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool kicked = 1;
  if (this->kicked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->kicked(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protos.KickAnswer)
}

::google::protobuf::uint8* KickAnswer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protos.KickAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool kicked = 1;
  if (this->kicked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->kicked(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.KickAnswer)
  return target;
}

size_t KickAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.KickAnswer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool kicked = 1;
  if (this->kicked() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickAnswer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.KickAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  const KickAnswer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KickAnswer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.KickAnswer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.KickAnswer)
    MergeFrom(*source);
  }
}

void KickAnswer::MergeFrom(const KickAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.KickAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kicked() != 0) {
    set_kicked(from.kicked());
  }
}

void KickAnswer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.KickAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickAnswer::CopyFrom(const KickAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.KickAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickAnswer::IsInitialized() const {
  return true;
}

void KickAnswer::Swap(KickAnswer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickAnswer::InternalSwap(KickAnswer* other) {
  using std::swap;
  swap(kicked_, other->kicked_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KickAnswer::GetMetadata() const {
  protobuf_kick_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kick_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protos::KickMsg* Arena::CreateMaybeMessage< ::protos::KickMsg >(Arena* arena) {
  return Arena::CreateInternal< ::protos::KickMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protos::KickAnswer* Arena::CreateMaybeMessage< ::protos::KickAnswer >(Arena* arena) {
  return Arena::CreateInternal< ::protos::KickAnswer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
