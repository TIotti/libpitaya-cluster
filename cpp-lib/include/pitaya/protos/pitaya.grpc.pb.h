// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pitaya.proto
#ifndef GRPC_pitaya_2eproto__INCLUDED
#define GRPC_pitaya_2eproto__INCLUDED

#include "pitaya.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace protos {

class Pitaya final {
 public:
  static constexpr char const* service_full_name() {
    return "protos.Pitaya";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Call(::grpc::ClientContext* context, const ::protos::Request& request, ::protos::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>> AsyncCall(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>> PrepareAsyncCall(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>>(PrepareAsyncCallRaw(context, request, cq));
    }
    virtual ::grpc::Status PushToUser(::grpc::ClientContext* context, const ::protos::Push& request, ::protos::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>> AsyncPushToUser(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>>(AsyncPushToUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>> PrepareAsyncPushToUser(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>>(PrepareAsyncPushToUserRaw(context, request, cq));
    }
    virtual ::grpc::Status SessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::protos::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>> AsyncSessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>>(AsyncSessionBindRemoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>> PrepareAsyncSessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>>(PrepareAsyncSessionBindRemoteRaw(context, request, cq));
    }
    virtual ::grpc::Status KickUser(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::protos::KickAnswer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::KickAnswer>> AsyncKickUser(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::KickAnswer>>(AsyncKickUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::KickAnswer>> PrepareAsyncKickUser(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::KickAnswer>>(PrepareAsyncKickUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Call(::grpc::ClientContext* context, const ::protos::Request* request, ::protos::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Call(::grpc::ClientContext* context, const ::protos::Request* request, ::protos::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PushToUser(::grpc::ClientContext* context, const ::protos::Push* request, ::protos::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushToUser(::grpc::ClientContext* context, const ::protos::Push* request, ::protos::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg* request, ::protos::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg* request, ::protos::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void KickUser(::grpc::ClientContext* context, const ::protos::KickMsg* request, ::protos::KickAnswer* response, std::function<void(::grpc::Status)>) = 0;
      virtual void KickUser(::grpc::ClientContext* context, const ::protos::KickMsg* request, ::protos::KickAnswer* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>* AsyncCallRaw(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>* AsyncPushToUserRaw(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>* PrepareAsyncPushToUserRaw(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>* AsyncSessionBindRemoteRaw(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>* PrepareAsyncSessionBindRemoteRaw(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::KickAnswer>* AsyncKickUserRaw(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::KickAnswer>* PrepareAsyncKickUserRaw(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Call(::grpc::ClientContext* context, const ::protos::Request& request, ::protos::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>> AsyncCall(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>> PrepareAsyncCall(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>>(PrepareAsyncCallRaw(context, request, cq));
    }
    ::grpc::Status PushToUser(::grpc::ClientContext* context, const ::protos::Push& request, ::protos::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>> AsyncPushToUser(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>>(AsyncPushToUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>> PrepareAsyncPushToUser(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>>(PrepareAsyncPushToUserRaw(context, request, cq));
    }
    ::grpc::Status SessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::protos::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>> AsyncSessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>>(AsyncSessionBindRemoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>> PrepareAsyncSessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Response>>(PrepareAsyncSessionBindRemoteRaw(context, request, cq));
    }
    ::grpc::Status KickUser(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::protos::KickAnswer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::KickAnswer>> AsyncKickUser(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::KickAnswer>>(AsyncKickUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::KickAnswer>> PrepareAsyncKickUser(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::KickAnswer>>(PrepareAsyncKickUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Call(::grpc::ClientContext* context, const ::protos::Request* request, ::protos::Response* response, std::function<void(::grpc::Status)>) override;
      void Call(::grpc::ClientContext* context, const ::protos::Request* request, ::protos::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PushToUser(::grpc::ClientContext* context, const ::protos::Push* request, ::protos::Response* response, std::function<void(::grpc::Status)>) override;
      void PushToUser(::grpc::ClientContext* context, const ::protos::Push* request, ::protos::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg* request, ::protos::Response* response, std::function<void(::grpc::Status)>) override;
      void SessionBindRemote(::grpc::ClientContext* context, const ::protos::BindMsg* request, ::protos::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void KickUser(::grpc::ClientContext* context, const ::protos::KickMsg* request, ::protos::KickAnswer* response, std::function<void(::grpc::Status)>) override;
      void KickUser(::grpc::ClientContext* context, const ::protos::KickMsg* request, ::protos::KickAnswer* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protos::Response>* AsyncCallRaw(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Response>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Response>* AsyncPushToUserRaw(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Response>* PrepareAsyncPushToUserRaw(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Response>* AsyncSessionBindRemoteRaw(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Response>* PrepareAsyncSessionBindRemoteRaw(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::KickAnswer>* AsyncKickUserRaw(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::KickAnswer>* PrepareAsyncKickUserRaw(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Call_;
    const ::grpc::internal::RpcMethod rpcmethod_PushToUser_;
    const ::grpc::internal::RpcMethod rpcmethod_SessionBindRemote_;
    const ::grpc::internal::RpcMethod rpcmethod_KickUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Call(::grpc::ServerContext* context, const ::protos::Request* request, ::protos::Response* response);
    virtual ::grpc::Status PushToUser(::grpc::ServerContext* context, const ::protos::Push* request, ::protos::Response* response);
    virtual ::grpc::Status SessionBindRemote(::grpc::ServerContext* context, const ::protos::BindMsg* request, ::protos::Response* response);
    virtual ::grpc::Status KickUser(::grpc::ServerContext* context, const ::protos::KickMsg* request, ::protos::KickAnswer* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Call() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::protos::Request* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::protos::Request* request, ::grpc::ServerAsyncResponseWriter< ::protos::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushToUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushToUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushToUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushToUser(::grpc::ServerContext* /*context*/, const ::protos::Push* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushToUser(::grpc::ServerContext* context, ::protos::Push* request, ::grpc::ServerAsyncResponseWriter< ::protos::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SessionBindRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SessionBindRemote() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SessionBindRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionBindRemote(::grpc::ServerContext* /*context*/, const ::protos::BindMsg* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionBindRemote(::grpc::ServerContext* context, ::protos::BindMsg* request, ::grpc::ServerAsyncResponseWriter< ::protos::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_KickUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_KickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KickUser(::grpc::ServerContext* /*context*/, const ::protos::KickMsg* /*request*/, ::protos::KickAnswer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKickUser(::grpc::ServerContext* context, ::protos::KickMsg* request, ::grpc::ServerAsyncResponseWriter< ::protos::KickAnswer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Call<WithAsyncMethod_PushToUser<WithAsyncMethod_SessionBindRemote<WithAsyncMethod_KickUser<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Call() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::Request, ::protos::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::Request* request, ::protos::Response* response) { return this->Call(context, request, response); }));}
    void SetMessageAllocatorFor_Call(
        ::grpc::MessageAllocator< ::protos::Request, ::protos::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::Request, ::protos::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::protos::Request* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::Request* /*request*/, ::protos::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushToUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushToUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::Push, ::protos::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::Push* request, ::protos::Response* response) { return this->PushToUser(context, request, response); }));}
    void SetMessageAllocatorFor_PushToUser(
        ::grpc::MessageAllocator< ::protos::Push, ::protos::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::Push, ::protos::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushToUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushToUser(::grpc::ServerContext* /*context*/, const ::protos::Push* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushToUser(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::Push* /*request*/, ::protos::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SessionBindRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SessionBindRemote() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::BindMsg, ::protos::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::BindMsg* request, ::protos::Response* response) { return this->SessionBindRemote(context, request, response); }));}
    void SetMessageAllocatorFor_SessionBindRemote(
        ::grpc::MessageAllocator< ::protos::BindMsg, ::protos::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::BindMsg, ::protos::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SessionBindRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionBindRemote(::grpc::ServerContext* /*context*/, const ::protos::BindMsg* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SessionBindRemote(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::BindMsg* /*request*/, ::protos::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_KickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_KickUser() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::KickMsg, ::protos::KickAnswer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::KickMsg* request, ::protos::KickAnswer* response) { return this->KickUser(context, request, response); }));}
    void SetMessageAllocatorFor_KickUser(
        ::grpc::MessageAllocator< ::protos::KickMsg, ::protos::KickAnswer>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::KickMsg, ::protos::KickAnswer>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_KickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KickUser(::grpc::ServerContext* /*context*/, const ::protos::KickMsg* /*request*/, ::protos::KickAnswer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* KickUser(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::KickMsg* /*request*/, ::protos::KickAnswer* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Call<WithCallbackMethod_PushToUser<WithCallbackMethod_SessionBindRemote<WithCallbackMethod_KickUser<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Call() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::protos::Request* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushToUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushToUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushToUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushToUser(::grpc::ServerContext* /*context*/, const ::protos::Push* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SessionBindRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SessionBindRemote() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SessionBindRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionBindRemote(::grpc::ServerContext* /*context*/, const ::protos::BindMsg* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_KickUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_KickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KickUser(::grpc::ServerContext* /*context*/, const ::protos::KickMsg* /*request*/, ::protos::KickAnswer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Call() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::protos::Request* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushToUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushToUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PushToUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushToUser(::grpc::ServerContext* /*context*/, const ::protos::Push* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushToUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SessionBindRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SessionBindRemote() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SessionBindRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionBindRemote(::grpc::ServerContext* /*context*/, const ::protos::BindMsg* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionBindRemote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_KickUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_KickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KickUser(::grpc::ServerContext* /*context*/, const ::protos::KickMsg* /*request*/, ::protos::KickAnswer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKickUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Call() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Call(context, request, response); }));
    }
    ~WithRawCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::protos::Request* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushToUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushToUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushToUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushToUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushToUser(::grpc::ServerContext* /*context*/, const ::protos::Push* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushToUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SessionBindRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SessionBindRemote() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SessionBindRemote(context, request, response); }));
    }
    ~WithRawCallbackMethod_SessionBindRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionBindRemote(::grpc::ServerContext* /*context*/, const ::protos::BindMsg* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SessionBindRemote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_KickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_KickUser() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->KickUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_KickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KickUser(::grpc::ServerContext* /*context*/, const ::protos::KickMsg* /*request*/, ::protos::KickAnswer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* KickUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Call() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::Request, ::protos::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::Request, ::protos::Response>* streamer) {
                       return this->StreamedCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::protos::Request* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::Request,::protos::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushToUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushToUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::Push, ::protos::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::Push, ::protos::Response>* streamer) {
                       return this->StreamedPushToUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushToUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushToUser(::grpc::ServerContext* /*context*/, const ::protos::Push* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushToUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::Push,::protos::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SessionBindRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SessionBindRemote() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::BindMsg, ::protos::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::BindMsg, ::protos::Response>* streamer) {
                       return this->StreamedSessionBindRemote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SessionBindRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SessionBindRemote(::grpc::ServerContext* /*context*/, const ::protos::BindMsg* /*request*/, ::protos::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSessionBindRemote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::BindMsg,::protos::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KickUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_KickUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::KickMsg, ::protos::KickAnswer>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::KickMsg, ::protos::KickAnswer>* streamer) {
                       return this->StreamedKickUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_KickUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KickUser(::grpc::ServerContext* /*context*/, const ::protos::KickMsg* /*request*/, ::protos::KickAnswer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKickUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::KickMsg,::protos::KickAnswer>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Call<WithStreamedUnaryMethod_PushToUser<WithStreamedUnaryMethod_SessionBindRemote<WithStreamedUnaryMethod_KickUser<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Call<WithStreamedUnaryMethod_PushToUser<WithStreamedUnaryMethod_SessionBindRemote<WithStreamedUnaryMethod_KickUser<Service > > > > StreamedService;
};

}  // namespace protos


#endif  // GRPC_pitaya_2eproto__INCLUDED
