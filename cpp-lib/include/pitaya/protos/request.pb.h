// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef PROTOBUF_INCLUDED_request_2eproto
#define PROTOBUF_INCLUDED_request_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "session.pb.h"
#include "msg.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_request_2eproto 

namespace protobuf_request_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_request_2eproto
namespace protos {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace protos
namespace google {
namespace protobuf {
template<> ::protos::Request* Arena::CreateMaybeMessage<::protos::Request>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protos {

enum RPCType {
  Sys = 0,
  User = 1,
  RPCType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RPCType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RPCType_IsValid(int value);
const RPCType RPCType_MIN = Sys;
const RPCType RPCType_MAX = User;
const int RPCType_ARRAYSIZE = RPCType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RPCType_descriptor();
inline const ::std::string& RPCType_Name(RPCType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RPCType_descriptor(), value);
}
inline bool RPCType_Parse(
    const ::std::string& name, RPCType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPCType>(
    RPCType_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string frontendID = 4;
  void clear_frontendid();
  static const int kFrontendIDFieldNumber = 4;
  const ::std::string& frontendid() const;
  void set_frontendid(const ::std::string& value);
  #if LANG_CXX11
  void set_frontendid(::std::string&& value);
  #endif
  void set_frontendid(const char* value);
  void set_frontendid(const char* value, size_t size);
  ::std::string* mutable_frontendid();
  ::std::string* release_frontendid();
  void set_allocated_frontendid(::std::string* frontendid);

  // bytes metadata = 5;
  void clear_metadata();
  static const int kMetadataFieldNumber = 5;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_metadata(::std::string&& value);
  #endif
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // .protos.Session session = 2;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 2;
  private:
  const ::protos::Session& _internal_session() const;
  public:
  const ::protos::Session& session() const;
  ::protos::Session* release_session();
  ::protos::Session* mutable_session();
  void set_allocated_session(::protos::Session* session);

  // .protos.Msg msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  private:
  const ::protos::Msg& _internal_msg() const;
  public:
  const ::protos::Msg& msg() const;
  ::protos::Msg* release_msg();
  ::protos::Msg* mutable_msg();
  void set_allocated_msg(::protos::Msg* msg);

  // .protos.RPCType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::protos::RPCType type() const;
  void set_type(::protos::RPCType value);

  // @@protoc_insertion_point(class_scope:protos.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr frontendid_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::protos::Session* session_;
  ::protos::Msg* msg_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_request_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .protos.RPCType type = 1;
inline void Request::clear_type() {
  type_ = 0;
}
inline ::protos::RPCType Request::type() const {
  // @@protoc_insertion_point(field_get:protos.Request.type)
  return static_cast< ::protos::RPCType >(type_);
}
inline void Request::set_type(::protos::RPCType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protos.Request.type)
}

// .protos.Session session = 2;
inline bool Request::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline const ::protos::Session& Request::_internal_session() const {
  return *session_;
}
inline const ::protos::Session& Request::session() const {
  const ::protos::Session* p = session_;
  // @@protoc_insertion_point(field_get:protos.Request.session)
  return p != NULL ? *p : *reinterpret_cast<const ::protos::Session*>(
      &::protos::_Session_default_instance_);
}
inline ::protos::Session* Request::release_session() {
  // @@protoc_insertion_point(field_release:protos.Request.session)
  
  ::protos::Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline ::protos::Session* Request::mutable_session() {
  
  if (session_ == NULL) {
    auto* p = CreateMaybeMessage<::protos::Session>(GetArenaNoVirtual());
    session_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.Request.session)
  return session_;
}
inline void Request::set_allocated_session(::protos::Session* session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(session_);
  }
  if (session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:protos.Request.session)
}

// .protos.Msg msg = 3;
inline bool Request::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
inline const ::protos::Msg& Request::_internal_msg() const {
  return *msg_;
}
inline const ::protos::Msg& Request::msg() const {
  const ::protos::Msg* p = msg_;
  // @@protoc_insertion_point(field_get:protos.Request.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::protos::Msg*>(
      &::protos::_Msg_default_instance_);
}
inline ::protos::Msg* Request::release_msg() {
  // @@protoc_insertion_point(field_release:protos.Request.msg)
  
  ::protos::Msg* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline ::protos::Msg* Request::mutable_msg() {
  
  if (msg_ == NULL) {
    auto* p = CreateMaybeMessage<::protos::Msg>(GetArenaNoVirtual());
    msg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.Request.msg)
  return msg_;
}
inline void Request::set_allocated_msg(::protos::Msg* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msg_);
  }
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:protos.Request.msg)
}

// string frontendID = 4;
inline void Request::clear_frontendid() {
  frontendid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::frontendid() const {
  // @@protoc_insertion_point(field_get:protos.Request.frontendID)
  return frontendid_.GetNoArena();
}
inline void Request::set_frontendid(const ::std::string& value) {
  
  frontendid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Request.frontendID)
}
#if LANG_CXX11
inline void Request::set_frontendid(::std::string&& value) {
  
  frontendid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.Request.frontendID)
}
#endif
inline void Request::set_frontendid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frontendid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Request.frontendID)
}
inline void Request::set_frontendid(const char* value, size_t size) {
  
  frontendid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Request.frontendID)
}
inline ::std::string* Request::mutable_frontendid() {
  
  // @@protoc_insertion_point(field_mutable:protos.Request.frontendID)
  return frontendid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_frontendid() {
  // @@protoc_insertion_point(field_release:protos.Request.frontendID)
  
  return frontendid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_frontendid(::std::string* frontendid) {
  if (frontendid != NULL) {
    
  } else {
    
  }
  frontendid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frontendid);
  // @@protoc_insertion_point(field_set_allocated:protos.Request.frontendID)
}

// bytes metadata = 5;
inline void Request::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::metadata() const {
  // @@protoc_insertion_point(field_get:protos.Request.metadata)
  return metadata_.GetNoArena();
}
inline void Request::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Request.metadata)
}
#if LANG_CXX11
inline void Request::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.Request.metadata)
}
#endif
inline void Request::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Request.metadata)
}
inline void Request::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Request.metadata)
}
inline ::std::string* Request::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:protos.Request.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_metadata() {
  // @@protoc_insertion_point(field_release:protos.Request.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:protos.Request.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protos::RPCType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::RPCType>() {
  return ::protos::RPCType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_request_2eproto
