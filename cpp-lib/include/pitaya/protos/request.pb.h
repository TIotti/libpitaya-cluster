// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "session.pb.h"
#include "msg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_request_2eproto_metadata_getter(int index);
namespace protos {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::Request* Arena::CreateMaybeMessage<::protos::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

enum RPCType : int {
  Sys = 0,
  User = 1,
  RPCType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RPCType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RPCType_IsValid(int value);
constexpr RPCType RPCType_MIN = Sys;
constexpr RPCType RPCType_MAX = User;
constexpr int RPCType_ARRAYSIZE = RPCType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPCType_descriptor();
template<typename T>
inline const std::string& RPCType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RPCType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RPCType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RPCType_descriptor(), enum_t_value);
}
inline bool RPCType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RPCType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RPCType>(
    RPCType_descriptor(), name, value);
}
// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_request_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontendIDFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kSessionFieldNumber = 2,
    kMsgFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string frontendID = 4;
  void clear_frontendid();
  const std::string& frontendid() const;
  void set_frontendid(const std::string& value);
  void set_frontendid(std::string&& value);
  void set_frontendid(const char* value);
  void set_frontendid(const char* value, size_t size);
  std::string* mutable_frontendid();
  std::string* release_frontendid();
  void set_allocated_frontendid(std::string* frontendid);
  private:
  const std::string& _internal_frontendid() const;
  void _internal_set_frontendid(const std::string& value);
  std::string* _internal_mutable_frontendid();
  public:

  // bytes metadata = 5;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .protos.Session session = 2;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::protos::Session& session() const;
  ::protos::Session* release_session();
  ::protos::Session* mutable_session();
  void set_allocated_session(::protos::Session* session);
  private:
  const ::protos::Session& _internal_session() const;
  ::protos::Session* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::protos::Session* session);
  ::protos::Session* unsafe_arena_release_session();

  // .protos.Msg msg = 3;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::protos::Msg& msg() const;
  ::protos::Msg* release_msg();
  ::protos::Msg* mutable_msg();
  void set_allocated_msg(::protos::Msg* msg);
  private:
  const ::protos::Msg& _internal_msg() const;
  ::protos::Msg* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::protos::Msg* msg);
  ::protos::Msg* unsafe_arena_release_msg();

  // .protos.RPCType type = 1;
  void clear_type();
  ::protos::RPCType type() const;
  void set_type(::protos::RPCType value);
  private:
  ::protos::RPCType _internal_type() const;
  void _internal_set_type(::protos::RPCType value);
  public:

  // @@protoc_insertion_point(class_scope:protos.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frontendid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::protos::Session* session_;
  ::protos::Msg* msg_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .protos.RPCType type = 1;
inline void Request::clear_type() {
  type_ = 0;
}
inline ::protos::RPCType Request::_internal_type() const {
  return static_cast< ::protos::RPCType >(type_);
}
inline ::protos::RPCType Request::type() const {
  // @@protoc_insertion_point(field_get:protos.Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::protos::RPCType value) {
  
  type_ = value;
}
inline void Request::set_type(::protos::RPCType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protos.Request.type)
}

// .protos.Session session = 2;
inline bool Request::_internal_has_session() const {
  return this != internal_default_instance() && session_ != nullptr;
}
inline bool Request::has_session() const {
  return _internal_has_session();
}
inline const ::protos::Session& Request::_internal_session() const {
  const ::protos::Session* p = session_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::Session&>(
      ::protos::_Session_default_instance_);
}
inline const ::protos::Session& Request::session() const {
  // @@protoc_insertion_point(field_get:protos.Request.session)
  return _internal_session();
}
inline void Request::unsafe_arena_set_allocated_session(
    ::protos::Session* session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_);
  }
  session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Request.session)
}
inline ::protos::Session* Request::release_session() {
  
  ::protos::Session* temp = session_;
  session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::Session* Request::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_release:protos.Request.session)
  
  ::protos::Session* temp = session_;
  session_ = nullptr;
  return temp;
}
inline ::protos::Session* Request::_internal_mutable_session() {
  
  if (session_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::Session>(GetArena());
    session_ = p;
  }
  return session_;
}
inline ::protos::Session* Request::mutable_session() {
  // @@protoc_insertion_point(field_mutable:protos.Request.session)
  return _internal_mutable_session();
}
inline void Request::set_allocated_session(::protos::Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_);
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session)->GetArena();
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:protos.Request.session)
}

// .protos.Msg msg = 3;
inline bool Request::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool Request::has_msg() const {
  return _internal_has_msg();
}
inline const ::protos::Msg& Request::_internal_msg() const {
  const ::protos::Msg* p = msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::Msg&>(
      ::protos::_Msg_default_instance_);
}
inline const ::protos::Msg& Request::msg() const {
  // @@protoc_insertion_point(field_get:protos.Request.msg)
  return _internal_msg();
}
inline void Request::unsafe_arena_set_allocated_msg(
    ::protos::Msg* msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Request.msg)
}
inline ::protos::Msg* Request::release_msg() {
  
  ::protos::Msg* temp = msg_;
  msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::Msg* Request::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:protos.Request.msg)
  
  ::protos::Msg* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::protos::Msg* Request::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::Msg>(GetArena());
    msg_ = p;
  }
  return msg_;
}
inline ::protos::Msg* Request::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:protos.Request.msg)
  return _internal_mutable_msg();
}
inline void Request::set_allocated_msg(::protos::Msg* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg)->GetArena();
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:protos.Request.msg)
}

// string frontendID = 4;
inline void Request::clear_frontendid() {
  frontendid_.ClearToEmpty();
}
inline const std::string& Request::frontendid() const {
  // @@protoc_insertion_point(field_get:protos.Request.frontendID)
  return _internal_frontendid();
}
inline void Request::set_frontendid(const std::string& value) {
  _internal_set_frontendid(value);
  // @@protoc_insertion_point(field_set:protos.Request.frontendID)
}
inline std::string* Request::mutable_frontendid() {
  // @@protoc_insertion_point(field_mutable:protos.Request.frontendID)
  return _internal_mutable_frontendid();
}
inline const std::string& Request::_internal_frontendid() const {
  return frontendid_.Get();
}
inline void Request::_internal_set_frontendid(const std::string& value) {
  
  frontendid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_frontendid(std::string&& value) {
  
  frontendid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.Request.frontendID)
}
inline void Request::set_frontendid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frontendid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.Request.frontendID)
}
inline void Request::set_frontendid(const char* value,
    size_t size) {
  
  frontendid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.Request.frontendID)
}
inline std::string* Request::_internal_mutable_frontendid() {
  
  return frontendid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_frontendid() {
  // @@protoc_insertion_point(field_release:protos.Request.frontendID)
  return frontendid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_frontendid(std::string* frontendid) {
  if (frontendid != nullptr) {
    
  } else {
    
  }
  frontendid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frontendid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.Request.frontendID)
}

// bytes metadata = 5;
inline void Request::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& Request::metadata() const {
  // @@protoc_insertion_point(field_get:protos.Request.metadata)
  return _internal_metadata();
}
inline void Request::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:protos.Request.metadata)
}
inline std::string* Request::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protos.Request.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& Request::_internal_metadata() const {
  return metadata_.Get();
}
inline void Request::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.Request.metadata)
}
inline void Request::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.Request.metadata)
}
inline void Request::set_metadata(const void* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.Request.metadata)
}
inline std::string* Request::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_metadata() {
  // @@protoc_insertion_point(field_release:protos.Request.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.Request.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protos::RPCType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::RPCType>() {
  return ::protos::RPCType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto
