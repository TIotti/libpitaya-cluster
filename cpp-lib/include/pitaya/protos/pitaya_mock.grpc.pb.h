// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pitaya.proto

#include "pitaya.pb.h"
#include "pitaya.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace protos {

class MockPitayaStub : public Pitaya::StubInterface {
 public:
  MOCK_METHOD3(Call, ::grpc::Status(::grpc::ClientContext* context, const ::protos::Request& request, ::protos::Response* response));
  MOCK_METHOD3(AsyncCallRaw, ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>*(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCallRaw, ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>*(::grpc::ClientContext* context, const ::protos::Request& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PushToUser, ::grpc::Status(::grpc::ClientContext* context, const ::protos::Push& request, ::protos::Response* response));
  MOCK_METHOD3(AsyncPushToUserRaw, ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>*(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPushToUserRaw, ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>*(::grpc::ClientContext* context, const ::protos::Push& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SessionBindRemote, ::grpc::Status(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::protos::Response* response));
  MOCK_METHOD3(AsyncSessionBindRemoteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>*(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSessionBindRemoteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::protos::Response>*(::grpc::ClientContext* context, const ::protos::BindMsg& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(KickUser, ::grpc::Status(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::protos::KickAnswer* response));
  MOCK_METHOD3(AsyncKickUserRaw, ::grpc::ClientAsyncResponseReaderInterface< ::protos::KickAnswer>*(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncKickUserRaw, ::grpc::ClientAsyncResponseReaderInterface< ::protos::KickAnswer>*(::grpc::ClientContext* context, const ::protos::KickMsg& request, ::grpc::CompletionQueue* cq));
};

} // namespace protos

