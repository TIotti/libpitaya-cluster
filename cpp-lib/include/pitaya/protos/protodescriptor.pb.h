// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protodescriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protodescriptor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protodescriptor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protodescriptor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protodescriptor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protodescriptor_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protodescriptor_2eproto_metadata_getter(int index);
namespace protos {
class ProtoDescriptor;
struct ProtoDescriptorDefaultTypeInternal;
extern ProtoDescriptorDefaultTypeInternal _ProtoDescriptor_default_instance_;
class ProtoDescriptors;
struct ProtoDescriptorsDefaultTypeInternal;
extern ProtoDescriptorsDefaultTypeInternal _ProtoDescriptors_default_instance_;
class ProtoName;
struct ProtoNameDefaultTypeInternal;
extern ProtoNameDefaultTypeInternal _ProtoName_default_instance_;
class ProtoNames;
struct ProtoNamesDefaultTypeInternal;
extern ProtoNamesDefaultTypeInternal _ProtoNames_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::ProtoDescriptor* Arena::CreateMaybeMessage<::protos::ProtoDescriptor>(Arena*);
template<> ::protos::ProtoDescriptors* Arena::CreateMaybeMessage<::protos::ProtoDescriptors>(Arena*);
template<> ::protos::ProtoName* Arena::CreateMaybeMessage<::protos::ProtoName>(Arena*);
template<> ::protos::ProtoNames* Arena::CreateMaybeMessage<::protos::ProtoNames>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

// ===================================================================

class ProtoDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ProtoDescriptor) */ {
 public:
  inline ProtoDescriptor() : ProtoDescriptor(nullptr) {}
  virtual ~ProtoDescriptor();
  explicit constexpr ProtoDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoDescriptor(const ProtoDescriptor& from);
  ProtoDescriptor(ProtoDescriptor&& from) noexcept
    : ProtoDescriptor() {
    *this = ::std::move(from);
  }

  inline ProtoDescriptor& operator=(const ProtoDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoDescriptor& operator=(ProtoDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoDescriptor* internal_default_instance() {
    return reinterpret_cast<const ProtoDescriptor*>(
               &_ProtoDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoDescriptor& a, ProtoDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoDescriptor* New() const final {
    return CreateMaybeMessage<ProtoDescriptor>(nullptr);
  }

  ProtoDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoDescriptor& from);
  void MergeFrom(const ProtoDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ProtoDescriptor";
  }
  protected:
  explicit ProtoDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protodescriptor_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 1,
  };
  // bytes desc = 1;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:protos.ProtoDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protodescriptor_2eproto;
};
// -------------------------------------------------------------------

class ProtoName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ProtoName) */ {
 public:
  inline ProtoName() : ProtoName(nullptr) {}
  virtual ~ProtoName();
  explicit constexpr ProtoName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoName(const ProtoName& from);
  ProtoName(ProtoName&& from) noexcept
    : ProtoName() {
    *this = ::std::move(from);
  }

  inline ProtoName& operator=(const ProtoName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoName& operator=(ProtoName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoName* internal_default_instance() {
    return reinterpret_cast<const ProtoName*>(
               &_ProtoName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoName& a, ProtoName& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoName* New() const final {
    return CreateMaybeMessage<ProtoName>(nullptr);
  }

  ProtoName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoName& from);
  void MergeFrom(const ProtoName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ProtoName";
  }
  protected:
  explicit ProtoName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protodescriptor_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:protos.ProtoName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protodescriptor_2eproto;
};
// -------------------------------------------------------------------

class ProtoDescriptors PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ProtoDescriptors) */ {
 public:
  inline ProtoDescriptors() : ProtoDescriptors(nullptr) {}
  virtual ~ProtoDescriptors();
  explicit constexpr ProtoDescriptors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoDescriptors(const ProtoDescriptors& from);
  ProtoDescriptors(ProtoDescriptors&& from) noexcept
    : ProtoDescriptors() {
    *this = ::std::move(from);
  }

  inline ProtoDescriptors& operator=(const ProtoDescriptors& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoDescriptors& operator=(ProtoDescriptors&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoDescriptors& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoDescriptors* internal_default_instance() {
    return reinterpret_cast<const ProtoDescriptors*>(
               &_ProtoDescriptors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtoDescriptors& a, ProtoDescriptors& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoDescriptors* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoDescriptors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoDescriptors* New() const final {
    return CreateMaybeMessage<ProtoDescriptors>(nullptr);
  }

  ProtoDescriptors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoDescriptors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoDescriptors& from);
  void MergeFrom(const ProtoDescriptors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoDescriptors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ProtoDescriptors";
  }
  protected:
  explicit ProtoDescriptors(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protodescriptor_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 1,
  };
  // repeated bytes desc = 1;
  int desc_size() const;
  private:
  int _internal_desc_size() const;
  public:
  void clear_desc();
  const std::string& desc(int index) const;
  std::string* mutable_desc(int index);
  void set_desc(int index, const std::string& value);
  void set_desc(int index, std::string&& value);
  void set_desc(int index, const char* value);
  void set_desc(int index, const void* value, size_t size);
  std::string* add_desc();
  void add_desc(const std::string& value);
  void add_desc(std::string&& value);
  void add_desc(const char* value);
  void add_desc(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& desc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_desc();
  private:
  const std::string& _internal_desc(int index) const;
  std::string* _internal_add_desc();
  public:

  // @@protoc_insertion_point(class_scope:protos.ProtoDescriptors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protodescriptor_2eproto;
};
// -------------------------------------------------------------------

class ProtoNames PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ProtoNames) */ {
 public:
  inline ProtoNames() : ProtoNames(nullptr) {}
  virtual ~ProtoNames();
  explicit constexpr ProtoNames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoNames(const ProtoNames& from);
  ProtoNames(ProtoNames&& from) noexcept
    : ProtoNames() {
    *this = ::std::move(from);
  }

  inline ProtoNames& operator=(const ProtoNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoNames& operator=(ProtoNames&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoNames& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoNames* internal_default_instance() {
    return reinterpret_cast<const ProtoNames*>(
               &_ProtoNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtoNames& a, ProtoNames& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoNames* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoNames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoNames* New() const final {
    return CreateMaybeMessage<ProtoNames>(nullptr);
  }

  ProtoNames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoNames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoNames& from);
  void MergeFrom(const ProtoNames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoNames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ProtoNames";
  }
  protected:
  explicit ProtoNames(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protodescriptor_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:protos.ProtoNames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protodescriptor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoDescriptor

// bytes desc = 1;
inline void ProtoDescriptor::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& ProtoDescriptor::desc() const {
  // @@protoc_insertion_point(field_get:protos.ProtoDescriptor.desc)
  return _internal_desc();
}
inline void ProtoDescriptor::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:protos.ProtoDescriptor.desc)
}
inline std::string* ProtoDescriptor::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:protos.ProtoDescriptor.desc)
  return _internal_mutable_desc();
}
inline const std::string& ProtoDescriptor::_internal_desc() const {
  return desc_.Get();
}
inline void ProtoDescriptor::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProtoDescriptor::set_desc(std::string&& value) {
  
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ProtoDescriptor.desc)
}
inline void ProtoDescriptor::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ProtoDescriptor.desc)
}
inline void ProtoDescriptor::set_desc(const void* value,
    size_t size) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ProtoDescriptor.desc)
}
inline std::string* ProtoDescriptor::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProtoDescriptor::release_desc() {
  // @@protoc_insertion_point(field_release:protos.ProtoDescriptor.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoDescriptor::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ProtoDescriptor.desc)
}

// -------------------------------------------------------------------

// ProtoName

// string name = 1;
inline void ProtoName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ProtoName::name() const {
  // @@protoc_insertion_point(field_get:protos.ProtoName.name)
  return _internal_name();
}
inline void ProtoName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protos.ProtoName.name)
}
inline std::string* ProtoName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protos.ProtoName.name)
  return _internal_mutable_name();
}
inline const std::string& ProtoName::_internal_name() const {
  return name_.Get();
}
inline void ProtoName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProtoName::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ProtoName.name)
}
inline void ProtoName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ProtoName.name)
}
inline void ProtoName::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ProtoName.name)
}
inline std::string* ProtoName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProtoName::release_name() {
  // @@protoc_insertion_point(field_release:protos.ProtoName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ProtoName.name)
}

// -------------------------------------------------------------------

// ProtoDescriptors

// repeated bytes desc = 1;
inline int ProtoDescriptors::_internal_desc_size() const {
  return desc_.size();
}
inline int ProtoDescriptors::desc_size() const {
  return _internal_desc_size();
}
inline void ProtoDescriptors::clear_desc() {
  desc_.Clear();
}
inline std::string* ProtoDescriptors::add_desc() {
  // @@protoc_insertion_point(field_add_mutable:protos.ProtoDescriptors.desc)
  return _internal_add_desc();
}
inline const std::string& ProtoDescriptors::_internal_desc(int index) const {
  return desc_.Get(index);
}
inline const std::string& ProtoDescriptors::desc(int index) const {
  // @@protoc_insertion_point(field_get:protos.ProtoDescriptors.desc)
  return _internal_desc(index);
}
inline std::string* ProtoDescriptors::mutable_desc(int index) {
  // @@protoc_insertion_point(field_mutable:protos.ProtoDescriptors.desc)
  return desc_.Mutable(index);
}
inline void ProtoDescriptors::set_desc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protos.ProtoDescriptors.desc)
  desc_.Mutable(index)->assign(value);
}
inline void ProtoDescriptors::set_desc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protos.ProtoDescriptors.desc)
  desc_.Mutable(index)->assign(std::move(value));
}
inline void ProtoDescriptors::set_desc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  desc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.ProtoDescriptors.desc)
}
inline void ProtoDescriptors::set_desc(int index, const void* value, size_t size) {
  desc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.ProtoDescriptors.desc)
}
inline std::string* ProtoDescriptors::_internal_add_desc() {
  return desc_.Add();
}
inline void ProtoDescriptors::add_desc(const std::string& value) {
  desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.ProtoDescriptors.desc)
}
inline void ProtoDescriptors::add_desc(std::string&& value) {
  desc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.ProtoDescriptors.desc)
}
inline void ProtoDescriptors::add_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.ProtoDescriptors.desc)
}
inline void ProtoDescriptors::add_desc(const void* value, size_t size) {
  desc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.ProtoDescriptors.desc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProtoDescriptors::desc() const {
  // @@protoc_insertion_point(field_list:protos.ProtoDescriptors.desc)
  return desc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProtoDescriptors::mutable_desc() {
  // @@protoc_insertion_point(field_mutable_list:protos.ProtoDescriptors.desc)
  return &desc_;
}

// -------------------------------------------------------------------

// ProtoNames

// repeated string name = 1;
inline int ProtoNames::_internal_name_size() const {
  return name_.size();
}
inline int ProtoNames::name_size() const {
  return _internal_name_size();
}
inline void ProtoNames::clear_name() {
  name_.Clear();
}
inline std::string* ProtoNames::add_name() {
  // @@protoc_insertion_point(field_add_mutable:protos.ProtoNames.name)
  return _internal_add_name();
}
inline const std::string& ProtoNames::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& ProtoNames::name(int index) const {
  // @@protoc_insertion_point(field_get:protos.ProtoNames.name)
  return _internal_name(index);
}
inline std::string* ProtoNames::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:protos.ProtoNames.name)
  return name_.Mutable(index);
}
inline void ProtoNames::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protos.ProtoNames.name)
  name_.Mutable(index)->assign(value);
}
inline void ProtoNames::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protos.ProtoNames.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void ProtoNames::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.ProtoNames.name)
}
inline void ProtoNames::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.ProtoNames.name)
}
inline std::string* ProtoNames::_internal_add_name() {
  return name_.Add();
}
inline void ProtoNames::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.ProtoNames.name)
}
inline void ProtoNames::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.ProtoNames.name)
}
inline void ProtoNames::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.ProtoNames.name)
}
inline void ProtoNames::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.ProtoNames.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProtoNames::name() const {
  // @@protoc_insertion_point(field_list:protos.ProtoNames.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProtoNames::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:protos.ProtoNames.name)
  return &name_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protodescriptor_2eproto
