// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protodescriptor.proto

#ifndef PROTOBUF_INCLUDED_protodescriptor_2eproto
#define PROTOBUF_INCLUDED_protodescriptor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protodescriptor_2eproto 

namespace protobuf_protodescriptor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protodescriptor_2eproto
namespace protos {
class ProtoDescriptor;
class ProtoDescriptorDefaultTypeInternal;
extern ProtoDescriptorDefaultTypeInternal _ProtoDescriptor_default_instance_;
class ProtoDescriptors;
class ProtoDescriptorsDefaultTypeInternal;
extern ProtoDescriptorsDefaultTypeInternal _ProtoDescriptors_default_instance_;
class ProtoName;
class ProtoNameDefaultTypeInternal;
extern ProtoNameDefaultTypeInternal _ProtoName_default_instance_;
class ProtoNames;
class ProtoNamesDefaultTypeInternal;
extern ProtoNamesDefaultTypeInternal _ProtoNames_default_instance_;
}  // namespace protos
namespace google {
namespace protobuf {
template<> ::protos::ProtoDescriptor* Arena::CreateMaybeMessage<::protos::ProtoDescriptor>(Arena*);
template<> ::protos::ProtoDescriptors* Arena::CreateMaybeMessage<::protos::ProtoDescriptors>(Arena*);
template<> ::protos::ProtoName* Arena::CreateMaybeMessage<::protos::ProtoName>(Arena*);
template<> ::protos::ProtoNames* Arena::CreateMaybeMessage<::protos::ProtoNames>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protos {

// ===================================================================

class ProtoDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.ProtoDescriptor) */ {
 public:
  ProtoDescriptor();
  virtual ~ProtoDescriptor();

  ProtoDescriptor(const ProtoDescriptor& from);

  inline ProtoDescriptor& operator=(const ProtoDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoDescriptor(ProtoDescriptor&& from) noexcept
    : ProtoDescriptor() {
    *this = ::std::move(from);
  }

  inline ProtoDescriptor& operator=(ProtoDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoDescriptor* internal_default_instance() {
    return reinterpret_cast<const ProtoDescriptor*>(
               &_ProtoDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProtoDescriptor* other);
  friend void swap(ProtoDescriptor& a, ProtoDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoDescriptor* New() const final {
    return CreateMaybeMessage<ProtoDescriptor>(NULL);
  }

  ProtoDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtoDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtoDescriptor& from);
  void MergeFrom(const ProtoDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes desc = 1;
  void clear_desc();
  static const int kDescFieldNumber = 1;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:protos.ProtoDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protodescriptor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtoName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.ProtoName) */ {
 public:
  ProtoName();
  virtual ~ProtoName();

  ProtoName(const ProtoName& from);

  inline ProtoName& operator=(const ProtoName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoName(ProtoName&& from) noexcept
    : ProtoName() {
    *this = ::std::move(from);
  }

  inline ProtoName& operator=(ProtoName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoName* internal_default_instance() {
    return reinterpret_cast<const ProtoName*>(
               &_ProtoName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProtoName* other);
  friend void swap(ProtoName& a, ProtoName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoName* New() const final {
    return CreateMaybeMessage<ProtoName>(NULL);
  }

  ProtoName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtoName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtoName& from);
  void MergeFrom(const ProtoName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:protos.ProtoName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protodescriptor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtoDescriptors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.ProtoDescriptors) */ {
 public:
  ProtoDescriptors();
  virtual ~ProtoDescriptors();

  ProtoDescriptors(const ProtoDescriptors& from);

  inline ProtoDescriptors& operator=(const ProtoDescriptors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoDescriptors(ProtoDescriptors&& from) noexcept
    : ProtoDescriptors() {
    *this = ::std::move(from);
  }

  inline ProtoDescriptors& operator=(ProtoDescriptors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoDescriptors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoDescriptors* internal_default_instance() {
    return reinterpret_cast<const ProtoDescriptors*>(
               &_ProtoDescriptors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ProtoDescriptors* other);
  friend void swap(ProtoDescriptors& a, ProtoDescriptors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoDescriptors* New() const final {
    return CreateMaybeMessage<ProtoDescriptors>(NULL);
  }

  ProtoDescriptors* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtoDescriptors>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtoDescriptors& from);
  void MergeFrom(const ProtoDescriptors& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoDescriptors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes desc = 1;
  int desc_size() const;
  void clear_desc();
  static const int kDescFieldNumber = 1;
  const ::std::string& desc(int index) const;
  ::std::string* mutable_desc(int index);
  void set_desc(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_desc(int index, ::std::string&& value);
  #endif
  void set_desc(int index, const char* value);
  void set_desc(int index, const void* value, size_t size);
  ::std::string* add_desc();
  void add_desc(const ::std::string& value);
  #if LANG_CXX11
  void add_desc(::std::string&& value);
  #endif
  void add_desc(const char* value);
  void add_desc(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& desc() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_desc();

  // @@protoc_insertion_point(class_scope:protos.ProtoDescriptors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> desc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protodescriptor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtoNames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.ProtoNames) */ {
 public:
  ProtoNames();
  virtual ~ProtoNames();

  ProtoNames(const ProtoNames& from);

  inline ProtoNames& operator=(const ProtoNames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoNames(ProtoNames&& from) noexcept
    : ProtoNames() {
    *this = ::std::move(from);
  }

  inline ProtoNames& operator=(ProtoNames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoNames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoNames* internal_default_instance() {
    return reinterpret_cast<const ProtoNames*>(
               &_ProtoNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProtoNames* other);
  friend void swap(ProtoNames& a, ProtoNames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoNames* New() const final {
    return CreateMaybeMessage<ProtoNames>(NULL);
  }

  ProtoNames* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtoNames>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtoNames& from);
  void MergeFrom(const ProtoNames& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoNames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:protos.ProtoNames)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protodescriptor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoDescriptor

// bytes desc = 1;
inline void ProtoDescriptor::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoDescriptor::desc() const {
  // @@protoc_insertion_point(field_get:protos.ProtoDescriptor.desc)
  return desc_.GetNoArena();
}
inline void ProtoDescriptor::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.ProtoDescriptor.desc)
}
#if LANG_CXX11
inline void ProtoDescriptor::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.ProtoDescriptor.desc)
}
#endif
inline void ProtoDescriptor::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.ProtoDescriptor.desc)
}
inline void ProtoDescriptor::set_desc(const void* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.ProtoDescriptor.desc)
}
inline ::std::string* ProtoDescriptor::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:protos.ProtoDescriptor.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoDescriptor::release_desc() {
  // @@protoc_insertion_point(field_release:protos.ProtoDescriptor.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoDescriptor::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:protos.ProtoDescriptor.desc)
}

// -------------------------------------------------------------------

// ProtoName

// string name = 1;
inline void ProtoName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoName::name() const {
  // @@protoc_insertion_point(field_get:protos.ProtoName.name)
  return name_.GetNoArena();
}
inline void ProtoName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.ProtoName.name)
}
#if LANG_CXX11
inline void ProtoName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.ProtoName.name)
}
#endif
inline void ProtoName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.ProtoName.name)
}
inline void ProtoName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.ProtoName.name)
}
inline ::std::string* ProtoName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protos.ProtoName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoName::release_name() {
  // @@protoc_insertion_point(field_release:protos.ProtoName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protos.ProtoName.name)
}

// -------------------------------------------------------------------

// ProtoDescriptors

// repeated bytes desc = 1;
inline int ProtoDescriptors::desc_size() const {
  return desc_.size();
}
inline void ProtoDescriptors::clear_desc() {
  desc_.Clear();
}
inline const ::std::string& ProtoDescriptors::desc(int index) const {
  // @@protoc_insertion_point(field_get:protos.ProtoDescriptors.desc)
  return desc_.Get(index);
}
inline ::std::string* ProtoDescriptors::mutable_desc(int index) {
  // @@protoc_insertion_point(field_mutable:protos.ProtoDescriptors.desc)
  return desc_.Mutable(index);
}
inline void ProtoDescriptors::set_desc(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protos.ProtoDescriptors.desc)
  desc_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProtoDescriptors::set_desc(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protos.ProtoDescriptors.desc)
  desc_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProtoDescriptors::set_desc(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.ProtoDescriptors.desc)
}
inline void ProtoDescriptors::set_desc(int index, const void* value, size_t size) {
  desc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.ProtoDescriptors.desc)
}
inline ::std::string* ProtoDescriptors::add_desc() {
  // @@protoc_insertion_point(field_add_mutable:protos.ProtoDescriptors.desc)
  return desc_.Add();
}
inline void ProtoDescriptors::add_desc(const ::std::string& value) {
  desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.ProtoDescriptors.desc)
}
#if LANG_CXX11
inline void ProtoDescriptors::add_desc(::std::string&& value) {
  desc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.ProtoDescriptors.desc)
}
#endif
inline void ProtoDescriptors::add_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.ProtoDescriptors.desc)
}
inline void ProtoDescriptors::add_desc(const void* value, size_t size) {
  desc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.ProtoDescriptors.desc)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtoDescriptors::desc() const {
  // @@protoc_insertion_point(field_list:protos.ProtoDescriptors.desc)
  return desc_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProtoDescriptors::mutable_desc() {
  // @@protoc_insertion_point(field_mutable_list:protos.ProtoDescriptors.desc)
  return &desc_;
}

// -------------------------------------------------------------------

// ProtoNames

// repeated string name = 1;
inline int ProtoNames::name_size() const {
  return name_.size();
}
inline void ProtoNames::clear_name() {
  name_.Clear();
}
inline const ::std::string& ProtoNames::name(int index) const {
  // @@protoc_insertion_point(field_get:protos.ProtoNames.name)
  return name_.Get(index);
}
inline ::std::string* ProtoNames::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:protos.ProtoNames.name)
  return name_.Mutable(index);
}
inline void ProtoNames::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protos.ProtoNames.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProtoNames::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protos.ProtoNames.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProtoNames::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.ProtoNames.name)
}
inline void ProtoNames::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.ProtoNames.name)
}
inline ::std::string* ProtoNames::add_name() {
  // @@protoc_insertion_point(field_add_mutable:protos.ProtoNames.name)
  return name_.Add();
}
inline void ProtoNames::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.ProtoNames.name)
}
#if LANG_CXX11
inline void ProtoNames::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.ProtoNames.name)
}
#endif
inline void ProtoNames::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.ProtoNames.name)
}
inline void ProtoNames::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.ProtoNames.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtoNames::name() const {
  // @@protoc_insertion_point(field_list:protos.ProtoNames.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProtoNames::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:protos.ProtoNames.name)
  return &name_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protodescriptor_2eproto
